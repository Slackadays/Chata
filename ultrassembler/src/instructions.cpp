// SPDX-License-Identifier: MPL-2.0
#include "instructions.hpp"
#include "ultrassembler.hpp"
#include <array>
#include <cstdint>
#include <initializer_list>
#include <string_view>

namespace ultrassembler_internal {

using enum RVInstructionID;
using enum RVInstructionFormat;
using namespace opcode;
using namespace ssarg;
using namespace reg_reqs;
using enum RVInSetMinReqs;
using std::nullopt;

const std::array<rvinstruction, 2034> instructions = {
        {{"lui", LUI, U, op_LUI, 0b000, RVI, int_reg},
         {"auipc", AUIPC, U, op_AUIPC, 0b000, RVI, int_reg},
         {"jal", JAL, J, op_JAL, 0b000, RVI, int_reg},
         {"jalr", JALR, I, op_JALR, 0b000, RVI, int_int},
         {"beq", BEQ, Branch, op_BRANCH, 0b000, RVI, int_int},
         {"bne", BNE, Branch, op_BRANCH, 0b001, RVI, int_int},
         {"blt", BLT, Branch, op_BRANCH, 0b001, RVI, int_int},
         {"bge", BGE, Branch, op_BRANCH, 0b100, RVI, int_int},
         {"bltu", BLTU, Branch, op_BRANCH, 0b101, RVI, int_int},
         {"bgeu", BGEU, Branch, op_BRANCH, 0b110, RVI, int_int},
         {"lb", LB, I, op_LOAD, 0b000, RVI, int_int},
         {"lh", LH, I, op_LOAD, 0b001, RVI, int_int},
         {"lw", LW, I, op_LOAD, 0b010, RVI, int_int},
         {"lbu", LBU, I, op_LOAD, 0b100, RVI, int_int},
         {"lhu", LHU, I, op_LOAD, 0b101, RVI, int_int},
         {"sb", SB, S, op_STORE, 0b000, RVI, int_int},
         {"sh", SH, S, op_STORE, 0b001, RVI, int_int},
         {"sw", SW, S, op_STORE, 0b010, RVI, int_int},
         {"addi", ADDI, I, op_IMM, 0b000, RVI, int_int},
         {"slti", SLTI, I, op_IMM, 0b010, RVI, int_int},
         {"sltiu", SLTIU, I, op_IMM, 0b011, RVI, int_int},
         {"xori", XORI, I, op_IMM, 0b100, RVI, int_int},
         {"ori", ORI, I, op_IMM, 0b110, RVI, int_int},
         {"andi", ANDI, I, op_IMM, 0b111, RVI, int_int},
         {"slli", SLLI, R, op_IMM, 0b0000000001, RVI, int_int, {get_imm_for_rs}},
         {"srli", SRLI, R, op_IMM, 0b0000000101, RVI, int_int, {get_imm_for_rs}},
         {"srai", SRAI, R, op_IMM, 0b0100000101, RVI, int_int, {get_imm_for_rs}},
         {"add", ADD, R, op_OP, 0b0000000000, RVI, int_int_int},
         {"sub", SUB, R, op_OP, 0b0100000000, RVI, int_int_int},
         {"sll", SLL, R, op_OP, 0b0000000001, RVI, int_int_int},
         {"slt", SLT, R, op_OP, 0b0000000010, RVI, int_int_int},
         {"sltu", SLTU, R, op_OP, 0b0000000011, RVI, int_int_int},
         {"xor", XOR, R, op_OP, 0b0000000100, RVI, int_int_int},
         {"srl", SRL, R, op_OP, 0b0000000101, RVI, int_int_int},
         {"sra", SRA, R, op_OP, 0b0100000101, RVI, int_int_int},
         {"or", OR, R, op_OP, 0b0000000110, RVI, int_int_int},
         {"and", AND, R, op_OP, 0b0000000111, RVI, int_int_int},
         {"fence", FENCE, I, op_MISC_MEM, 0b000, RVI, int_int, {special_handling}},
         {"fence.tso", FENCETSO, I, op_MISC_MEM, 0b100000110011000, RVI, {0b00000, use_funct_for_imm | no_rs1}},
         {"pause", PAUSE, I, op_MISC_MEM, 0b000000010000000, RVI, {0b00000, use_funct_for_imm | no_rs1}},
         {"ecall", ECALL, I, op_SYSTEM, 0b000000000000000, RVI, {0b00000, use_funct_for_imm | no_rs1}},
         {"ebreak", EBREAK, I, op_SYSTEM, 0b000000000001000, RVI, {0b00000, use_funct_for_imm | no_rs1}},
         {"lwu", LWU, I, op_LOAD, 0b110, I_and_64b, int_int},
         {"ld", LD, I, op_LOAD, 0b011, I_and_64b, int_int},
         {"sd", SD, S, op_STORE, 0b011, I_and_64b, int_int},
         {"addiw", ADDIW, I, op_IMM_32, 0b0000000000, I_and_64b, int_int},
         {"slliw", SLLIW, R, op_IMM_32, 0b0000000001, I_and_64b, int_int, {get_imm_for_rs}},
         {"srliw", SRLIW, R, op_IMM_32, 0b0000000101, I_and_64b, int_int, {get_imm_for_rs}},
         {"sraiw", SRAIW, R, op_IMM_32, 0b0100000101, I_and_64b, int_int, {get_imm_for_rs}},
         {"addw", ADDW, R, op_32, 0b0000000000, I_and_64b, int_int_int},
         {"subw", SUBW, R, op_32, 0b0100000000, I_and_64b, int_int_int},
         {"sllw", SLLW, R, op_32, 0b0000000001, I_and_64b, int_int_int},
         {"srlw", SRLW, R, op_32, 0b0000000101, I_and_64b, int_int_int},
         {"sraw", SRAW, R, op_32, 0b0100000101, I_and_64b, int_int_int},
         {"mul", MUL, R, op_OP, 0b0000001000, M, int_int_int},
         {"mulh", MULH, R, op_OP, 0b0000001001, M, int_int_int},
         {"mulhsu", MULHSU, R, op_OP, 0b0000001010, M, int_int_int},
         {"mulhu", MULHU, R, op_OP, 0b0000001011, M, int_int_int},
         {"div", DIV, R, op_OP, 0b0000001100, M, int_int_int},
         {"divu", DIVU, R, op_OP, 0b0000001101, M, int_int_int},
         {"rem", REM, R, op_OP, 0b0000001110, M, int_int_int},
         {"remu", REMU, R, op_OP, 0b0000001111, M, int_int_int},
         {"mulw", MULW, R, op_32, 0b0000001000, M_and_64b, int_int_int},
         {"divw", DIVW, R, op_32, 0b0000001100, M_and_64b, int_int_int},
         {"divuw", DIVUW, R, op_32, 0b0000001101, M_and_64b, int_int_int},
         {"remw", REMW, R, op_32, 0b0000001110, M_and_64b, int_int_int},
         {"remuw", REMUW, R, op_32, 0b0000001111, M_and_64b, int_int_int},
         {"lr.w", LRW, R, op_AMO, 0b0001000010, Zalrsc, int_int, {0b00000}},
         {"sc.w", SCW, R, op_AMO, 0b0001100010, Zalrsc, int_int_int},
         {"lr.w.aq", LRWAQ, R, op_AMO, 0b0001010010, Zalrsc, int_int, {0b00000}},
         {"sc.w.aq", SCWAQ, R, op_AMO, 0b0001110010, Zalrsc, int_int_int},
         {"lr.w.rl", LRWRL, R, op_AMO, 0b0001001010, Zalrsc, int_int, {0b00000}},
         {"sc.w.rl", SCWRL, R, op_AMO, 0b0001101010, Zalrsc, int_int_int},
         {"lr.w.aqrl", LRWAQRL, R, op_AMO, 0b0001011010, Zalrsc, int_int, {0b00000}},
         {"sc.w.aqrl", SCWAQRL, R, op_AMO, 0b0001111010, Zalrsc, int_int_int},
         {"amoswap.w", AMOSWAPW, R, op_AMO, 0b0000100010, Zaamo, int_int_int},
         {"amoadd.w", AMOADDW, R, op_AMO, 0b0000000010, Zaamo, int_int_int},
         {"amoxor.w", AMOXORW, R, op_AMO, 0b0010000010, Zaamo, int_int_int},
         {"amoand.w", AMOANDW, R, op_AMO, 0b0110000010, Zaamo, int_int_int},
         {"amoor.w", AMOORW, R, op_AMO, 0b0100000010, Zaamo, int_int_int},
         {"amomin.w", AMOMINW, R, op_AMO, 0b1000000010, Zaamo, int_int_int},
         {"amomax.w", AMOMAXW, R, op_AMO, 0b1010000010, Zaamo, int_int_int},
         {"amominu.w", AMOMINUW, R, op_AMO, 0b1100000010, Zaamo, int_int_int},
         {"amomaxu.w", AMOMAXUW, R, op_AMO, 0b1110000010, Zaamo, int_int_int},
         {"amoswap.w.aq", AMOSWAPWAQ, R, op_AMO, 0b0000110010, Zaamo, int_int_int},
         {"amoadd.w.aq", AMOADDWAQ, R, op_AMO, 0b0000010010, Zaamo, int_int_int},
         {"amoxor.w.aq", AMOXORWAQ, R, op_AMO, 0b0010010010, Zaamo, int_int_int},
         {"amoand.w.aq", AMOANDWAQ, R, op_AMO, 0b0110010010, Zaamo, int_int_int},
         {"amoor.w.aq", AMOORWAQ, R, op_AMO, 0b0100010010, Zaamo, int_int_int},
         {"amomin.w.aq", AMOMINWAQ, R, op_AMO, 0b1000010010, Zaamo, int_int_int},
         {"amomax.w.aq", AMOMAXWAQ, R, op_AMO, 0b1010010010, Zaamo, int_int_int},
         {"amominu.w.aq", AMOMINUWAQ, R, op_AMO, 0b1100010010, Zaamo, int_int_int},
         {"amomaxu.w.aq", AMOMAXUWAQ, R, op_AMO, 0b1110010010, Zaamo, int_int_int},
         {"amoswap.w.rl", AMOSWAPWRL, R, op_AMO, 0b0000101010, Zaamo, int_int_int},
         {"amoadd.w.rl", AMOADDWRL, R, op_AMO, 0b0000001010, Zaamo, int_int_int},
         {"amoxor.w.rl", AMOXORWRL, R, op_AMO, 0b0010001010, Zaamo, int_int_int},
         {"amoand.w.rl", AMOANDWRL, R, op_AMO, 0b0110001010, Zaamo, int_int_int},
         {"amoor.w.rl", AMOORWRL, R, op_AMO, 0b0100001010, Zaamo, int_int_int},
         {"amomin.w.rl", AMOMINWRL, R, op_AMO, 0b1000001010, Zaamo, int_int_int},
         {"amomax.w.rl", AMOMAXWRL, R, op_AMO, 0b1010001010, Zaamo, int_int_int},
         {"amominu.w.rl", AMOMINUWRL, R, op_AMO, 0b1100001010, Zaamo, int_int_int},
         {"amomaxu.w.rl", AMOMAXUWRL, R, op_AMO, 0b1110001010, Zaamo, int_int_int},
         {"amoswap.w.aqrl", AMOSWAPWAQRL, R, op_AMO, 0b0000111010, Zaamo, int_int_int},
         {"amoadd.w.aqrl", AMOADDWAQRL, R, op_AMO, 0b0000011010, Zaamo, int_int_int},
         {"amoxor.w.aqrl", AMOXORWAQRL, R, op_AMO, 0b0010011010, Zaamo, int_int_int},
         {"amoand.w.aqrl", AMOANDWAQRL, R, op_AMO, 0b0110011010, Zaamo, int_int_int},
         {"amoor.w.aqrl", AMOORWAQRL, R, op_AMO, 0b0100011010, Zaamo, int_int_int},
         {"amomin.w.aqrl", AMOMINWAQRL, R, op_AMO, 0b1000011010, Zaamo, int_int_int},
         {"amomax.w.aqrl", AMOMAXWAQRL, R, op_AMO, 0b1010011010, Zaamo, int_int_int},
         {"amominu.w.aqrl", AMOMINUWAQRL, R, op_AMO, 0b1100011010, Zaamo, int_int_int},
         {"amomaxu.w.aqrl", AMOMAXUWAQRL, R, op_AMO, 0b1110011010, Zaamo, int_int_int},
         {"lr.d", LRD, R, op_AMO, 0b0001000011, Zalrsc_and_64b, int_int, {0b00000}},
         {"sc.d", SCD, R, op_AMO, 0b0001100011, Zalrsc_and_64b, int_int_int},
         {"lr.d.aq", LRDAQ, R, op_AMO, 0b0001010011, Zalrsc_and_64b, int_int, {0b00000}},
         {"sc.d.aq", SCDAQ, R, op_AMO, 0b0001110011, Zalrsc_and_64b, int_int_int},
         {"lr.d.rl", LRDRL, R, op_AMO, 0b0001001011, Zalrsc_and_64b, int_int, {0b00000}},
         {"sc.d.rl", SCDRL, R, op_AMO, 0b0001101011, Zalrsc_and_64b, int_int_int},
         {"lr.d.aqrl", LRDAQRL, R, op_AMO, 0b0001011011, Zalrsc_and_64b, int_int, {0b00000}},
         {"sc.d.aqrl", SCDAQRL, R, op_AMO, 0b0001111011, Zalrsc_and_64b, int_int_int},
         {"amoswap.d", AMOSWAPD, R, op_AMO, 0b0000100011, Zaamo_and_64b, int_int_int},
         {"amoadd.d", AMOADDD, R, op_AMO, 0b0000000011, Zaamo_and_64b, int_int_int},
         {"amoxor.d", AMOXORD, R, op_AMO, 0b0010000011, Zaamo_and_64b, int_int_int},
         {"amoand.d", AMOANDD, R, op_AMO, 0b0110000011, Zaamo_and_64b, int_int_int},
         {"amoor.d", AMOORD, R, op_AMO, 0b0100000011, Zaamo_and_64b, int_int_int},
         {"amomin.d", AMOMIND, R, op_AMO, 0b1000000011, Zaamo_and_64b, int_int_int},
         {"amomax.d", AMOMAXD, R, op_AMO, 0b1010000011, Zaamo_and_64b, int_int_int},
         {"amominu.d", AMOMINUD, R, op_AMO, 0b1100000011, Zaamo_and_64b, int_int_int},
         {"amomaxu.d", AMOMAXUD, R, op_AMO, 0b1110000011, Zaamo_and_64b, int_int_int},
         {"amoswap.d.aq", AMOSWAPDAQ, R, op_AMO, 0b0000110011, Zaamo_and_64b, int_int_int},
         {"amoadd.d.aq", AMOADDDAQ, R, op_AMO, 0b0000010011, Zaamo_and_64b, int_int_int},
         {"amoxor.d.aq", AMOXORDAQ, R, op_AMO, 0b0010010011, Zaamo_and_64b, int_int_int},
         {"amoand.d.aq", AMOANDDAQ, R, op_AMO, 0b0110010011, Zaamo_and_64b, int_int_int},
         {"amoor.d.aq", AMOORDAQ, R, op_AMO, 0b0100010011, Zaamo_and_64b, int_int_int},
         {"amomin.d.aq", AMOMINDAQ, R, op_AMO, 0b1000010011, Zaamo_and_64b, int_int_int},
         {"amomax.d.aq", AMOMAXDAQ, R, op_AMO, 0b1010010011, Zaamo_and_64b, int_int_int},
         {"amominu.d.aq", AMOMINUDAQ, R, op_AMO, 0b1100010011, Zaamo_and_64b, int_int_int},
         {"amomaxu.d.aq", AMOMAXUDAQ, R, op_AMO, 0b1110010011, Zaamo_and_64b, int_int_int},
         {"amoswap.d.rl", AMOSWAPDRL, R, op_AMO, 0b0000101011, Zaamo_and_64b, int_int_int},
         {"amoadd.d.rl", AMOADDDRL, R, op_AMO, 0b0000001011, Zaamo_and_64b, int_int_int},
         {"amoxor.d.rl", AMOXORDRL, R, op_AMO, 0b0010001011, Zaamo_and_64b, int_int_int},
         {"amoand.d.rl", AMOANDDRL, R, op_AMO, 0b0110001011, Zaamo_and_64b, int_int_int},
         {"amoor.d.rl", AMOORDRL, R, op_AMO, 0b0100001011, Zaamo_and_64b, int_int_int},
         {"amomin.d.rl", AMOMINDRL, R, op_AMO, 0b1000001011, Zaamo_and_64b, int_int_int},
         {"amomax.d.rl", AMOMAXDRL, R, op_AMO, 0b1010001011, Zaamo_and_64b, int_int_int},
         {"amominu.d.rl", AMOMINUDRL, R, op_AMO, 0b1100001011, Zaamo_and_64b, int_int_int},
         {"amomaxu.d.rl", AMOMAXUDRL, R, op_AMO, 0b1110001011, Zaamo_and_64b, int_int_int},
         {"amoswap.d.aqrl", AMOSWAPDAQRL, R, op_AMO, 0b0000111011, Zaamo_and_64b, int_int_int},
         {"amoadd.d.aqrl", AMOADDDAQRL, R, op_AMO, 0b0000011011, Zaamo_and_64b, int_int_int},
         {"amoxor.d.aqrl", AMOXORDAQRL, R, op_AMO, 0b0010011011, Zaamo_and_64b, int_int_int},
         {"amoand.d.aqrl", AMOANDDAQRL, R, op_AMO, 0b0110011011, Zaamo_and_64b, int_int_int},
         {"amoor.d.aqrl", AMOORDAQRL, R, op_AMO, 0b0100011011, Zaamo_and_64b, int_int_int},
         {"amomin.d.aqrl", AMOMINDAQRL, R, op_AMO, 0b1000011011, Zaamo_and_64b, int_int_int},
         {"amomax.d.aqrl", AMOMAXDAQRL, R, op_AMO, 0b1010011011, Zaamo_and_64b, int_int_int},
         {"amominu.d.aqrl", AMOMINUDAQRL, R, op_AMO, 0b1100011011, Zaamo_and_64b, int_int_int},
         {"amomaxu.d.aqrl", AMOMAXUDAQRL, R, op_AMO, 0b1110011011, Zaamo_and_64b, int_int_int},
         {"cbo.clean", CBOCLEAN, I, op_MISC_MEM, 0b000000000001010, Zicbom, int_reg, {0b00000, use_funct_for_imm}},
         {"cbo.flush", CBOFLUSH, I, op_MISC_MEM, 0b000000000010010, Zicbom, int_reg, {0b00000, use_funct_for_imm}},
         {"cbo.inval", CBOINVAL, I, op_MISC_MEM, 0b000000000000010, Zicbom, int_reg, {0b00000, use_funct_for_imm}},
         {"cbo.zero", CBOZERO, I, op_MISC_MEM, 0b000000000100010, Zicboz, int_reg, {0b00000, use_funct_for_imm}},
         {"prefetch.i", PREFETCHI, I, op_IMM, 0b000000000000110, Zicbop, int_reg, {0b00000, use_funct_for_imm}},
         {"prefetch.r", PREFETCHR, I, op_IMM, 0b000000000001110, Zicbop, int_reg, {0b00000, use_funct_for_imm}},
         {"prefetch.w", PREFETCHW, I, op_IMM, 0b000000000011110, Zicbop, int_reg, {0b00000, use_funct_for_imm}},
         {"fmadd.s", FMADDS, R4, op_MADD, op_C0, F_or_Zfinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fmsub.s", FMSUBS, R4, op_MSUB, op_C0, F_or_Zfinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fnmsub.s", FNMSUBS, R4, op_NMSUB, op_C0, F_or_Zfinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fnmadd.s", FNMADDS, R4, op_NMADD, op_C0, F_or_Zfinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fadd.s", FADDS, R, op_FP, 0b0000000000, F_or_Zfinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fsub.s", FSUBS, R, op_FP, 0b0000100000, F_or_Zfinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fmul.s", FMULS, R, op_FP, 0b0001000000, F_or_Zfinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fdiv.s", FDIVS, R, op_FP, 0b0001100000, F_or_Zfinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fsqrt.s", FSQRTS, R, op_FP, 0b0101100000, F_or_Zfinx, floatint_floatint, {0b00000, use_frm_for_funct3}},
         {"fsgnj.s", FSGNJS, R, op_FP, 0b0010000000, F_or_Zfinx, floatint_floatint_floatint},
         {"fsgnjn.s", FSGNJNS, R, op_FP, 0b0010000001, F_or_Zfinx, floatint_floatint_floatint},
         {"fsgnjx.s", FSGNJXS, R, op_FP, 0b0010000010, F_or_Zfinx, floatint_floatint_floatint},
         {"fmin.s", FMINS, R, op_FP, 0b0010100000, F_or_Zfinx, floatint_floatint_floatint},
         {"fmax.s", FMAXS, R, op_FP, 0b0010100001, F_or_Zfinx, floatint_floatint_floatint},
         {"fcvt.w.s", FCVTWS, R, op_FP, 0b1100000000, F_or_Zfinx, int_floatint, {0b00000, use_frm_for_funct3}},
         {"fcvt.wu.s", FCVTWUS, R, op_FP, 0b1100000000, F_or_Zfinx, int_floatint, {0b00001, use_frm_for_funct3}},
         {"fmv.x.w", FMVXW, R, op_FP, 0b1110000000, F, int_float, {0b00000}},
         {"feq.s", FEQS, R, op_FP, 0b1010000010, F_or_Zfinx, int_floatint_floatint},
         {"flt.s", FLTS, R, op_FP, 0b1010000001, F_or_Zfinx, int_floatint_floatint},
         {"fle.s", FLES, R, op_FP, 0b1010000000, F_or_Zfinx, int_floatint_floatint},
         {"fclass.s", FCLASSS, R, op_FP, 0b1110000001, F_or_Zfinx, int_floatint, {0b00000}},
         {"fcvt.s.w", FCVTSW, R, op_FP, 0b1101000000, F_or_Zfinx, floatint_int, {0b00000, use_frm_for_funct3}},
         {"fcvt.s.wu", FCVTSWU, R, op_FP, 0b1101000000, F_or_Zfinx, floatint_int, {0b00001, use_frm_for_funct3}},
         {"fmv.w.x", FMVWX, R, op_FP, 0b1111000000, F, float_int, {0b00000}},
         {"flw", FLW, I, op_LOAD_FP, 0b010, F, float_int},
         {"fsw", FSW, S, op_STORE_FP, 0b010, F, float_int},
         {"fcvt.l.s", FCVTLS, R, op_FP, 0b1100000000, F_and_64b, int_floatint, {0b00010, use_frm_for_funct3}},
         {"fcvt.lu.s", FCVTLUS, R, op_FP, 0b1100000000, F_and_64b, int_floatint, {0b00011, use_frm_for_funct3}},
         {"fcvt.s.l", FCVTSL, R, op_FP, 0b1101000000, F_and_64b, floatint_int, {0b00010, use_frm_for_funct3}},
         {"fcvt.s.lu", FCVTSLU, R, op_FP, 0b1101000000, F_and_64b, floatint_int, {0b00011, use_frm_for_funct3}},
         {"fadd.d", FADDD, R, op_FP, 0b0000001000, D_or_Zdinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fmadd.d", FMADDD, R4, op_MADD, 0b01000, D_or_Zdinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fmax.d", FMAXD, R, op_FP, 0b0010101001, D_or_Zdinx, floatint_floatint_floatint},
         {"fclass.d", FCLASSD, R, op_FP, 0b1110001001, D_or_Zdinx, int_floatint, {0b00000}},
         {"fcvt.d.s", FCVTDS, R, op_FP, 0b0100001000, D_or_Zdinx, floatint_floatint, {0b00000, use_frm_for_funct3}},
         {"fcvt.d.w", FCVTDW, R, op_FP, 0b1101001000, D_or_Zdinx, floatint_int, {0b00000, use_frm_for_funct3}},
         {"fcvt.d.wu", FCVTDWU, R, op_FP, 0b1101001000, D_or_Zdinx, floatint_int, {0b00001, use_frm_for_funct3}},
         {"fcvt.s.d", FCVTSD, R, op_FP, 0b0100000000, D_or_Zdinx, floatint_floatint, {0b00001, use_frm_for_funct3}},
         {"fcvt.w.d", FCVTWD, R, op_FP, 0b1100001000, D_or_Zdinx, int_floatint, {0b00000, use_frm_for_funct3}},
         {"fcvt.wu.d", FCVTWUD, R, op_FP, 0b1100001000, D_or_Zdinx, int_floatint, {0b00001, use_frm_for_funct3}},
         {"fdiv.d", FDIVD, R, op_FP, 0b0001101000, D_or_Zdinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"feq.d", FEQD, R, op_FP, 0b1010001010, D_or_Zdinx, int_floatint_floatint},
         {"flt.d", FLTD, R, op_FP, 0b1010001001, D_or_Zdinx, int_floatint_floatint},
         {"fle.d", FLED, R, op_FP, 0b1010001000, D_or_Zdinx, int_floatint_floatint},
         {"fld", FLD, I, op_LOAD_FP, 0b011, D_or_Zdinx, float_int},
         {"fmin.d", FMIND, R, op_FP, 0b0010101000, D_or_Zdinx, floatint_floatint_floatint},
         {"fmsub.d", FMSUBD, R4, op_MSUB, 0b01000, D_or_Zdinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fmul.d", FMULD, R, op_FP, 0b0001001000, D_or_Zdinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fnmadd.d", FNMADDD, R4, op_NMADD, 0b01000, D_or_Zdinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fnmsub.d", FNMSUBD, R4, op_NMSUB, 0b01000, D_or_Zdinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fsd", FSD, S, op_STORE_FP, 0b011, D_or_Zdinx, float_int},
         {"fsgnj.d", FSGNJD, R, op_FP, 0b0010001000, D_or_Zdinx, floatint_floatint_floatint},
         {"fsgnjn.d", FSGJND, R, op_FP, 0b0010001001, D_or_Zdinx, floatint_floatint_floatint},
         {"fsgnjx.d", FSGNJXD, R, op_FP, 0b0010001010, D_or_Zdinx, floatint_floatint_floatint},
         {"fsqrt.d", FSQRTD, R, op_FP, 0b0101101000, D_or_Zdinx, floatint_floatint, {0b00000, use_frm_for_funct3}},
         {"fsub.d", FSUBD, R, op_FP, 0b0000101000, D_or_Zdinx, floatint_floatint, {use_frm_for_funct3}},
         {"fcvt.l.d", FCVTLD, R, op_FP, 0b1100001000, D_or_Zdinx_and_64b, int_floatint, {0b00010, use_frm_for_funct3}},
         {"fcvt.lu.d", FCVTLUD, R, op_FP, 0b1100001000, D_or_Zdinx_and_64b, int_floatint, {0b00011, use_frm_for_funct3}},
         {"fmv.x.d", FMVXD, R, op_FP, 0b1110001000, D_or_Zdinx_and_64b, int_float, {0b00000}},
         {"fcvt.d.l", FCVTDL, R, op_FP, 0b1101001000, D_or_Zdinx_and_64b, floatint_int, {0b00010, use_frm_for_funct3}},
         {"fcvt.d.lu", FCVTDLU, R, op_FP, 0b1101001000, D_or_Zdinx_and_64b, floatint_int, {0b00011, use_frm_for_funct3}},
         {"fmv.d.x", FMVDX, R, op_FP, 0b1111001000, D_or_Zdinx_and_64b, float_int, {0b00000}},
         {"flq", FLQ, I, op_LOAD_FP, 0b100, Q, float_int},
         {"fsq", FSQ, S, op_STORE_FP, 0b100, Q, float_int},
         {"fmadd.q", FMADDQ, R4, op_MADD, 0b11000, Q, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fmsub.q", FMSUBQ, R4, op_MSUB, 0b11000, Q, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fnmsub.q", FNMSUBQ, R4, op_NMSUB, 0b11000, Q, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fnmadd.q", FNMADDQ, R4, op_NMADD, 0b11000, Q, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fadd.q", FADDQ, R, op_FP, 0b0000011000, Q, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fsub.q", FSUBQ, R, op_FP, 0b0000111000, Q, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fmul.q", FMULQ, R, op_FP, 0b0001011000, Q, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fdiv.q", FDIVQ, R, op_FP, 0b0001111000, Q, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fsqrt.q", FSQRTQ, R, op_FP, 0b0101111000, Q, floatint_floatint, {0b00000, use_frm_for_funct3}},
         {"fsgnj.q", FSGNJQ, R, op_FP, 0b0010011000, Q, floatint_floatint_floatint},
         {"fsgnjn.q", FSGNJNQ, R, op_FP, 0b0010011001, Q, floatint_floatint_floatint},
         {"fsgnjx.q", FSGNJXQ, R, op_FP, 0b0010011010, Q, floatint_floatint_floatint},
         {"fmin.q", FMINQ, R, op_FP, 0b0010111000, Q, floatint_floatint_floatint},
         {"fmax.q", FMAXQ, R, op_FP, 0b0010111001, Q, floatint_floatint_floatint},
         {"fcvt.s.q", FCVTSQ, R, op_FP, 0b0100000000, Q, floatint_floatint, {0b00011, use_frm_for_funct3}},
         {"fcvt.q.s", FCVTQS, R, op_FP, 0b0100011000, Q, floatint_floatint, {0b00000, use_frm_for_funct3}},
         {"fcvt.d.q", FCVTDQ, R, op_FP, 0b0100001000, Q, floatint_floatint, {0b00011, use_frm_for_funct3}},
         {"fcvt.q.d", FCVTQD, R, op_FP, 0b0100011000, Q, floatint_floatint, {0b00001, use_frm_for_funct3}},
         {"feq.q", FEQQ, R, op_FP, 0b1010011010, Q, int_floatint_floatint},
         {"flt.q", FLTQ, R, op_FP, 0b1010011001, Q, int_floatint_floatint},
         {"fle.q", FLEQ, R, op_FP, 0b1010011000, Q, int_floatint_floatint},
         {"fclass.q", FCLASSQ, R, op_FP, 0b1110011001, Q, int_floatint, {0b00000}},
         {"fcvt.w.q", FCVTWQ, R, op_FP, 0b1100011000, Q, int_floatint, {0b00000, use_frm_for_funct3}},
         {"fcvt.wu.q", FCVTWUQ, R, op_FP, 0b1100011000, Q, int_floatint, {0b00001, use_frm_for_funct3}},
         {"fcvt.q.w", FCVTQW, R, op_FP, 0b1101011000, Q, floatint_int, {0b00000, use_frm_for_funct3}},
         {"fcvt.q.wu", FCVTQWU, R, op_FP, 0b1101011000, Q, floatint_int, {0b00001, use_frm_for_funct3}},
         {"fcvt.l.q", FCVTLQ, R, op_FP, 0b1100011000, Q_and_64b, int_floatint, {0b00010, use_frm_for_funct3}},
         {"fcvt.lu.q", FCVTLUQ, R, op_FP, 0b1100011000, Q_and_64b, int_floatint, {0b00011, use_frm_for_funct3}},
         {"fcvt.q.l", FCVTQL, R, op_FP, 0b1101011000, Q_and_64b, floatint_int, {0b00010, use_frm_for_funct3}},
         {"fcvt.q.lu", FCVTQLU, R, op_FP, 0b1101011000, Q_and_64b, floatint_int, {0b00011, use_frm_for_funct3}},
         {"flh", FLH, I, op_LOAD_FP, 0b001, Zfhmin, float_int},
         {"fsh", FSH, S, op_STORE_FP, 0b001, Zfhmin, float_int},
         {"fmadd.h", FMADDH, R4, op_MADD, 0b10000, Zfh_or_Zhinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fmsub.h", FMSUBH, R4, op_MSUB, 0b10000, Zfh_or_Zhinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fnmsub.h", FNMSUBH, R4, op_NMSUB, 0b10000, Zfh_or_Zhinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fnmadd.h", FNMADDH, R4, op_NMADD, 0b10000, Zfh_or_Zhinx, floatint_floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fadd.h", FADDH, R, op_FP, 0b0000010000, Zfh_or_Zhinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fsub.h", FSUBH, R, op_FP, 0b0000110000, Zfh_or_Zhinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fmul.h", FMULH, R, op_FP, 0b0001010000, Zfh_or_Zhinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fdiv.h", FDIVH, R, op_FP, 0b0001110000, Zfh_or_Zhinx, floatint_floatint_floatint, {use_frm_for_funct3}},
         {"fsqrt.h", FSQRTH, R, op_FP, 0b0101110000, Zfh_or_Zhinx, floatint_floatint, {0b00000, use_frm_for_funct3}},
         {"fsgnj.h", FSGNJH, R, op_FP, 0b0010010000, Zfh_or_Zhinx, floatint_floatint_floatint},
         {"fsgnjn.h", FSGNJNH, R, op_FP, 0b0010010001, Zfh_or_Zhinx, floatint_floatint_floatint},
         {"fsgnjx.h", FSGNJXH, R, op_FP, 0b0010010010, Zfh_or_Zhinx, floatint_floatint_floatint},
         {"fmin.h", FMINH, R, op_FP, 0b0010110000, Zfh_or_Zhinx, floatint_floatint_floatint},
         {"fmax.h", FMAXH, R, op_FP, 0b0010110001, Zfh_or_Zhinx, floatint_floatint_floatint},
         {"fcvt.s.h", FCVTSH, R, op_FP, 0b0100000000, Zfhmin_or_Zhinxmin, floatint_floatint, {0b00010, use_frm_for_funct3}},
         {"fcvt.h.s", FCVTHS, R, op_FP, 0b0100010000, Zfhmin, floatint_floatint, {0b00000, use_frm_for_funct3}},
         {"fcvt.d.h", FCVTDH, R, op_FP, 0b0100001000, Zfhmin_or_Zhinxmin_and_D_or_Zdinx, floatint_floatint, {0b00010, use_frm_for_funct3}},
         {"fcvt.h.d", FCVTHD, R, op_FP, 0b0100010000, Zfhmin_or_Zhinxmin_and_D_or_Zdinx, floatint_floatint, {0b00001, use_frm_for_funct3}},
         {"fcvt.q.h", FCVTQH, R, op_FP, 0b0100011000, Zfhmin_and_Q, floatint_floatint, {0b00010, use_frm_for_funct3}},
         {"fcvt.h.q", FCVTHQ, R, op_FP, 0b0100010000, Zfhmin_and_Q, floatint_floatint, {0b00011, use_frm_for_funct3}},
         {"feq.h", FEQH, R, op_FP, 0b1010010010, Zfh_or_Zhinx, int_floatint_floatint},
         {"flt.h", FLTH, R, op_FP, 0b1010010001, Zfh_or_Zhinx, int_floatint_floatint},
         {"fle.h", FLEH, R, op_FP, 0b1010010000, Zfh_or_Zhinx, int_floatint_floatint},
         {"fclass.h", FCLASSH, R, op_FP, 0b1110010001, Zfh_or_Zhinx, int_floatint, {0b00000}},
         {"fcvt.w.h", FCVTWH, R, op_FP, 0b1100010000, Zfh_or_Zhinx, int_floatint, {0b00000, use_frm_for_funct3}},
         {"fcvt.wu.h", FCVTWUH, R, op_FP, 0b1100010000, Zfh_or_Zhinx, int_floatint, {0b00001, use_frm_for_funct3}},
         {"fmv.x.h", FMVXH, R, op_FP, 0b1110010000, Zfhmin, int_float, {0b00000}},
         {"fcvt.h.w", FCVTHW, R, op_FP, 0b1101010000, Zfh_or_Zhinx, floatint_int, {0b00000, use_frm_for_funct3}},
         {"fcvt.h.wu", FCVTHWU, R, op_FP, 0b1101010000, Zfh_or_Zhinx, floatint_int, {0b00001, use_frm_for_funct3}},
         {"fmv.h.x", FMVXH, R, op_FP, 0b1111010000, Zfhmin, float_int, {0b00000}},
         {"fcvt.l.h", FCVTLH, R, op_FP, 0b1100010000, Zfh_or_Zhinx_and_64b, int_floatint, {0b00010, use_frm_for_funct3}},
         {"fcvt.lu.h", FCVTLUH, R, op_FP, 0b1100010000, Zfh_or_Zhinx_and_64b, int_floatint, {0b00011, use_frm_for_funct3}},
         {"fcvt.h.l", FCVTHL, R, op_FP, 0b1101010000, Zfh_or_Zhinx_and_64b, floatint_int, {0b00010, use_frm_for_funct3}},
         {"fcvt.h.lu", FCVTHLU, R, op_FP, 0b1101010000, Zfh_or_Zhinx_and_64b, floatint_int, {0b00011, use_frm_for_funct3}},
         {"fence.i", FENCEI, I, op_MISC_MEM, 0b000000000000001, Zifencei, {0b00000, use_funct_for_imm | no_rs1}},
         {"csrrw", CSRRW, I, op_SYSTEM, 0b001, Zicsr, int_int, {special_handling}},
         {"csrrs", CSRRS, I, op_SYSTEM, 0b010, Zicsr, int_int, {special_handling}},
         {"csrrc", CSRRC, I, op_SYSTEM, 0b011, Zicsr, int_int, {special_handling}},
         {"csrrwi", CSRRWI, I, op_SYSTEM, 0b101, Zicsr, int_reg, {special_handling}},
         {"csrrsi", CSRRSI, I, op_SYSTEM, 0b110, Zicsr, int_reg, {special_handling}},
         {"csrrci", CSRRCI, I, op_SYSTEM, 0b111, Zicsr, int_reg, {special_handling}},
         {"wrs.nto", WRSNTO, I, op_SYSTEM, 0b000000001101000, Zawrs, {0b00000, use_funct_for_imm | no_rs1}},
         {"wrs.sto", WRSSTO, I, op_SYSTEM, 0b000000011101000, Zawrs, {0b00000, use_funct_for_imm | no_rs1}},
         {"c.lwsp", CLWSP, CI, op_C2, 0b010, Zca, int_reg},
         {"c.ldsp", CLDSP, CI, op_C2, 0b011, Zca, int_reg},
         {"c.flwsp", CFLWSP, CI, op_C2, 0b011, Zcf, float_reg},
         {"c.fldsp", CFLDSP, CI, op_C2, 0b001, Zcd, float_reg},
         {"c.swsp", CSWSP, CSS, op_C2, 0b110, Zca, int_reg},
         {"c.sdsp", CSDSP, CSS, op_C2, 0b111, Zca, int_reg},
         {"c.fswsp", CFSWSP, CSS, op_C2, 0b111, Zcf, float_reg},
         {"c.fsdsp", CFSDSP, CSS, op_C2, 0b101, Zcd, float_reg},
         {"c.lw", CLW, CL, op_C0, 0b010, Zca, int_int},
         {"c.ld", CLD, CL, op_C0, 0b011, Zca, int_int},
         {"c.flw", CFLW, CL, op_C0, 0b011, Zcf, float_int},
         {"c.fld", CFLD, CL, op_C0, 0b001, Zcd, float_int},
         {"c.sw", CSW, CS, op_C0, 0b110, Zca, int_int},
         {"c.sd", CSD, CS, op_C0, 0b111, Zca, int_int},
         {"c.fsw", CFSW, CS, op_C0, 0b111, Zcf, float_int},
         {"c.fsd", CFSD, CS, op_C0, 0b101, Zcd, float_int},
         {"c.j", CJump, CJ, op_C1, 0b101, Zca},
         {"c.jal", CJAL, CJ, op_C1, 0b001, Zca},
         {"c.jr", CJR, CR, op_C2, 0b1000, Zca, int_reg, {0b00000}},
         {"c.jalr", CJALR, CR, op_C2, 0b1001, Zca, int_reg, {0b00000}},
         {"c.beqz", CBEQZ, CB, op_C1, 0b110, Zca, int_reg},
         {"c.bnez", CBNEZ, CB, op_C1, 0b111, Zca, int_reg},
         {"c.li", CLI, CI, op_C1, 0b010, Zca, int_reg},
         {"c.lui", CLUI, CI, op_C1, 0b011, Zca, int_reg},
         {"c.addi", CADDI, CI, op_C1, 0b000, Zca, int_reg},
         {"c.addiw", CADDIW, CI, op_C1, 0b001, Zca, int_reg},
         {"c.addi16sp", CADDI16SP, CI, op_C1, 0b011, Zca},
         {"c.slli", CSLLI, CI, op_C2, 0b000, Zca, int_reg},
         {"c.srli", CSRLI, CB, op_C1, 0b10000, Zca, int_reg},
         {"c.srai", CSRAI, CB, op_C1, 0b10001, Zca, int_reg},
         {"c.andi", CANDI, CB, op_C1, 0b10010, Zca, int_reg},
         {"c.mv", CMV, CR, op_C2, 0b1000, Zca, int_int},
         {"c.add", CADD, CR, op_C2, 0b1001, Zca, int_int},
         {"c.and", CAND, CA, op_C1, 0b10001111, Zca, int_int},
         {"c.or", COR, CA, op_C1, 0b10001110, Zca, int_int},
         {"c.xor", CXOR, CA, op_C1, 0b10001101, Zca, int_int},
         {"c.sub", CSUB, CA, op_C1, 0b10001100, Zca, int_int},
         {"c.addw", CADDW, CA, op_C1, 0b10011101, Zca, int_int},
         {"c.subw", CSUBW, CA, op_C1, 0b10011100, Zca, int_int},
         {"c.nop", CNOP, CI, op_C1, 0b000000000, Zca, {0b00000, use_funct_for_imm}},
         {"c.ebreak", CEBREAK, CR, op_C2, 0b1001, Zca, {0b00000, no_rs1}},
         {"czero.eqz", CZEROEQZ, R, op_OP, 0b0000111101, Zicond, int_int_int},
         {"czero.nez", CZERONEZ, R, op_OP, 0b0000111111, Zicond, int_int_int},
         {"amocas.w", AMOCASW, R, op_AMO, 0b0010100010, Zacas, int_int_int},
         {"amocas.d", AMOCASD, R, op_AMO, 0b0010100011, Zacas, int_int_int},
         {"amocas.q", AMOCASQ, R, op_AMO, 0b0010100100, Zacas, int_int_int},
         {"amocas.w.aq", AMOCASWAQ, R, op_AMO, 0b0010110010, Zacas, int_int_int},
         {"amocas.d.aq", AMOCASDAQ, R, op_AMO, 0b0010110011, Zacas, int_int_int},
         {"amocas.q.aq", AMOCASQAQ, R, op_AMO, 0b0010110100, Zacas, int_int_int},
         {"amocas.w.rl", AMOCASWRL, R, op_AMO, 0b0010101010, Zacas, int_int_int},
         {"amocas.d.rl", AMOCASDRL, R, op_AMO, 0b0010101011, Zacas, int_int_int},
         {"amocas.q.rl", AMOCASQRL, R, op_AMO, 0b0010101100, Zacas, int_int_int},
         {"amocas.w.aqrl", AMOCASWAQRL, R, op_AMO, 0b0010111010, Zacas, int_int_int},
         {"amocas.d.aqrl", AMOCASDAQRL, R, op_AMO, 0b0010111011, Zacas, int_int_int},
         {"amocas.q.aqrl", AMOCASQAQRL, R, op_AMO, 0b0010111100, Zacas, int_int_int},
         {"amoswap.b", AMOSWAPB, R, op_AMO, 0b0000100000, Zabha, int_int_int},
         {"amoswap.h", AMOSWAPH, R, op_AMO, 0b0000100001, Zabha, int_int_int},
         {"amoadd.b", AMOADDB, R, op_AMO, 0b0000000000, Zabha, int_int_int},
         {"amoadd.h", AMOADDH, R, op_AMO, 0b0000000001, Zabha, int_int_int},
         {"amoand.b", AMOANDB, R, op_AMO, 0b0110000000, Zabha, int_int_int},
         {"amoand.h", AMOANDH, R, op_AMO, 0b0110000001, Zabha, int_int_int},
         {"amoor.b", AMOORB, R, op_AMO, 0b0100000000, Zabha, int_int_int},
         {"amoor.h", AMOORH, R, op_AMO, 0b0100000001, Zabha, int_int_int},
         {"amoxor.b", AMOXORB, R, op_AMO, 0b0010000000, Zabha, int_int_int},
         {"amoxor.h", AMOXORH, R, op_AMO, 0b0010000001, Zabha, int_int_int},
         {"amomax.b", AMOMAXB, R, op_AMO, 0b1010000000, Zabha, int_int_int},
         {"amomax.h", AMOMAXH, R, op_AMO, 0b1010000001, Zabha, int_int_int},
         {"amomaxu.b", AMOMAXUB, R, op_AMO, 0b1110000000, Zabha, int_int_int},
         {"amomaxu.h", AMOMAXUH, R, op_AMO, 0b1110000001, Zabha, int_int_int},
         {"amomin.b", AMOMINB, R, op_AMO, 0b1000000000, Zabha, int_int_int},
         {"amomin.h", AMOMINH, R, op_AMO, 0b1000000001, Zabha, int_int_int},
         {"amominu.b", AMOMINUB, R, op_AMO, 0b1100000000, Zabha, int_int_int},
         {"amominu.h", AMOMINUH, R, op_AMO, 0b1100000001, Zabha, int_int_int},
         {"amocas.b", AMOCASB, R, op_AMO, 0b0010100000, Zabha_and_Zacas, int_int_int},
         {"amocas.h", AMOCASH, R, op_AMO, 0b0010100001, Zabha_and_Zacas, int_int_int},
         {"amoswap.b.aq", AMOSWAPBAQ, R, op_AMO, 0b0000110000, Zabha, int_int_int},
         {"amoswap.h.aq", AMOSWAPHAQ, R, op_AMO, 0b0000110001, Zabha, int_int_int},
         {"amoadd.b.aq", AMOADDBAQ, R, op_AMO, 0b0000010000, Zabha, int_int_int},
         {"amoadd.h.aq", AMOADDHAQ, R, op_AMO, 0b0000010001, Zabha, int_int_int},
         {"amoand.b.aq", AMOANDBAQ, R, op_AMO, 0b0110010000, Zabha, int_int_int},
         {"amoand.h.aq", AMOANDHAQ, R, op_AMO, 0b0110010001, Zabha, int_int_int},
         {"amoor.b.aq", AMOORBAQ, R, op_AMO, 0b0100010000, Zabha, int_int_int},
         {"amoor.h.aq", AMOORHAQ, R, op_AMO, 0b0100010001, Zabha, int_int_int},
         {"amoxor.b.aq", AMOXORBAQ, R, op_AMO, 0b0010010000, Zabha, int_int_int},
         {"amoxor.h.aq", AMOXORHAQ, R, op_AMO, 0b0010010001, Zabha, int_int_int},
         {"amomax.b.aq", AMOMAXBAQ, R, op_AMO, 0b1010010000, Zabha, int_int_int},
         {"amomax.h.aq", AMOMAXHAQ, R, op_AMO, 0b1010010001, Zabha, int_int_int},
         {"amomaxu.b.aq", AMOMAXUBAQ, R, op_AMO, 0b1110010000, Zabha, int_int_int},
         {"amomaxu.h.aq", AMOMAXUHAQ, R, op_AMO, 0b1110010001, Zabha, int_int_int},
         {"amomin.b.aq", AMOMINBAQ, R, op_AMO, 0b1000010000, Zabha, int_int_int},
         {"amomin.h.aq", AMOMINHAQ, R, op_AMO, 0b1000010001, Zabha, int_int_int},
         {"amominu.b.aq", AMOMINUBAQ, R, op_AMO, 0b1100010000, Zabha, int_int_int},
         {"amominu.h.aq", AMOMINUHAQ, R, op_AMO, 0b1100010001, Zabha, int_int_int},
         {"amocas.b.aq", AMOCASBAQ, R, op_AMO, 0b0010110000, Zabha_and_Zacas, int_int_int},
         {"amocas.h.aq", AMOCASHAQ, R, op_AMO, 0b0010110001, Zabha_and_Zacas, int_int_int},
         {"amoswap.b.rl", AMOSWAPBRL, R, op_AMO, 0b0000101000, Zabha, int_int_int},
         {"amoswap.h.rl", AMOSWAPHRL, R, op_AMO, 0b0000101001, Zabha, int_int_int},
         {"amoadd.b.rl", AMOADDBRL, R, op_AMO, 0b0000001000, Zabha, int_int_int},
         {"amoadd.h.rl", AMOADDHRL, R, op_AMO, 0b0000001001, Zabha, int_int_int},
         {"amoand.b.rl", AMOANDBRL, R, op_AMO, 0b0110001000, Zabha, int_int_int},
         {"amoand.h.rl", AMOANDHRL, R, op_AMO, 0b0110001001, Zabha, int_int_int},
         {"amoor.b.rl", AMOORBRL, R, op_AMO, 0b0100001000, Zabha, int_int_int},
         {"amoor.h.rl", AMOORHRL, R, op_AMO, 0b0100001001, Zabha, int_int_int},
         {"amoxor.b.rl", AMOXORBRL, R, op_AMO, 0b0010001000, Zabha, int_int_int},
         {"amoxor.h.rl", AMOXORHRL, R, op_AMO, 0b0010001001, Zabha, int_int_int},
         {"amomax.b.rl", AMOMAXBRL, R, op_AMO, 0b1010001000, Zabha, int_int_int},
         {"amomax.h.rl", AMOMAXHRL, R, op_AMO, 0b1010001001, Zabha, int_int_int},
         {"amomaxu.b.rl", AMOMAXUBRL, R, op_AMO, 0b1110001000, Zabha, int_int_int},
         {"amomaxu.h.rl", AMOMAXUHRL, R, op_AMO, 0b1110001001, Zabha, int_int_int},
         {"amomin.b.rl", AMOMINBRL, R, op_AMO, 0b1000001000, Zabha, int_int_int},
         {"amomin.h.rl", AMOMINHRL, R, op_AMO, 0b1000001001, Zabha, int_int_int},
         {"amominu.b.rl", AMOMINUBRL, R, op_AMO, 0b1100001000, Zabha, int_int_int},
         {"amominu.h.rl", AMOMINUHRL, R, op_AMO, 0b1100001001, Zabha, int_int_int},
         {"amocas.b.rl", AMOCASBRL, R, op_AMO, 0b0010101000, Zabha_and_Zacas, int_int_int},
         {"amocas.h.rl", AMOCASHRL, R, op_AMO, 0b0010101001, Zabha_and_Zacas, int_int_int},
         {"amoswap.b.aqrl", AMOSWAPBAQRL, R, op_AMO, 0b0000111000, Zabha, int_int_int},
         {"amoswap.h.aqrl", AMOSWAPHAQRL, R, op_AMO, 0b0000111001, Zabha, int_int_int},
         {"amoadd.b.aqrl", AMOADDBAQRL, R, op_AMO, 0b0000011000, Zabha, int_int_int},
         {"amoadd.h.aqrl", AMOADDHAQRL, R, op_AMO, 0b0000011001, Zabha, int_int_int},
         {"amoand.b.aqrl", AMOANDBAQRL, R, op_AMO, 0b0110011000, Zabha, int_int_int},
         {"amoand.h.aqrl", AMOANDHAQRL, R, op_AMO, 0b0110011001, Zabha, int_int_int},
         {"amoor.b.aqrl", AMOORBAQRL, R, op_AMO, 0b0100011000, Zabha, int_int_int},
         {"amoor.h.aqrl", AMOORHAQRL, R, op_AMO, 0b0100011001, Zabha, int_int_int},
         {"amoxor.b.aqrl", AMOXORBAQRL, R, op_AMO, 0b0010011000, Zabha, int_int_int},
         {"amoxor.h.aqrl", AMOXORHAQRL, R, op_AMO, 0b0010011001, Zabha, int_int_int},
         {"amomax.b.aqrl", AMOMAXBAQRL, R, op_AMO, 0b1010011000, Zabha, int_int_int},
         {"amomax.h.aqrl", AMOMAXHAQRL, R, op_AMO, 0b1010011001, Zabha, int_int_int},
         {"amomaxu.b.aqrl", AMOMAXUBAQRL, R, op_AMO, 0b1110011000, Zabha, int_int_int},
         {"amomaxu.h.aqrl", AMOMAXUHAQRL, R, op_AMO, 0b1110011001, Zabha, int_int_int},
         {"amomin.b.aqrl", AMOMINBAQRL, R, op_AMO, 0b1000011000, Zabha, int_int_int},
         {"amomin.h.aqrl", AMOMINHAQRL, R, op_AMO, 0b1000011001, Zabha, int_int_int},
         {"amominu.b.aqrl", AMOMINUBAQRL, R, op_AMO, 0b1100011000, Zabha, int_int_int},
         {"amominu.h.aqrl", AMOMINUHAQRL, R, op_AMO, 0b1100011001, Zabha, int_int_int},
         {"amocas.b.aqrl", AMOCASBAQRL, R, op_AMO, 0b0010111000, Zabha_and_Zacas, int_int_int},
         {"amocas.h.aqrl", AMOCASHAQRL, R, op_AMO, 0b0010111001, Zabha_and_Zacas, int_int_int},
         {"c.lbu", CLBU, CLB, op_C0, 0b100000, Zcb, int_int},
         {"c.lhu", CLHU, CLHfmt, op_C0, 0b1000010, Zcb, int_int},
         {"c.lh", CLH, CLHfmt, op_C0, op_MADD, Zcb, int_int},
         {"c.sb", CSB, CSBfmt, op_C0, 0b100010, Zcb, int_int},
         {"c.sh", CSH, CSHfmt, op_C0, 0b1000110, Zcb, int_int},
         {"c.zext.b", CZEXTB, CU, op_C1, 0b10011111000, Zcb, int_reg},
         {"c.sext.b", CSEXTB, CU, op_C1, 0b10011111001, Zcb, int_reg},
         {"c.zext.h", CZEXTH, CU, op_C1, 0b10011111010, Zcb, int_reg},
         {"c.sext.h", CSEXTH, CU, op_C1, 0b10011111011, Zcb, int_reg},
         {"c.zext.w", CZEXTW, CU, op_C1, 0b10011111100, Zcb, int_reg},
         {"c.not", CNOT, CU, op_C1, 0b10011111101, Zcb, int_reg},
         {"c.mul", CMUL, CA, op_C1, 0b10011110, Zcb, int_int},
         {"cm.push", CMPUSH, CMPP, op_C2, 0b10111000, Zcmp},
         {"cm.pop", CMPOP, CMPP, op_C2, 0b10111010, Zcmp},
         {"cm.popretz", CMPOPRETZ, CMPP, op_C2, 0b10111100, Zcmp},
         {"cm.popret", CMPOPRET, CMPP, op_C2, 0b10111110, Zcmp},
         {"cm.mvsa01", CMMVSA01, CMMV, op_C2, 0b10101101, Zcmp, int_int},
         {"cm.mva01s", CMMVA01S, CMMV, op_C2, 0b10101111, Zcmp, int_int},
         {"cm.jt", CMJT, CMJTfmt, op_C2, 0b101000, Zcmt},
         {"cm.jalt", CMJALT, CMJTfmt, op_C2, 0b101000, Zcmt},
         {"fli.s", FLIS, R, op_FP, 0b1111000000, Zfa, float_reg, {0b00001}},
         {"fli.d", FLID, R, op_FP, 0b1111001000, Zfa_and_D, float_reg, {0b00001}},
         {"fli.q", FLIQ, R, op_FP, 0b1111011000, Zfa_and_Q, float_reg, {0b00001}},
         {"fli.h", FLIH, R, op_FP, 0b1111010000, Zfa_and_Zfh_or_Zvfh, float_reg, {0b00001}},
         {"fminm.s", FMINMS, R, op_FP, 0b0010100010, Zfa, float_float_float},
         {"fmaxm.s", FMAXMS, R, op_FP, 0b0010100011, Zfa, float_float_float},
         {"fminm.d", FMINMD, R, op_FP, 0b0010101010, Zfa_and_D, float_float_float},
         {"fmaxm.d", FMAXMD, R, op_FP, 0b0010101011, Zfa_and_D, float_float_float},
         {"fminm.q", FMINMQ, R, op_FP, 0b0010111010, Zfa_and_Q, float_float_float},
         {"fmaxm.q", FMAXMQ, R, op_FP, 0b0010111011, Zfa_and_Q, float_float_float},
         {"fminm.h", FMINMH, R, op_FP, 0b0010110010, Zfa_and_Zfh_or_Zvfh, float_float_float},
         {"fmaxm.h", FMAXMH, R, op_FP, 0b0010110011, Zfa_and_Zfh_or_Zvfh, float_float_float},
         {"fround.s", FROUNDS, R, op_FP, 0b0100000000, Zfa, float_float, {0b00100, use_frm_for_funct3}},
         {"froundnx.s", FROUNDNXS, R, op_FP, 0b0100000000, Zfa, float_float, {0b00101, use_frm_for_funct3}},
         {"fround.d", FROUNDD, R, op_FP, 0b0100001000, Zfa_and_D, float_float, {0b00100, use_frm_for_funct3}},
         {"froundnx.d", FROUNDNXD, R, op_FP, 0b0100001000, Zfa_and_D, float_float, {0b00101, use_frm_for_funct3}},
         {"fround.h", FROUNDH, R, op_FP, 0b0100010000, Zfa_and_Zfh_or_Zvfh, float_float, {0b00100, use_frm_for_funct3}},
         {"froundnx.h", FROUNDNXH, R, op_FP, 0b0100010000, Zfa_and_Zfh_or_Zvfh, float_float, {0b00101, use_frm_for_funct3}},
         {"fround.q", FROUNDQ, R, op_FP, 0b0100011000, Zfa_and_Q, float_float, {0b00100, use_frm_for_funct3}},
         {"froundnx.q", FROUNDQ, R, op_FP, 0b0100011000, Zfa_and_Q, float_float, {0b00101, use_frm_for_funct3}},
         {"fcvtmod.w.d", FCVTMODWD, R, op_FP, 0b1100001000, Zfa_and_D, int_float, {0b01000, use_frm_for_funct3}}, // This one needs 0b001 for frm (RTZ), and that "rtz" is explicitly
                                                                                                                                    // included in the assembly, like fcvtmod.w.d rd, rs1, rtz
         {"fmvh.x.d", FMVHXD, R, op_FP, 0b1110001000, Zfa_and_D, int_float, {0b00001}},
         {"fmvp.d.x", FMVPDX, R, op_FP, 0b1011001000, Zfa_and_D, float_int_int},
         {"fmvh.x.q", FMVHXQ, R, op_FP, 0b1110011000, Zfa_and_Q, int_float, {0b00001}},
         {"fmvp.q.x", FMVPQX, R, op_FP, 0b1011011000, Zfa_and_Q, float_int_int},
         {"fleq.s", FLEQS, R, op_FP, 0b1010000100, Zfa, int_float_float},
         {"fltq.s", FLTQS, R, op_FP, 0b1010000101, Zfa, int_float_float},
         {"fleq.d", FLEQD, R, op_FP, 0b1010001100, Zfa_and_D, int_float_float},
         {"fltq.d", FLTQD, R, op_FP, 0b1010001101, Zfa_and_D, int_float_float},
         {"fleq.h", FLEQH, R, op_FP, 0b1010010100, Zfa_and_Zfh_or_Zvfh, int_float_float},
         {"fltq.h", FLTQH, R, op_FP, 0b1010010101, Zfa_and_Zfh_or_Zvfh, int_float_float},
         {"fleq.q", FLEQQ, R, op_FP, 0b1010011100, Zfa_and_Q, int_float_float},
         {"fltq.q", FLTQQ, R, op_FP, 0b1010011101, Zfa_and_Q, int_float_float},
         {"mop.r.0", MOPR0, R, op_SYSTEM, 0b1000000100, Zimop, int_int, {0b11100}},
         {"mop.r.1", MOPR1, R, op_SYSTEM, 0b1000000100, Zimop, int_int, {0b11101}},
         {"mop.r.2", MOPR2, R, op_SYSTEM, 0b1000000100, Zimop, int_int, {0b11110}},
         {"mop.r.3", MOPR3, R, op_SYSTEM, 0b1000000100, Zimop, int_int, {0b11111}},
         {"mop.r.4", MOPR4, R, op_SYSTEM, 0b1000010100, Zimop, int_int, {0b11100}},
         {"mop.r.5", MOPR5, R, op_SYSTEM, 0b1000010100, Zimop, int_int, {0b11101}},
         {"mop.r.6", MOPR6, R, op_SYSTEM, 0b1000010100, Zimop, int_int, {0b11110}},
         {"mop.r.7", MOPR7, R, op_SYSTEM, 0b1000010100, Zimop, int_int, {0b11111}},
         {"mop.r.8", MOPR8, R, op_SYSTEM, 0b1000100100, Zimop, int_int, {0b11100}},
         {"mop.r.9", MOPR9, R, op_SYSTEM, 0b1000100100, Zimop, int_int, {0b11101}},
         {"mop.r.10", MOPR10, R, op_SYSTEM, 0b1000100100, Zimop, int_int, {0b11110}},
         {"mop.r.11", MOPR11, R, op_SYSTEM, 0b1000100100, Zimop, int_int, {0b11111}},
         {"mop.r.12", MOPR12, R, op_SYSTEM, 0b1000110100, Zimop, int_int, {0b11100}},
         {"mop.r.13", MOPR13, R, op_SYSTEM, 0b1000110100, Zimop, int_int, {0b11101}},
         {"mop.r.14", MOPR14, R, op_SYSTEM, 0b1000110100, Zimop, int_int, {0b11110}},
         {"mop.r.15", MOPR15, R, op_SYSTEM, 0b1000110100, Zimop, int_int, {0b11111}},
         {"mop.r.16", MOPR16, R, op_SYSTEM, 0b1100000100, Zimop, int_int, {0b11100}},
         {"mop.r.17", MOPR17, R, op_SYSTEM, 0b1100000100, Zimop, int_int, {0b11101}},
         {"mop.r.18", MOPR18, R, op_SYSTEM, 0b1100000100, Zimop, int_int, {0b11110}},
         {"mop.r.19", MOPR19, R, op_SYSTEM, 0b1100000100, Zimop, int_int, {0b11111}},
         {"mop.r.20", MOPR20, R, op_SYSTEM, 0b1100010100, Zimop, int_int, {0b11100}},
         {"mop.r.21", MOPR21, R, op_SYSTEM, 0b1100010100, Zimop, int_int, {0b11101}},
         {"mop.r.22", MOPR22, R, op_SYSTEM, 0b1100010100, Zimop, int_int, {0b11110}},
         {"mop.r.23", MOPR23, R, op_SYSTEM, 0b1100010100, Zimop, int_int, {0b11111}},
         {"mop.r.24", MOPR24, R, op_SYSTEM, 0b1100100100, Zimop, int_int, {0b11100}},
         {"mop.r.25", MOPR25, R, op_SYSTEM, 0b1100100100, Zimop, int_int, {0b11101}},
         {"mop.r.26", MOPR26, R, op_SYSTEM, 0b1100100100, Zimop, int_int, {0b11110}},
         {"mop.r.27", MOPR27, R, op_SYSTEM, 0b1100100100, Zimop, int_int, {0b11111}},
         {"mop.r.28", MOPR28, R, op_SYSTEM, 0b1100110100, Zimop, int_int, {0b11100}},
         {"mop.r.29", MOPR29, R, op_SYSTEM, 0b1100110100, Zimop, int_int, {0b11101}},
         {"mop.r.30", MOPR30, R, op_SYSTEM, 0b1100110100, Zimop, int_int, {0b11110}},
         {"mop.r.31", MOPR31, R, op_SYSTEM, 0b1100110100, Zimop, int_int, {0b11111}},
         {"mop.rr.0", MOPRR0, R, op_SYSTEM, 0b1000001100, Zimop, int_int_int},
         {"mop.rr.1", MOPRR1, R, op_SYSTEM, 0b1000011100, Zimop, int_int_int},
         {"mop.rr.2", MOPRR2, R, op_SYSTEM, 0b1000101100, Zimop, int_int_int},
         {"mop.rr.3", MOPRR3, R, op_SYSTEM, 0b1000111100, Zimop, int_int_int},
         {"mop.rr.4", MOPRR4, R, op_SYSTEM, 0b1100001100, Zimop, int_int_int},
         {"mop.rr.5", MOPRR5, R, op_SYSTEM, 0b1100011100, Zimop, int_int_int},
         {"mop.rr.6", MOPRR6, R, op_SYSTEM, 0b1100101100, Zimop, int_int_int},
         {"mop.rr.7", MOPRR7, R, op_SYSTEM, 0b1100111100, Zimop, int_int_int},
         {"add.uw", ADDUW, R, op_32, 0b0000100000, Zba, int_int_int},
         {"andn", ANDN, R, op_OP, 0b0100000111, Zbb_or_Zbkb, int_int_int},
         {"bclr", BCLR, R, op_OP, 0b0100100001, Zbs, int_int_int},
         {"bclri", BCLRI, R, op_IMM, 0b0100100001, Zbs, int_int_int, {get_imm_for_rs}}, // This one "requires" an extra bit in shamt for RV64, but in reality it's a special case where shamt is big
                                                                                      // enough to clear a 64 bit register, so we just add the extra bit to rs2 and let the extra available space
                                                                                      // handle it transparently
         {"bext", BEXT, R, op_OP, 0b0100100101, Zbs, int_int_int},
         {"bexti", BEXTI, R, op_IMM, 0b0100100101, Zbs, int_int, {get_imm_for_rs}}, // Same idea as bclri
         {"binv", BINV, R, op_OP, 0b0110100001, Zbs, int_int_int},
         {"binvi", BINVI, R, op_IMM, 0b0110100001, Zbs, int_int, {get_imm_for_rs}}, // Same idea as bclri
         {"bset", BSET, R, op_OP, 0b0010100001, Zbs, int_int_int},
         {"bseti", BSETI, R, op_IMM, 0b0010100001, Zbs, int_int, {get_imm_for_rs}}, // Same idea as bclri
         {"clmul", CLMUL, R, op_OP, 0b0000101001, Zbc_or_Zbkc, int_int_int},
         {"clmulh", CLMULH, R, op_OP, 0b0000101011, Zbc_or_Zbkc, int_int_int},
         {"clmulr", CLMULR, R, op_OP, 0b0000101010, Zbc, int_int_int},
         {"clz", CLZ, R, op_IMM, 0b0110000001, Zbb, int_int, {0b00000}},
         {"clzw", CLZW, R, op_IMM_32, 0b0110000001, Zbb, int_int, {0b00000}},
         {"cpop", CPOP, R, op_IMM, 0b0110000001, Zbb, int_int, {0b00010}},
         {"cpopw", CPOPW, R, op_IMM_32, 0b0110000001, Zbb, int_int, {0b00010}},
         {"ctz", CTZ, R, op_IMM, 0b0110000001, Zbb, int_int, {0b00001}},
         {"ctzw", CTZW, R, op_IMM_32, 0b0110000001, Zbb, int_int, {0b00001}},
         {"max", MAX, R, op_OP, 0b0000101110, Zbb, int_int_int},
         {"maxu", MAXU, R, op_OP, 0b0000101111, Zbb, int_int_int},
         {"min", MIN, R, op_OP, 0b0000101100, Zbb, int_int_int},
         {"minu", MINU, R, op_OP, 0b0000101101, Zbb, int_int_int},
         {"orc.b", ORCB, R, op_IMM, 0b0010100101, Zbb, int_int, {0b00111}},
         {"orn", ORN, R, op_OP, 0b0100000110, Zbb_or_Zbkb, int_int_int},
         {"pack", PACK, R, op_OP, 0b0000100100, Zbkb, int_int_int},
         {"packh", PACKH, R, op_OP, 0b0000100111, Zbkb, int_int_int},
         {"packw", PACKW, R, op_32, 0b0000100100, Zbkb, int_int_int},
         {"rev8", REV8, R, op_IMM, 0b0110100101, Zbb_or_Zbkb, int_int, {0b11000}}, // This one is similar to bclri, but it instead makes bit 25 1 on rv64 and otherwise stays the same
         {"rol", ROL, R, op_OP, 0b0110000001, Zbb_or_Zbkb, int_int_int},
         {"rolw", ROLW, R, op_32, 0b0110000001, Zbb_or_Zbkb, int_int_int},
         {"ror", ROR, R, op_OP, 0b0110000101, Zbb_or_Zbkb, int_int_int},
         {"rori", RORI, R, op_IMM, 0b0110000101, Zbb_or_Zbkb, int_int, {get_imm_for_rs}}, // Same idea as bclri
         {"roriw", RORIW, R, op_IMM_32, 0b0110000101, Zbb_or_Zbkb, int_int, {get_imm_for_rs}},
         {"rorw", RORW, R, op_32, 0b0110000101, Zbb_or_Zbkb, int_int_int},
         {"sext.b", SEXTB, R, op_IMM, 0b0110000001, Zbb, int_int, {0b00100}},
         {"sext.h", SEXTH, R, op_IMM, 0b0110000001, Zbb, int_int, {0b00101}},
         {"sh1add", SH1ADD, R, op_OP, 0b0010000010, Zba, int_int_int},
         {"sh1add.uw", SH1ADDUW, R, op_32, 0b0010000010, Zba, int_int_int},
         {"sh2add", SH2ADD, R, op_OP, 0b0010000100, Zba, int_int_int},
         {"sh2add.uw", SH2ADDUW, R, op_32, 0b0010000100, Zba, int_int_int},
         {"sh3add", SH3ADD, R, op_OP, 0b0010000110, Zba, int_int_int},
         {"sh3add.uw", SH3ADDUW, R, op_32, 0b0010000110, Zba, int_int_int},
         {"slli.uw", SLLIUW, R, op_IMM_32, 0b0000100001, Zba, int_int, {get_imm_for_rs}},
         {"unzip", UNZIP, R, op_IMM, 0b0000100101, Zbkb, int_int, {0b11111}},
         {"xnor", XNOR, R, op_OP, 0b0100000100, Zbb_or_Zbkb, int_int_int},
         {"xperm.b", XPERMB, R, op_OP, 0b0010100100, Zbkx, int_int_int},
         {"xperm.n", XPERMN, R, op_OP, 0b0010100010, Zbkx, int_int_int},
         {"zext.h", ZEXTH, R, op_OP, 0b0000100100, Zbb, int_int, {0b00000}}, // Similar to rev8, but we make bit 4 (in the opcode) 1 instead for rv64
         {"zip", ZIP, R, op_IMM, 0b0000100001, Zbkb, int_int, {0b11110}},
         {"vsetvli", VSETVLI, I, op_V, 0b111, V, int_int, {special_handling}},
         {"vsetivli", VSETIVLI, I, op_V, 0b111, V, int_reg, {get_imm_for_rs | special_handling}},
         {"vsetvl", VSETVL, R, op_V, 0b1000000111, V, int_int_int},
         {"vle8.v", VLE8V, VL, op_LOAD_FP, 0b000000100000000, V, vector_int},
         {"vle16.v", VLE16V, VL, op_LOAD_FP, 0b000000100000101, V, vector_int},
         {"vle32.v", VLE32V, VL, op_LOAD_FP, 0b000000100000110, V, vector_int},
         {"vle64.v", VLE64V, VL, op_LOAD_FP, 0b000000100000111, V, vector_int},
         {"vse8.v", VSE8V, VS, op_STORE_FP, 0b000000100000000, V, vector_int},
         {"vse16.v", VSE16V, VS, op_STORE_FP, 0b000000100000101, V, vector_int},
         {"vse32.v", VSE32V, VS, op_STORE_FP, 0b000000100000110, V, vector_int},
         {"vse64.v", VSE64V, VS, op_STORE_FP, 0b000000100000111, V, vector_int},
         {"vlm.v", VLMV, VL, op_LOAD_FP, 0b000000101011000, V, vector_int},
         {"vsm.v", VSMV, VS, op_STORE_FP, 0b000000101011000, V, vector_int},
         {"vlse8.v", VLSE8V, VLS, op_LOAD_FP, 0b0000101000, V, vector_int_int},
         {"vlse16.v", VLSE16V, VLS, op_LOAD_FP, 0b0000101101, V, vector_int_int},
         {"vlse32.v", VLSE32V, VLS, op_LOAD_FP, 0b0000101110, V, vector_int_int},
         {"vlse64.v", VLSE64V, VLS, op_LOAD_FP, 0b0000101111, V, vector_int_int},
         {"vsse8.v", VSSE8V, VSS, op_STORE_FP, 0b0000101000, V, vector_int_int},
         {"vsse16.v", VSSE16V, VSS, op_STORE_FP, 0b0000101101, V, vector_int_int},
         {"vsse32.v", VSSE32V, VSS, op_STORE_FP, 0b0000101110, V, vector_int_int},
         {"vsse64.v", VSSE64V, VSS, op_STORE_FP, 0b0000101111, V, vector_int_int},
         {"vluxei8.v", VLUXEI8V, VLX, op_LOAD_FP, 0b0000011000, V, vector_int_vector},
         {"vluxei16.v", VLUXEI16V, VLX, op_LOAD_FP, 0b0000011101, V, vector_int_vector},
         {"vluxei32.v", VLUXEI32V, VLX, op_LOAD_FP, 0b0000011110, V, vector_int_vector},
         {"vluxei64.v", VLUXEI64V, VLX, op_LOAD_FP, 0b0000011111, V, vector_int_vector},
         {"vloxei8.v", VLOXEI8V, VLX, op_LOAD_FP, 0b0000111000, V, vector_int_vector},
         {"vloxei16.v", VLOXEI16V, VLX, op_LOAD_FP, 0b0000111101, V, vector_int_vector},
         {"vloxei32.v", VLOXEI32V, VLX, op_LOAD_FP, 0b0000111110, V, vector_int_vector},
         {"vloxei64.v", VLOXEI64V, VLX, op_LOAD_FP, 0b0000111111, V, vector_int_vector},
         {"vsuxei8.v", VSUXEI8V, VSX, op_STORE_FP, 0b0000011000, V, vector_int_vector},
         {"vsuxei16.v", VSUXEI16V, VSX, op_STORE_FP, 0b0000011101, V, vector_int_vector},
         {"vsuxei32.v", VSUXEI32V, VSX, op_STORE_FP, 0b0000011110, V, vector_int_vector},
         {"vsuxei64.v", VSUXEI64V, VSX, op_STORE_FP, 0b0000011111, V, vector_int_vector},
         {"vsoxei8.v", VSOXEI8V, VSX, op_STORE_FP, 0b0000111000, V, vector_int_vector},
         {"vsoxei16.v", VSOXEI16V, VSX, op_STORE_FP, 0b0000111101, V, vector_int_vector},
         {"vsoxei32.v", VSOXEI32V, VSX, op_STORE_FP, 0b0000111110, V, vector_int_vector},
         {"vsoxei64.v", VSOXEI64V, VSX, op_STORE_FP, 0b0000111111, V, vector_int_vector},
         {"vle8ff.v", VLE8FFV, VL, op_LOAD_FP, 0b000000110000000, V, vector_int},
         {"vle16ff.v", VLE16FFV, VL, op_LOAD_FP, 0b000000110000101, V, vector_int},
         {"vle32ff.v", VLE32FFV, VL, op_LOAD_FP, 0b000000110000110, V, vector_int},
         {"vle64ff.v", VLE64FFV, VL, op_LOAD_FP, 0b000000110000111, V, vector_int},
         {"vlseg2e8.v", VLSEG2E8V, VL, op_LOAD_FP, 0b001000100000000, V, vector_int},
         {"vsseg2e8.v", VSSEG2E8V, VS, op_STORE_FP, 0b001000100000000, V, vector_int},
         {"vlseg2e16.v", VLSEG2E16V, VL, op_LOAD_FP, 0b001000100000101, V, vector_int},
         {"vsseg2e16.v", VSSEG2E16V, VS, op_STORE_FP, 0b001000100000101, V, vector_int},
         {"vlseg2e32.v", VLSEG2E32V, VL, op_LOAD_FP, 0b001000100000110, V, vector_int},
         {"vsseg2e32.v", VSSEG2E32V, VS, op_STORE_FP, 0b001000100000110, V, vector_int},
         {"vlseg2e64.v", VLSEG2E64V, VL, op_LOAD_FP, 0b001000100000111, V, vector_int},
         {"vsseg2e64.v", VSSEG2E64V, VS, op_STORE_FP, 0b001000100000111, V, vector_int},
         {"vlseg3e8.v", VLSEG3E8V, VL, op_LOAD_FP, 0b010000100000000, V, vector_int},
         {"vsseg3e8.v", VSSEG3E8V, VS, op_STORE_FP, 0b010000100000000, V, vector_int},
         {"vlseg3e16.v", VLSEG3E16V, VL, op_LOAD_FP, 0b010000100000101, V, vector_int},
         {"vsseg3e16.v", VSSEG3E16V, VS, op_STORE_FP, 0b010000100000101, V, vector_int},
         {"vlseg3e32.v", VLSEG3E32V, VL, op_LOAD_FP, 0b010000100000110, V, vector_int},
         {"vsseg3e32.v", VSSEG3E32V, VS, op_STORE_FP, 0b010000100000110, V, vector_int},
         {"vlseg3e64.v", VLSEG3E64V, VL, op_LOAD_FP, 0b010000100000111, V, vector_int},
         {"vsseg3e64.v", VSSEG3E64V, VS, op_STORE_FP, 0b010000100000111, V, vector_int},
         {"vlseg4e8.v", VLSEG4E8V, VL, op_LOAD_FP, 0b011000100000000, V, vector_int},
         {"vsseg4e8.v", VSSEG4E8V, VS, op_STORE_FP, 0b011000100000000, V, vector_int},
         {"vlseg4e16.v", VLSEG4E16V, VL, op_LOAD_FP, 0b011000100000101, V, vector_int},
         {"vsseg4e16.v", VSSEG4E16V, VS, op_STORE_FP, 0b011000100000101, V, vector_int},
         {"vlseg4e32.v", VLSEG4E32V, VL, op_LOAD_FP, 0b011000100000110, V, vector_int},
         {"vsseg4e32.v", VSSEG4E32V, VS, op_STORE_FP, 0b011000100000110, V, vector_int},
         {"vlseg4e64.v", VLSEG4E64V, VL, op_LOAD_FP, 0b011000100000111, V, vector_int},
         {"vsseg4e64.v", VSSEG4E64V, VS, op_STORE_FP, 0b011000100000111, V, vector_int},
         {"vlseg5e8.v", VLSEG5E8V, VL, op_LOAD_FP, 0b100000100000000, V, vector_int},
         {"vsseg5e8.v", VSSEG5E8V, VS, op_STORE_FP, 0b100000100000000, V, vector_int},
         {"vlseg5e16.v", VLSEG5E16V, VL, op_LOAD_FP, 0b100000100000101, V, vector_int},
         {"vsseg5e16.v", VSSEG5E16V, VS, op_STORE_FP, 0b100000100000101, V, vector_int},
         {"vlseg5e32.v", VLSEG5E32V, VL, op_LOAD_FP, 0b100000100000110, V, vector_int},
         {"vsseg5e32.v", VSSEG5E32V, VS, op_STORE_FP, 0b100000100000110, V, vector_int},
         {"vlseg5e64.v", VLSEG5E64V, VL, op_LOAD_FP, 0b100000100000111, V, vector_int},
         {"vsseg5e64.v", VSSEG5E64V, VS, op_STORE_FP, 0b100000100000111, V, vector_int},
         {"vlseg6e8.v", VLSEG6E8V, VL, op_LOAD_FP, 0b101000100000000, V, vector_int},
         {"vsseg6e8.v", VSSEG6E8V, VS, op_STORE_FP, 0b101000100000000, V, vector_int},
         {"vlseg6e16.v", VLSEG6E16V, VL, op_LOAD_FP, 0b101000100000101, V, vector_int},
         {"vsseg6e16.v", VSSEG6E16V, VS, op_STORE_FP, 0b101000100000101, V, vector_int},
         {"vlseg6e32.v", VLSEG6E32V, VL, op_LOAD_FP, 0b101000100000110, V, vector_int},
         {"vsseg6e32.v", VSSEG6E32V, VS, op_STORE_FP, 0b101000100000110, V, vector_int},
         {"vlseg6e64.v", VLSEG6E64V, VL, op_LOAD_FP, 0b101000100000111, V, vector_int},
         {"vsseg6e64.v", VSSEG6E64V, VS, op_STORE_FP, 0b101000100000111, V, vector_int},
         {"vlseg7e8.v", VLSEG7E8V, VL, op_LOAD_FP, 0b110000100000000, V, vector_int},
         {"vsseg7e8.v", VSSEG7E8V, VS, op_STORE_FP, 0b110000100000000, V, vector_int},
         {"vlseg7e16.v", VLSEG7E16V, VL, op_LOAD_FP, 0b110000100000101, V, vector_int},
         {"vsseg7e16.v", VSSEG7E16V, VS, op_STORE_FP, 0b110000100000101, V, vector_int},
         {"vlseg7e32.v", VLSEG7E32V, VL, op_LOAD_FP, 0b110000100000110, V, vector_int},
         {"vsseg7e32.v", VSSEG7E32V, VS, op_STORE_FP, 0b110000100000110, V, vector_int},
         {"vlseg7e64.v", VLSEG7E64V, VL, op_LOAD_FP, 0b110000100000111, V, vector_int},
         {"vsseg7e64.v", VSSEG7E64V, VS, op_STORE_FP, 0b110000100000111, V, vector_int},
         {"vlseg8e8.v", VLSEG8E8V, VL, op_LOAD_FP, 0b111000100000000, V, vector_int},
         {"vsseg8e8.v", VSSEG8E8V, VS, op_STORE_FP, 0b111000100000000, V, vector_int},
         {"vlseg8e16.v", VLSEG8E16V, VL, op_LOAD_FP, 0b111000100000101, V, vector_int},
         {"vsseg8e16.v", VSSEG8E16V, VS, op_STORE_FP, 0b111000100000101, V, vector_int},
         {"vlseg8e32.v", VLSEG8E32V, VL, op_LOAD_FP, 0b111000100000110, V, vector_int},
         {"vsseg8e32.v", VSSEG8E32V, VS, op_STORE_FP, 0b111000100000110, V, vector_int},
         {"vlseg8e64.v", VLSEG8E64V, VL, op_LOAD_FP, 0b111000100000111, V, vector_int},
         {"vsseg8e64.v", VSSEG8E64V, VS, op_STORE_FP, 0b111000100000111, V, vector_int},
         {"vlseg2e8ff.v", VLSEG2E8FFV, VL, op_LOAD_FP, 0b001000110000000, V, vector_int},
         {"vlseg2e16ff.v", VLSEG2E16FFV, VL, op_LOAD_FP, 0b001000110000101, V, vector_int},
         {"vlseg2e32ff.v", VLSEG2E32FFV, VL, op_LOAD_FP, 0b001000110000110, V, vector_int},
         {"vlseg2e64ff.v", VLSEG2E64FFV, VL, op_LOAD_FP, 0b001000110000111, V, vector_int},
         {"vlseg3e8ff.v", VLSEG3E8FFV, VL, op_LOAD_FP, 0b010000110000000, V, vector_int},
         {"vlseg3e16ff.v", VLSEG3E16FFV, VL, op_LOAD_FP, 0b010000110000101, V, vector_int},
         {"vlseg3e32ff.v", VLSEG3E32FFV, VL, op_LOAD_FP, 0b010000110000110, V, vector_int},
         {"vlseg3e64ff.v", VLSEG3E64FFV, VL, op_LOAD_FP, 0b010000110000111, V, vector_int},
         {"vlseg4e8ff.v", VLSEG4E8FFV, VL, op_LOAD_FP, 0b011000110000000, V, vector_int},
         {"vlseg4e16ff.v", VLSEG4E16FFV, VL, op_LOAD_FP, 0b011000110000101, V, vector_int},
         {"vlseg4e32ff.v", VLSEG4E32FFV, VL, op_LOAD_FP, 0b011000110000110, V, vector_int},
         {"vlseg4e64ff.v", VLSEG4E64FFV, VL, op_LOAD_FP, 0b011000110000111, V, vector_int},
         {"vlseg5e8ff.v", VLSEG5E8FFV, VL, op_LOAD_FP, 0b100000110000000, V, vector_int},
         {"vlseg5e16ff.v", VLSEG5E16FFV, VL, op_LOAD_FP, 0b100000110000101, V, vector_int},
         {"vlseg5e32ff.v", VLSEG5E32FFV, VL, op_LOAD_FP, 0b100000110000110, V, vector_int},
         {"vlseg5e64ff.v", VLSEG5E64FFV, VL, op_LOAD_FP, 0b100000110000111, V, vector_int},
         {"vlseg6e8ff.v", VLSEG6E8FFV, VL, op_LOAD_FP, 0b101000110000000, V, vector_int},
         {"vlseg6e16ff.v", VLSEG6E16FFV, VL, op_LOAD_FP, 0b101000110000101, V, vector_int},
         {"vlseg6e32ff.v", VLSEG6E32FFV, VL, op_LOAD_FP, 0b101000110000110, V, vector_int},
         {"vlseg6e64ff.v", VLSEG6E64FFV, VL, op_LOAD_FP, 0b101000110000111, V, vector_int},
         {"vlseg7e8ff.v", VLSEG7E8FFV, VL, op_LOAD_FP, 0b110000110000000, V, vector_int},
         {"vlseg7e16ff.v", VLSEG7E16FFV, VL, op_LOAD_FP, 0b110000110000101, V, vector_int},
         {"vlseg7e32ff.v", VLSEG7E32FFV, VL, op_LOAD_FP, 0b110000110000110, V, vector_int},
         {"vlseg7e64ff.v", VLSEG7E64FFV, VL, op_LOAD_FP, 0b110000110000111, V, vector_int},
         {"vlseg8e8ff.v", VLSEG8E8FFV, VL, op_LOAD_FP, 0b111000110000000, V, vector_int},
         {"vlseg8e16ff.v", VLSEG8E16FFV, VL, op_LOAD_FP, 0b111000110000101, V, vector_int},
         {"vlseg8e32ff.v", VLSEG8E32FFV, VL, op_LOAD_FP, 0b111000110000110, V, vector_int},
         {"vlseg8e64ff.v", VLSEG8E64FFV, VL, op_LOAD_FP, 0b111000110000111, V, vector_int},
         {"vlsseg2e8.v", VLSSEG2E8V, VLS, op_LOAD_FP, 0b0010101000, V, vector_int_int},
         {"vssseg2e8.v", VSSSEG2E8V, VSS, op_STORE_FP, 0b0010101000, V, vector_int_int},
         {"vlsseg2e16.v", VLSSEG2E16V, VLS, op_LOAD_FP, 0b0010101101, V, vector_int_int},
         {"vssseg2e16.v", VSSSEG2E16V, VSS, op_STORE_FP, 0b0010101101, V, vector_int_int},
         {"vlsseg2e32.v", VLSSEG2E32V, VLS, op_LOAD_FP, 0b0010101110, V, vector_int_int},
         {"vssseg2e32.v", VSSSEG2E32V, VSS, op_STORE_FP, 0b0010101110, V, vector_int_int},
         {"vlsseg2e64.v", VLSSEG2E64V, VLS, op_LOAD_FP, 0b0010101111, V, vector_int_int},
         {"vssseg2e64.v", VSSSEG2E64V, VSS, op_STORE_FP, 0b0010101111, V, vector_int_int},
         {"vlsseg3e8.v", VLSSEG3E8V, VLS, op_LOAD_FP, 0b0100101000, V, vector_int_int},
         {"vssseg3e8.v", VSSSEG3E8V, VSS, op_STORE_FP, 0b0100101000, V, vector_int_int},
         {"vlsseg3e16.v", VLSSEG3E16V, VLS, op_LOAD_FP, 0b0100101101, V, vector_int_int},
         {"vssseg3e16.v", VSSSEG3E16V, VSS, op_STORE_FP, 0b0100101101, V, vector_int_int},
         {"vlsseg3e32.v", VLSSEG3E32V, VLS, op_LOAD_FP, 0b0100101110, V, vector_int_int},
         {"vssseg3e32.v", VSSSEG3E32V, VSS, op_STORE_FP, 0b0100101110, V, vector_int_int},
         {"vlsseg3e64.v", VLSSEG3E64V, VLS, op_LOAD_FP, 0b0100101111, V, vector_int_int},
         {"vssseg3e64.v", VSSSEG3E64V, VSS, op_STORE_FP, 0b0100101111, V, vector_int_int},
         {"vlsseg4e8.v", VLSSEG4E8V, VLS, op_LOAD_FP, 0b0110101000, V, vector_int_int},
         {"vssseg4e8.v", VSSSEG4E8V, VSS, op_STORE_FP, 0b0110101000, V, vector_int_int},
         {"vlsseg4e16.v", VLSSEG4E16V, VLS, op_LOAD_FP, 0b0110101101, V, vector_int_int},
         {"vssseg4e16.v", VSSSEG4E16V, VSS, op_STORE_FP, 0b0110101101, V, vector_int_int},
         {"vlsseg4e32.v", VLSSEG4E32V, VLS, op_LOAD_FP, 0b0110101110, V, vector_int_int},
         {"vssseg4e32.v", VSSSEG4E32V, VSS, op_STORE_FP, 0b0110101110, V, vector_int_int},
         {"vlsseg4e64.v", VLSSEG4E64V, VLS, op_LOAD_FP, 0b0110101111, V, vector_int_int},
         {"vssseg4e64.v", VSSSEG4E64V, VSS, op_STORE_FP, 0b0110101111, V, vector_int_int},
         {"vlsseg5e8.v", VLSSEG5E8V, VLS, op_LOAD_FP, 0b1000101000, V, vector_int_int},
         {"vssseg5e8.v", VSSSEG5E8V, VSS, op_STORE_FP, 0b1000101000, V, vector_int_int},
         {"vlsseg5e16.v", VLSSEG5E16V, VLS, op_LOAD_FP, 0b1000101101, V, vector_int_int},
         {"vssseg5e16.v", VSSSEG5E16V, VSS, op_STORE_FP, 0b1000101101, V, vector_int_int},
         {"vlsseg5e32.v", VLSSEG5E32V, VLS, op_LOAD_FP, 0b1000101110, V, vector_int_int},
         {"vssseg5e32.v", VSSSEG5E32V, VSS, op_STORE_FP, 0b1000101110, V, vector_int_int},
         {"vlsseg5e64.v", VLSSEG5E64V, VLS, op_LOAD_FP, 0b1000101111, V, vector_int_int},
         {"vssseg5e64.v", VSSSEG5E64V, VSS, op_STORE_FP, 0b1000101111, V, vector_int_int},
         {"vlsseg6e8.v", VLSSEG6E8V, VLS, op_LOAD_FP, 0b1010101000, V, vector_int_int},
         {"vssseg6e8.v", VSSSEG6E8V, VSS, op_STORE_FP, 0b1010101000, V, vector_int_int},
         {"vlsseg6e16.v", VLSSEG6E16V, VLS, op_LOAD_FP, 0b1010101101, V, vector_int_int},
         {"vssseg6e16.v", VSSSEG6E16V, VSS, op_STORE_FP, 0b1010101101, V, vector_int_int},
         {"vlsseg6e32.v", VLSSEG6E32V, VLS, op_LOAD_FP, 0b1010101110, V, vector_int_int},
         {"vssseg6e32.v", VSSSEG6E32V, VSS, op_STORE_FP, 0b1010101110, V, vector_int_int},
         {"vlsseg6e64.v", VLSSEG6E64V, VLS, op_LOAD_FP, 0b1010101111, V, vector_int_int},
         {"vssseg6e64.v", VSSSEG6E64V, VSS, op_STORE_FP, 0b1010101111, V, vector_int_int},
         {"vlsseg7e8.v", VLSSEG7E8V, VLS, op_LOAD_FP, 0b1100101000, V, vector_int_int},
         {"vssseg7e8.v", VSSSEG7E8V, VSS, op_STORE_FP, 0b1100101000, V, vector_int_int},
         {"vlsseg7e16.v", VLSSEG7E16V, VLS, op_LOAD_FP, 0b1100101101, V, vector_int_int},
         {"vssseg7e16.v", VSSSEG7E16V, VSS, op_STORE_FP, 0b1100101101, V, vector_int_int},
         {"vlsseg7e32.v", VLSSEG7E32V, VLS, op_LOAD_FP, 0b1100101110, V, vector_int_int},
         {"vssseg7e32.v", VSSSEG7E32V, VSS, op_STORE_FP, 0b1100101110, V, vector_int_int},
         {"vlsseg7e64.v", VLSSEG7E64V, VLS, op_LOAD_FP, 0b1100101111, V, vector_int_int},
         {"vssseg7e64.v", VSSSEG7E64V, VSS, op_STORE_FP, 0b1100101111, V, vector_int_int},
         {"vlsseg8e8.v", VLSSEG8E8V, VLS, op_LOAD_FP, 0b1110101000, V, vector_int_int},
         {"vssseg8e8.v", VSSSEG8E8V, VSS, op_STORE_FP, 0b1110101000, V, vector_int_int},
         {"vlsseg8e16.v", VLSSEG8E16V, VLS, op_LOAD_FP, 0b1110101101, V, vector_int_int},
         {"vssseg8e16.v", VSSSEG8E16V, VSS, op_STORE_FP, 0b1110101101, V, vector_int_int},
         {"vlsseg8e32.v", VLSSEG8E32V, VLS, op_LOAD_FP, 0b1110101110, V, vector_int_int},
         {"vssseg8e32.v", VSSSEG8E32V, VSS, op_STORE_FP, 0b1110101110, V, vector_int_int},
         {"vlsseg8e64.v", VLSSEG8E64V, VLS, op_LOAD_FP, 0b1110101111, V, vector_int_int},
         {"vssseg8e64.v", VSSSEG8E64V, VSS, op_STORE_FP, 0b1110101111, V, vector_int_int},
         {"vluxseg2ei8.v", VLUXSEG2EI8V, VLX, op_LOAD_FP, 0b0010011000, V, vector_int_vector},
         {"vloxseg2ei8.v", VLOXSEG2EI8V, VLX, op_LOAD_FP, 0b0010111000, V, vector_int_vector},
         {"vsuxseg2ei8.v", VSUXSEG2EI8V, VSX, op_STORE_FP, 0b0010011000, V, vector_int_vector},
         {"vsoxseg2ei8.v", VSOXSEG2EI8V, VSX, op_STORE_FP, 0b0010111000, V, vector_int_vector},
         {"vluxseg2ei16.v", VLUXSEG2EI16V, VLX, op_LOAD_FP, 0b0010011101, V, vector_int_vector},
         {"vloxseg2ei16.v", VLOXSEG2EI16V, VLX, op_LOAD_FP, 0b0010111101, V, vector_int_vector},
         {"vsuxseg2ei16.v", VSUXSEG2EI16V, VSX, op_STORE_FP, 0b0010011101, V, vector_int_vector},
         {"vsoxseg2ei16.v", VSOXSEG2EI16V, VSX, op_STORE_FP, 0b0010111101, V, vector_int_vector},
         {"vluxseg2ei32.v", VLUXSEG2EI32V, VLX, op_LOAD_FP, 0b0010011110, V, vector_int_vector},
         {"vloxseg2ei32.v", VLOXSEG2EI32V, VLX, op_LOAD_FP, 0b0010111110, V, vector_int_vector},
         {"vsuxseg2ei32.v", VSUXSEG2EI32V, VSX, op_STORE_FP, 0b0010011110, V, vector_int_vector},
         {"vsoxseg2ei32.v", VSOXSEG2EI32V, VSX, op_STORE_FP, 0b0010111110, V, vector_int_vector},
         {"vluxseg2ei64.v", VLUXSEG2EI64V, VLX, op_LOAD_FP, 0b0010011111, V, vector_int_vector},
         {"vloxseg2ei64.v", VLOXSEG2EI64V, VLX, op_LOAD_FP, 0b0010111111, V, vector_int_vector},
         {"vsuxseg2ei64.v", VSUXSEG2EI64V, VSX, op_STORE_FP, 0b0010011111, V, vector_int_vector},
         {"vsoxseg2ei64.v", VSOXSEG2EI64V, VSX, op_STORE_FP, 0b0010111111, V, vector_int_vector},
         {"vluxseg3ei8.v", VLUXSEG3EI8V, VLX, op_LOAD_FP, 0b0100011000, V, vector_int_vector},
         {"vloxseg3ei8.v", VLOXSEG3EI8V, VLX, op_LOAD_FP, 0b0100111000, V, vector_int_vector},
         {"vsuxseg3ei8.v", VSUXSEG3EI8V, VSX, op_STORE_FP, 0b0100011000, V, vector_int_vector},
         {"vsoxseg3ei8.v", VSOXSEG3EI8V, VSX, op_STORE_FP, 0b0100111000, V, vector_int_vector},
         {"vluxseg3ei16.v", VLUXSEG3EI16V, VLX, op_LOAD_FP, 0b0100011101, V, vector_int_vector},
         {"vloxseg3ei16.v", VLOXSEG3EI16V, VLX, op_LOAD_FP, 0b0100111101, V, vector_int_vector},
         {"vsuxseg3ei16.v", VSUXSEG3EI16V, VSX, op_STORE_FP, 0b0100011101, V, vector_int_vector},
         {"vsoxseg3ei16.v", VSOXSEG3EI16V, VSX, op_STORE_FP, 0b0100111101, V, vector_int_vector},
         {"vluxseg3ei32.v", VLUXSEG3EI32V, VLX, op_LOAD_FP, 0b0100011110, V, vector_int_vector},
         {"vloxseg3ei32.v", VLOXSEG3EI32V, VLX, op_LOAD_FP, 0b0100111110, V, vector_int_vector},
         {"vsuxseg3ei32.v", VSUXSEG3EI32V, VSX, op_STORE_FP, 0b0100011110, V, vector_int_vector},
         {"vsoxseg3ei32.v", VSOXSEG3EI32V, VSX, op_STORE_FP, 0b0100111110, V, vector_int_vector},
         {"vluxseg3ei64.v", VLUXSEG3EI64V, VLX, op_LOAD_FP, 0b0100011111, V, vector_int_vector},
         {"vloxseg3ei64.v", VLOXSEG3EI64V, VLX, op_LOAD_FP, 0b0100111111, V, vector_int_vector},
         {"vsuxseg3ei64.v", VSUXSEG3EI64V, VSX, op_STORE_FP, 0b0100011111, V, vector_int_vector},
         {"vsoxseg3ei64.v", VSOXSEG3EI64V, VSX, op_STORE_FP, 0b0100111111, V, vector_int_vector},
         {"vluxseg4ei8.v", VLUXSEG4EI8V, VLX, op_LOAD_FP, 0b0110011000, V, vector_int_vector},
         {"vloxseg4ei8.v", VLOXSEG4EI8V, VLX, op_LOAD_FP, 0b0110111000, V, vector_int_vector},
         {"vsuxseg4ei8.v", VSUXSEG4EI8V, VSX, op_STORE_FP, 0b0110011000, V, vector_int_vector},
         {"vsoxseg4ei8.v", VSOXSEG4EI8V, VSX, op_STORE_FP, 0b0110111000, V, vector_int_vector},
         {"vluxseg4ei16.v", VLUXSEG4EI16V, VLX, op_LOAD_FP, 0b0110011101, V, vector_int_vector},
         {"vloxseg4ei16.v", VLOXSEG4EI16V, VLX, op_LOAD_FP, 0b0110111101, V, vector_int_vector},
         {"vsuxseg4ei16.v", VSUXSEG4EI16V, VSX, op_STORE_FP, 0b0110011101, V, vector_int_vector},
         {"vsoxseg4ei16.v", VSOXSEG4EI16V, VSX, op_STORE_FP, 0b0110111101, V, vector_int_vector},
         {"vluxseg4ei32.v", VLUXSEG4EI32V, VLX, op_LOAD_FP, 0b0110011110, V, vector_int_vector},
         {"vloxseg4ei32.v", VLOXSEG4EI32V, VLX, op_LOAD_FP, 0b0110111110, V, vector_int_vector},
         {"vsuxseg4ei32.v", VSUXSEG4EI32V, VSX, op_STORE_FP, 0b0110011110, V, vector_int_vector},
         {"vsoxseg4ei32.v", VSOXSEG4EI32V, VSX, op_STORE_FP, 0b0110111110, V, vector_int_vector},
         {"vluxseg4ei64.v", VLUXSEG4EI64V, VLX, op_LOAD_FP, 0b0110011111, V, vector_int_vector},
         {"vloxseg4ei64.v", VLOXSEG4EI64V, VLX, op_LOAD_FP, 0b0110111111, V, vector_int_vector},
         {"vsuxseg4ei64.v", VSUXSEG4EI64V, VSX, op_STORE_FP, 0b0110011111, V, vector_int_vector},
         {"vsoxseg4ei64.v", VSOXSEG4EI64V, VSX, op_STORE_FP, 0b0110111111, V, vector_int_vector},
         {"vluxseg5ei8.v", VLUXSEG5EI8V, VLX, op_LOAD_FP, 0b1000011000, V, vector_int_vector},
         {"vloxseg5ei8.v", VLOXSEG5EI8V, VLX, op_LOAD_FP, 0b1000111000, V, vector_int_vector},
         {"vsuxseg5ei8.v", VSUXSEG5EI8V, VSX, op_STORE_FP, 0b1000011000, V, vector_int_vector},
         {"vsoxseg5ei8.v", VSOXSEG5EI8V, VSX, op_STORE_FP, 0b1000111000, V, vector_int_vector},
         {"vluxseg5ei16.v", VLUXSEG5EI16V, VLX, op_LOAD_FP, 0b1000011101, V, vector_int_vector},
         {"vloxseg5ei16.v", VLOXSEG5EI16V, VLX, op_LOAD_FP, 0b1000111101, V, vector_int_vector},
         {"vsuxseg5ei16.v", VSUXSEG5EI16V, VSX, op_STORE_FP, 0b1000011101, V, vector_int_vector},
         {"vsoxseg5ei16.v", VSOXSEG5EI16V, VSX, op_STORE_FP, 0b1000111101, V, vector_int_vector},
         {"vluxseg5ei32.v", VLUXSEG5EI32V, VLX, op_LOAD_FP, 0b1000011110, V, vector_int_vector},
         {"vloxseg5ei32.v", VLOXSEG5EI32V, VLX, op_LOAD_FP, 0b1000111110, V, vector_int_vector},
         {"vsuxseg5ei32.v", VSUXSEG5EI32V, VSX, op_STORE_FP, 0b1000011110, V, vector_int_vector},
         {"vsoxseg5ei32.v", VSOXSEG5EI32V, VSX, op_STORE_FP, 0b1000111110, V, vector_int_vector},
         {"vluxseg5ei64.v", VLUXSEG5EI64V, VLX, op_LOAD_FP, 0b1000011111, V, vector_int_vector},
         {"vloxseg5ei64.v", VLOXSEG5EI64V, VLX, op_LOAD_FP, 0b1000111111, V, vector_int_vector},
         {"vsuxseg5ei64.v", VSUXSEG5EI64V, VSX, op_STORE_FP, 0b1000011111, V, vector_int_vector},
         {"vsoxseg5ei64.v", VSOXSEG5EI64V, VSX, op_STORE_FP, 0b1000111111, V, vector_int_vector},
         {"vluxseg6ei8.v", VLUXSEG6EI8V, VLX, op_LOAD_FP, 0b1010011000, V, vector_int_vector},
         {"vloxseg6ei8.v", VLOXSEG6EI8V, VLX, op_LOAD_FP, 0b1010111000, V, vector_int_vector},
         {"vsuxseg6ei8.v", VSUXSEG6EI8V, VSX, op_STORE_FP, 0b1010011000, V, vector_int_vector},
         {"vsoxseg6ei8.v", VSOXSEG6EI8V, VSX, op_STORE_FP, 0b1010111000, V, vector_int_vector},
         {"vluxseg6ei16.v", VLUXSEG6EI16V, VLX, op_LOAD_FP, 0b1010011101, V, vector_int_vector},
         {"vloxseg6ei16.v", VLOXSEG6EI16V, VLX, op_LOAD_FP, 0b1010111101, V, vector_int_vector},
         {"vsuxseg6ei16.v", VSUXSEG6EI16V, VSX, op_STORE_FP, 0b1010011101, V, vector_int_vector},
         {"vsoxseg6ei16.v", VSOXSEG6EI16V, VSX, op_STORE_FP, 0b1010111101, V, vector_int_vector},
         {"vluxseg6ei32.v", VLUXSEG6EI32V, VLX, op_LOAD_FP, 0b1010011110, V, vector_int_vector},
         {"vloxseg6ei32.v", VLOXSEG6EI32V, VLX, op_LOAD_FP, 0b1010111110, V, vector_int_vector},
         {"vsuxseg6ei32.v", VSUXSEG6EI32V, VSX, op_STORE_FP, 0b1010011110, V, vector_int_vector},
         {"vsoxseg6ei32.v", VSOXSEG6EI32V, VSX, op_STORE_FP, 0b1010111110, V, vector_int_vector},
         {"vluxseg6ei64.v", VLUXSEG6EI64V, VLX, op_LOAD_FP, 0b1010011111, V, vector_int_vector},
         {"vloxseg6ei64.v", VLOXSEG6EI64V, VLX, op_LOAD_FP, 0b1010111111, V, vector_int_vector},
         {"vsuxseg6ei64.v", VSUXSEG6EI64V, VSX, op_STORE_FP, 0b1010011111, V, vector_int_vector},
         {"vsoxseg6ei64.v", VSOXSEG6EI64V, VSX, op_STORE_FP, 0b1010111111, V, vector_int_vector},
         {"vluxseg7ei8.v", VLUXSEG7EI8V, VLX, op_LOAD_FP, 0b1100011000, V, vector_int_vector},
         {"vloxseg7ei8.v", VLOXSEG7EI8V, VLX, op_LOAD_FP, 0b1100111000, V, vector_int_vector},
         {"vsuxseg7ei8.v", VSUXSEG7EI8V, VSX, op_STORE_FP, 0b1100011000, V, vector_int_vector},
         {"vsoxseg7ei8.v", VSOXSEG7EI8V, VSX, op_STORE_FP, 0b1100111000, V, vector_int_vector},
         {"vluxseg7ei16.v", VLUXSEG7EI16V, VLX, op_LOAD_FP, 0b1100011101, V, vector_int_vector},
         {"vloxseg7ei16.v", VLOXSEG7EI16V, VLX, op_LOAD_FP, 0b1100111101, V, vector_int_vector},
         {"vsuxseg7ei16.v", VSUXSEG7EI16V, VSX, op_STORE_FP, 0b1100011101, V, vector_int_vector},
         {"vsoxseg7ei16.v", VSOXSEG7EI16V, VSX, op_STORE_FP, 0b1100111101, V, vector_int_vector},
         {"vluxseg7ei32.v", VLUXSEG7EI32V, VLX, op_LOAD_FP, 0b1100011110, V, vector_int_vector},
         {"vloxseg7ei32.v", VLOXSEG7EI32V, VLX, op_LOAD_FP, 0b1100111110, V, vector_int_vector},
         {"vsuxseg7ei32.v", VSUXSEG7EI32V, VSX, op_STORE_FP, 0b1100011110, V, vector_int_vector},
         {"vsoxseg7ei32.v", VSOXSEG7EI32V, VSX, op_STORE_FP, 0b1100111110, V, vector_int_vector},
         {"vluxseg7ei64.v", VLUXSEG7EI64V, VLX, op_LOAD_FP, 0b1100011111, V, vector_int_vector},
         {"vloxseg7ei64.v", VLOXSEG7EI64V, VLX, op_LOAD_FP, 0b1100111111, V, vector_int_vector},
         {"vsuxseg7ei64.v", VSUXSEG7EI64V, VSX, op_STORE_FP, 0b1100011111, V, vector_int_vector},
         {"vsoxseg7ei64.v", VSOXSEG7EI64V, VSX, op_STORE_FP, 0b1100111111, V, vector_int_vector},
         {"vluxseg8ei8.v", VLUXSEG8EI8V, VLX, op_LOAD_FP, 0b1110011000, V, vector_int_vector},
         {"vloxseg8ei8.v", VLOXSEG8EI8V, VLX, op_LOAD_FP, 0b1110111000, V, vector_int_vector},
         {"vsuxseg8ei8.v", VSUXSEG8EI8V, VSX, op_STORE_FP, 0b1110011000, V, vector_int_vector},
         {"vsoxseg8ei8.v", VSOXSEG8EI8V, VSX, op_STORE_FP, 0b1110111000, V, vector_int_vector},
         {"vluxseg8ei16.v", VLUXSEG8EI16V, VLX, op_LOAD_FP, 0b1110011101, V, vector_int_vector},
         {"vloxseg8ei16.v", VLOXSEG8EI16V, VLX, op_LOAD_FP, 0b1110111101, V, vector_int_vector},
         {"vsuxseg8ei16.v", VSUXSEG8EI16V, VSX, op_STORE_FP, 0b1110011101, V, vector_int_vector},
         {"vsoxseg8ei16.v", VSOXSEG8EI16V, VSX, op_STORE_FP, 0b1110111101, V, vector_int_vector},
         {"vluxseg8ei32.v", VLUXSEG8EI32V, VLX, op_LOAD_FP, 0b1110011110, V, vector_int_vector},
         {"vloxseg8ei32.v", VLOXSEG8EI32V, VLX, op_LOAD_FP, 0b1110111110, V, vector_int_vector},
         {"vsuxseg8ei32.v", VSUXSEG8EI32V, VSX, op_STORE_FP, 0b1110011110, V, vector_int_vector},
         {"vsoxseg8ei32.v", VSOXSEG8EI32V, VSX, op_STORE_FP, 0b1110111110, V, vector_int_vector},
         {"vluxseg8ei64.v", VLUXSEG8EI64V, VLX, op_LOAD_FP, 0b1110011111, V, vector_int_vector},
         {"vloxseg8ei64.v", VLOXSEG8EI64V, VLX, op_LOAD_FP, 0b1110111111, V, vector_int_vector},
         {"vsuxseg8ei64.v", VSUXSEG8EI64V, VSX, op_STORE_FP, 0b1110011111, V, vector_int_vector},
         {"vsoxseg8ei64.v", VSOXSEG8EI64V, VSX, op_STORE_FP, 0b1110111111, V, vector_int_vector},
         {"vl1re8.v", VL1RE8V, VLR, op_LOAD_FP, 0b000000101000000, V, vector_int},
         {"vl1re16.v", VL1RE16V, VLR, op_LOAD_FP, 0b000000101000101, V, vector_int},
         {"vl1re32.v", VL1RE32V, VLR, op_LOAD_FP, 0b000000101000110, V, vector_int},
         {"vl1re64.v", VL1RE64V, VLR, op_LOAD_FP, 0b000000101000111, V, vector_int},
         {"vl2re8.v", VL2RE8V, VLR, op_LOAD_FP, 0b001000101000000, V, vector_int},
         {"vl2re16.v", VL2RE16V, VLR, op_LOAD_FP, 0b001000101000101, V, vector_int},
         {"vl2re32.v", VL2RE32V, VLR, op_LOAD_FP, 0b001000101000110, V, vector_int},
         {"vl2re64.v", VL2RE64V, VLR, op_LOAD_FP, 0b001000101000111, V, vector_int},
         {"vl4re8.v", VL4RE8V, VLR, op_LOAD_FP, 0b011000101000000, V, vector_int},
         {"vl4re16.v", VL4RE16V, VLR, op_LOAD_FP, 0b011000101000101, V, vector_int},
         {"vl4re32.v", VL4RE32V, VLR, op_LOAD_FP, 0b011000101000110, V, vector_int},
         {"vl4re64.v", VL4RE64V, VLR, op_LOAD_FP, 0b011000101000111, V, vector_int},
         {"vl8re8.v", VL8RE8V, VLR, op_LOAD_FP, 0b111000101000000, V, vector_int},
         {"vl8re16.v", VL8RE16V, VLR, op_LOAD_FP, 0b111000101000101, V, vector_int},
         {"vl8re32.v", VL8RE32V, VLR, op_LOAD_FP, 0b111000101000110, V, vector_int},
         {"vl8re64.v", VL8RE64V, VLR, op_LOAD_FP, 0b111000101000111, V, vector_int},
         {"vs1r.v", VS1RV, VSR, op_STORE_FP, 0b000000101000000, V, vector_int},
         {"vs2r.v", VS2RV, VSR, op_STORE_FP, 0b001000101000000, V, vector_int},
         {"vs4r.v", VS4RV, VSR, op_STORE_FP, 0b011000101000000, V, vector_int},
         {"vs8r.v", VS8RV, VSR, op_STORE_FP, 0b111000101000000, V, vector_int},
         {"vadd.vv", VADDVV, IVV, op_V, 0b0000001000, V, vector_vector_vector},
         {"vadd.vx", VADDVX, IVX, op_V, 0b0000001100, V, vector_vector_int},
         {"vadd.vi", VADDVI, IVI, op_V, 0b0000001011, V, vector_vector},
         {"vsub.vv", VSUBVV, IVV, op_V, 0b0000101000, V, vector_vector_vector},
         {"vsub.vx", VSUBVX, IVX, op_V, 0b0000101100, V, vector_vector_int},
         {"vrsub.vx", VRSUBVX, IVX, op_V, 0b0000111100, V, vector_vector_int},
         {"vrsub.vi", VRSUBVI, IVI, op_V, 0b0000111011, V, vector_vector},
         {"vwaddu.vv", VWADDUVV, MVV, op_V, 0b1100001010, V, vector_vector_vector},
         {"vwaddu.vx", VWADDUVX, MVX, op_V, 0b1100001110, V, vector_vector_int},
         {"vwsubu.vv", VWSUBUVV, MVV, op_V, 0b1100101010, V, vector_vector_vector},
         {"vwsubu.vx", VWSUBUVX, MVX, op_V, 0b1100101110, V, vector_vector_int},
         {"vwadd.vv", VWADDVV, MVV, op_V, 0b1100011010, V, vector_vector_vector},
         {"vwadd.vx", VWADDVX, MVX, op_V, 0b1100011110, V, vector_vector_int},
         {"vwsub.vv", VWSUBVV, MVV, op_V, 0b1100111010, V, vector_vector_vector},
         {"vwsub.vx", VWSUBVX, MVX, op_V, 0b1100111110, V, vector_vector_int},
         {"vwaddu.wv", VWADDUWV, MVV, op_V, 0b1101001010, V, vector_vector_vector},
         {"vwaddu.wx", VWADDUWX, MVX, op_V, 0b1101001110, V, vector_vector_int},
         {"vwsubu.wv", VWSUBUWV, MVV, op_V, 0b1101101010, V, vector_vector_vector},
         {"vwsubu.wx", VWSUBUWX, MVX, op_V, 0b1101101110, V, vector_vector_int},
         {"vwadd.wv", VWADDWV, MVV, op_V, 0b1101011010, V, vector_vector_vector},
         {"vwadd.wx", VWADDWX, MVX, op_V, 0b1101011110, V, vector_vector_int},
         {"vwsub.wv", VWSUBWV, MVV, op_V, 0b1101111010, V, vector_vector_vector},
         {"vwsub.wx", VWSUBWX, MVX, op_V, 0b1101111110, V, vector_vector_int},
         {"vzext.vf2", VZEXTVF2, MVV, op_V, 0b0100101010, V, vector_vector, {0b00110}},
         {"vsext.vf2", VSEXTVF2, MVV, op_V, 0b0100101010, V, vector_vector, {0b00111}},
         {"vzext.vf4", VZEXTVF4, MVV, op_V, 0b0100101010, V, vector_vector, {0b00100}},
         {"vsext.vf4", VSEXTVF4, MVV, op_V, 0b0100101010, V, vector_vector, {0b00101}},
         {"vzext.vf8", VZEXTVF8, MVV, op_V, 0b0100101010, V, vector_vector, {0b00010}},
         {"vsext.vf8", VSEXTVF8, MVV, op_V, 0b0100101010, V, vector_vector, {0b00011}},
         {"vadc.vvm", VADCVVM, IVV, op_V, 0b0100000000, V, vector_vector_vector},
         {"vadc.vxm", VADCVXM, IVX, op_V, 0b0100000100, V, vector_vector_int},
         {"vadc.vim", VADCVIM, IVI, op_V, 0b0100000011, V, vector_vector},
         {"vmadc.vvm", VMADCVVM, IVV, op_V, 0b0100010000, V, vector_vector_vector},
         {"vmadc.vxm", VMADCVXM, IVX, op_V, 0b0100010100, V, vector_vector_int},
         {"vmadc.vim", VMADCVIM, IVI, op_V, 0b0100010011, V, vector_vector},
         {"vmadc.vv", VMADCVV, IVV, op_V, 0b0100011000, V, vector_vector_vector},
         {"vmadc.vx", VMADCVX, IVX, op_V, 0b0100011100, V, vector_vector_int},
         {"vmadc.vi", VMADCVI, IVI, op_V, 0b0100011011, V, vector_vector},
         {"vsbc.vvm", VSBCVVM, IVV, op_V, 0b0100100000, V, vector_vector_vector},
         {"vsbc.vxm", VSBCVXM, IVX, op_V, 0b0100100100, V, vector_vector_int},
         {"vmsbc.vvm", VMSBCVVM, IVV, op_V, 0b0100110000, V, vector_vector_vector},
         {"vmsbc.vxm", VMSBCVXM, IVX, op_V, 0b0100110100, V, vector_vector_int},
         {"vmsbc.vv", VMSBCVV, IVV, op_V, 0b0100111000, V, vector_vector_vector},
         {"vmsbc.vx", VMSBCVX, IVX, op_V, 0b0100111100, V, vector_vector_int},
         {"vand.vv", VANDVV, IVV, op_V, 0b0010011000, V, vector_vector_vector},
         {"vand.vx", VANDVX, IVX, op_V, 0b0010011100, V, vector_vector_int},
         {"vand.vi", VANDVI, IVI, op_V, 0b0010011011, V, vector_vector},
         {"vor.vv", VORVV, IVV, op_V, 0b0010101000, V, vector_vector_vector},
         {"vor.vx", VORVX, IVX, op_V, 0b0010101100, V, vector_vector_int},
         {"vor.vi", VORVI, IVI, op_V, 0b0010101011, V, vector_vector},
         {"vxor.vv", VXORVV, IVV, op_V, 0b0010111000, V, vector_vector_vector},
         {"vxor.vx", VXORVX, IVX, op_V, 0b0010111100, V, vector_vector_int},
         {"vxor.vi", VXORVI, IVI, op_V, 0b0010111011, V, vector_vector},
         {"vsll.vv", VSLLVV, IVV, op_V, 0b1001011000, V, vector_vector_vector},
         {"vsll.vx", VSLLVX, IVX, op_V, 0b1001011100, V, vector_vector_int},
         {"vsll.vi", VSLLVI, IVI, op_V, 0b1001011011, V, vector_vector},
         {"vsrl.vv", VSRLVV, IVV, op_V, 0b1010001000, V, vector_vector_vector},
         {"vsrl.vx", VSRLVX, IVX, op_V, 0b1010001100, V, vector_vector_int},
         {"vsrl.vi", VSRLVI, IVI, op_V, 0b1010001011, V, vector_vector},
         {"vsra.vv", VSRAVV, IVV, op_V, 0b1010011000, V, vector_vector_vector},
         {"vsra.vx", VSRAVX, IVX, op_V, 0b1010011100, V, vector_vector_int},
         {"vsra.vi", VSRAVI, IVI, op_V, 0b1010011011, V, vector_vector},
         {"vnsrl.wv", VNSRLWV, IVV, op_V, 0b1011001000, V, vector_vector_vector},
         {"vnsrl.wx", VNSRLWX, IVX, op_V, 0b1011001100, V, vector_vector_int},
         {"vnsrl.wi", VNSRLWI, IVI, op_V, 0b1011001011, V, vector_vector},
         {"vnsra.wv", VNSRAWV, IVV, op_V, 0b1011011000, V, vector_vector_vector},
         {"vnsra.wx", VNSRAWX, IVX, op_V, 0b1011011100, V, vector_vector_int},
         {"vnsra.wi", VNSRAWI, IVI, op_V, 0b1011011011, V, vector_vector},
         {"vmseq.vv", VMSEQVV, IVV, op_V, 0b0110001000, V, vector_vector_vector},
         {"vmseq.vx", VMSEQVX, IVX, op_V, 0b0110001100, V, vector_vector_int},
         {"vmseq.vi", VMSEQVI, IVI, op_V, 0b0110001011, V, vector_vector},
         {"vmsne.vv", VMSNEVV, IVV, op_V, 0b0110011000, V, vector_vector_vector},
         {"vmsne.vx", VMSNEVX, IVX, op_V, 0b0110011100, V, vector_vector_int},
         {"vmsne.vi", VMSNEVI, IVI, op_V, 0b0110011011, V, vector_vector},
         {"vmsltu.vv", VMSLTUVV, IVV, op_V, 0b0110101000, V, vector_vector_vector},
         {"vmsltu.vx", VMSLTUVX, IVX, op_V, 0b0110101100, V, vector_vector_int},
         {"vmslt.vv", VMSLTVV, IVV, op_V, 0b0110111000, V, vector_vector_vector},
         {"vmslt.vx", VMSLTVX, IVX, op_V, 0b0110111100, V, vector_vector_int},
         {"vmsleu.vv", VMSLEUVV, IVV, op_V, 0b0111001000, V, vector_vector_vector},
         {"vmsleu.vx", VMSLEUVX, IVX, op_V, 0b0111001100, V, vector_vector_int},
         {"vmsleu.vi", VMSLEUVI, IVI, op_V, 0b0111001011, V, vector_vector},
         {"vmsle.vv", VMSLEVV, IVV, op_V, 0b0111011000, V, vector_vector_vector},
         {"vmsle.vx", VMSLEVX, IVX, op_V, 0b0111011100, V, vector_vector_int},
         {"vmsle.vi", VMSLEVI, IVI, op_V, 0b0111011011, V, vector_vector},
         {"vmsgtu.vx", VMSGTUVX, IVX, op_V, 0b0111101100, V, vector_vector_int},
         {"vmsgtu.vi", VMSGTUVI, IVI, op_V, 0b0111101011, V, vector_vector},
         {"vmsgt.vx", VMSGTVX, IVX, op_V, 0b0111111100, V, vector_vector_int},
         {"vmsgt.vi", VMSGTVI, IVI, op_V, 0b0111111011, V, vector_vector},
         {"vminu.vv", VMINUVV, IVV, op_V, 0b0001001000, V, vector_vector_vector},
         {"vminu.vx", VMINUVX, IVX, op_V, 0b0001001100, V, vector_vector_int},
         {"vmin.vv", VMINVV, IVV, op_V, 0b0001011000, V, vector_vector_vector},
         {"vmin.vx", VMINVX, IVX, op_V, 0b0001011100, V, vector_vector_int},
         {"vmaxu.vv", VMAXUVV, IVV, op_V, 0b0001101000, V, vector_vector_vector},
         {"vmaxu.vx", VMAXUVX, IVX, op_V, 0b0001101100, V, vector_vector_int},
         {"vmax.vv", VMAXVV, IVV, op_V, 0b0001111000, V, vector_vector_vector},
         {"vmax.vx", VMAXVX, IVX, op_V, 0b0001111100, V, vector_vector_int},
         {"vmul.vv", VMULVV, MVV, op_V, 0b1001011010, V, vector_vector_vector},
         {"vmul.vx", VMULVX, MVX, op_V, 0b1001011110, V, vector_vector_int},
         {"vmulh.vv", VMULHVV, MVV, op_V, 0b1001111010, V, vector_vector_vector},
         {"vmulh.vx", VMULHVX, MVX, op_V, 0b1001111110, V, vector_vector_int},
         {"vmulhu.vv", VMULHUVV, MVV, op_V, 0b1001001010, V, vector_vector_vector},
         {"vmulhu.vx", VMULHUVX, MVX, op_V, 0b1001001110, V, vector_vector_int},
         {"vmulhsu.vv", VMULHSUVV, MVV, op_V, 0b1001101010, V, vector_vector_vector},
         {"vmulhsu.vx", VMULHSUVX, MVX, op_V, 0b1001101110, V, vector_vector_int},
         {"vdivu.vv", VDIVUVV, MVV, op_V, 0b1000001010, V, vector_vector_vector},
         {"vdivu.vx", VDIVUVX, MVX, op_V, 0b1000001110, V, vector_vector_int},
         {"vdiv.vv", VDIVVV, MVV, op_V, 0b1000011010, V, vector_vector_vector},
         {"vdiv.vx", VDIVVX, MVX, op_V, 0b1000011110, V, vector_vector_int},
         {"vremu.vv", VREMUVV, MVV, op_V, 0b1000101010, V, vector_vector_vector},
         {"vremu.vx", VREMUVX, MVX, op_V, 0b1000101110, V, vector_vector_int},
         {"vrem.vv", VREMVV, MVV, op_V, 0b1000111010, V, vector_vector_vector},
         {"vrem.vx", VREMVX, MVX, op_V, 0b1000111110, V, vector_vector_int},
         {"vwmul.vv", VWMULVV, MVV, op_V, 0b1110111010, V, vector_vector_vector},
         {"vwmul.vx", VWMULVX, MVX, op_V, 0b1110111110, V, vector_vector_int},
         {"vwmulu.vv", VWMULUVV, MVV, op_V, 0b1110001010, V, vector_vector_vector},
         {"vwmulu.vx", VWMULUVX, MVX, op_V, 0b1110001110, V, vector_vector_int},
         {"vwmulsu.vv", VWMULSUVV, MVV, op_V, 0b1110101010, V, vector_vector_vector},
         {"vwmulsu.vx", VWMULSUVX, MVX, op_V, 0b1110101110, V, vector_vector_int},
         {"vmacc.vv", VMACCVV, MVV, op_V, 0b1011011010, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vmacc.vx", VMACCVX, MVX, op_V, 0b1011011110, V, vector_int_vector, {swap_rs1_rs2}},
         {"vnmsac.vv", VNMSACVV, MVV, op_V, 0b1011111010, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vnmsac.vx", VNMSACVX, MVX, op_V, 0b1011111110, V, vector_int_vector, {swap_rs1_rs2}},
         {"vmadd.vv", VMADDVV, MVV, op_V, 0b1010011010, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vmadd.vx", VMADDVX, MVX, op_V, 0b1010011110, V, vector_int_vector, {swap_rs1_rs2}},
         {"vnmsub.vv", VNMSUBVV, MVV, op_V, 0b1010111010, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vnmsub.vx", VNMSUBVX, MVX, op_V, 0b1010111110, V, vector_int_vector, {swap_rs1_rs2}},
         {"vwmaccu.vv", VWMACCUVV, MVV, op_V, 0b1111001010, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vwmaccu.vx", VWMACCUVX, MVX, op_V, 0b1111001110, V, vector_int_vector, {swap_rs1_rs2}},
         {"vwmacc.vv", VWMACCVV, MVV, op_V, 0b1111011010, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vwmacc.vx", VWMACCVX, MVX, op_V, 0b1111011110, V, vector_int_vector, {swap_rs1_rs2}},
         {"vwmaccsu.vv", VWMACCSUVV, MVV, op_V, 0b1111111010, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vwmaccsu.vx", VWMACCSUVX, MVX, op_V, 0b1111111110, V, vector_int_vector, {swap_rs1_rs2}},
         {"vwmaccus.vx", VWMACCUSVX, MVX, op_V, 0b1111101110, V, vector_int_vector, {swap_rs1_rs2}},
         {"vmerge.vvm", VMERGEVVM, IVV, op_V, 0b0101110000, V, vector_vector_vector},
         {"vmerge.vxm", VMERGEVXM, IVX, op_V, 0b0101110100, V, vector_vector_int},
         {"vmerge.vim", VMERGEVIM, IVI, op_V, 0b0101110011, V, vector_vector},
         {"vmv.v.v", VMVVV, IVV, op_V, 0b0101111000, V, vector_vector, {0b00000, swap_rs1_rs2}},
         {"vmv.v.x", VMVVX, IVX, op_V, 0b0101111100, V, vector_int, {0b00000, swap_rs1_rs2}},
         {"vmv.v.i", VMVVI, IVI, op_V, 0b0101111011, V, vector_reg, {0b00000}},
         {"vsaddu.vv", VSADDUVV, IVV, op_V, 0b1000001000, V, vector_vector_vector},
         {"vsaddu.vx", VSADDUVX, IVX, op_V, 0b1000001100, V, vector_vector_int},
         {"vsaddu.vi", VSADDUVI, IVI, op_V, 0b1000001011, V, vector_vector},
         {"vsadd.vv", VSADDVV, IVV, op_V, 0b1000011000, V, vector_vector_vector},
         {"vsadd.vx", VSADDVX, IVX, op_V, 0b1000011100, V, vector_vector_int},
         {"vsadd.vi", VSADDVI, IVI, op_V, 0b1000011011, V, vector_vector},
         {"vssubu.vv", VSSUBUVV, IVV, op_V, 0b1000101000, V, vector_vector_vector},
         {"vssubu.vx", VSSUBUVX, IVX, op_V, 0b1000101100, V, vector_vector_int},
         {"vssub.vv", VSSUBVV, IVV, op_V, 0b1000111000, V, vector_vector_vector},
         {"vssub.vx", VSSUBVX, IVX, op_V, 0b1000111100, V, vector_vector_int},
         {"vaaddu.vv", VAADDUVV, MVV, op_V, 0b0010001010, V, vector_vector_vector},
         {"vaaddu.vx", VAADDUVX, MVX, op_V, 0b0010001110, V, vector_vector_int},
         {"vaadd.vv", VAADDVV, MVV, op_V, 0b0010011010, V, vector_vector_vector},
         {"vaadd.vx", VAADDVX, MVX, op_V, 0b0010011110, V, vector_vector_int},
         {"vasubu.vv", VASUBUVV, MVV, op_V, 0b0010101010, V, vector_vector_vector},
         {"vasubu.vx", VASUBUVX, MVX, op_V, 0b0010101110, V, vector_vector_int},
         {"vasub.vv", VASUBVV, MVV, op_V, 0b0010111010, V, vector_vector_vector},
         {"vasub.vx", VASUBVX, MVX, op_V, 0b0010111110, V, vector_vector_int},
         {"vsmul.vv", VSMULVV, IVV, op_V, 0b1001111000, V, vector_vector_vector},
         {"vsmul.vx", VSMULVX, IVX, op_V, 0b1001111100, V, vector_vector_int},
         {"vssrl.vv", VSSRLVV, IVV, op_V, 0b1010101000, V, vector_vector_vector},
         {"vssrl.vx", VSSRLVX, IVX, op_V, 0b1010101100, V, vector_vector_int},
         {"vssrl.vi", VSSRLVI, IVI, op_V, 0b1010101011, V, vector_vector},
         {"vssra.vv", VSSRAVV, IVV, op_V, 0b1010111000, V, vector_vector_vector},
         {"vssra.vx", VSSRAVX, IVX, op_V, 0b1010111100, V, vector_vector_int},
         {"vssra.vi", VSSRAVI, IVI, op_V, 0b1010111011, V, vector_vector},
         {"vnclipu.wv", VNCLIPUWV, IVV, op_V, 0b1011101000, V, vector_vector_vector},
         {"vnclipu.wx", VNCLIPUWX, IVX, op_V, 0b1011101100, V, vector_vector_int},
         {"vnclipu.wi", VNCLIPUWI, IVI, op_V, 0b1011101011, V, vector_vector},
         {"vnclip.wv", VNCLIPWV, IVV, op_V, 0b1011111000, V, vector_vector_vector},
         {"vnclip.wx", VNCLIPWX, IVX, op_V, 0b1011111100, V, vector_vector_int},
         {"vnclip.wi", VNCLIPWI, IVI, op_V, 0b1011111011, V, vector_vector},
         {"vfadd.vv", VFADDVV, FVV, op_V, 0b0000001001, V, vector_vector_vector},
         {"vfadd.vf", VFADDVF, FVF, op_V, 0b0000001101, V, vector_vector_float},
         {"vfsub.vv", VFSUBVV, FVV, op_V, 0b0000101001, V, vector_vector_vector},
         {"vfsub.vf", VFSUBVF, FVF, op_V, 0b0000101101, V, vector_vector_float},
         {"vfrsub.vf", VFRSUBVF, FVF, op_V, 0b1001111101, V, vector_vector_float},
         {"vfwadd.vv", VFWADDVV, FVV, op_V, 0b1100001001, V, vector_vector_vector},
         {"vfwadd.vf", VFWADDVF, FVF, op_V, 0b1100001101, V, vector_vector_float},
         {"vfwsub.vv", VFWSUBVV, FVV, op_V, 0b1100101001, V, vector_vector_vector},
         {"vfwsub.vf", VFWSUBVF, FVF, op_V, 0b1100101101, V, vector_vector_float},
         {"vfwadd.wv", VFWADDWV, FVV, op_V, 0b1101001001, V, vector_vector_vector},
         {"vfwadd.wf", VFWADDWF, FVF, op_V, 0b1101001101, V, vector_vector_float},
         {"vfwsub.wv", VFWSUBWV, FVV, op_V, 0b1101101001, V, vector_vector_vector},
         {"vfwsub.wf", VFWSUBWF, FVF, op_V, 0b1101101101, V, vector_vector_float},
         {"vfmul.vv", VFMULVV, FVV, op_V, 0b1001001001, V, vector_vector_vector},
         {"vfmul.vf", VFMULVF, FVF, op_V, 0b1001001101, V, vector_vector_float},
         {"vfdiv.vv", VFDIVVV, FVV, op_V, 0b1000001001, V, vector_vector_vector},
         {"vfdiv.vf", VFDIVVF, FVF, op_V, 0b1000001101, V, vector_vector_float},
         {"vfrdiv.vf", VFRDIVVF, FVF, op_V, 0b1000011101, V, vector_vector_float},
         {"vfwmul.vv", VFWMULVV, FVV, op_V, 0b1110001001, V, vector_vector_vector},
         {"vfwmul.vf", VFWMULVF, FVF, op_V, 0b1110001101, V, vector_vector_float},
         {"vfmacc.vv", VFMACCVV, FVV, op_V, 0b1011001001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfmacc.vf", VFMACCVF, FVF, op_V, 0b1011001101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfnmacc.vv", VFNMACCVV, FVV, op_V, 0b1011011001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfnmacc.vf", VFNMACCVF, FVF, op_V, 0b1011011101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfmsac.vv", VFMSACVV, FVV, op_V, 0b1011101001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfmsac.vf", VFMSACVF, FVF, op_V, 0b1011101101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfnmsac.vv", VFNMSACVV, FVV, op_V, 0b1011111001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfnmsac.vf", VFNMSACVF, FVF, op_V, 0b1011111101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfmadd.vv", VFMADDVV, FVV, op_V, 0b1010001001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfmadd.vf", VFMADDVF, FVF, op_V, 0b1010001101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfnmadd.vv", VFNMADDVV, FVV, op_V, 0b1010011001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfnmadd.vf", VFNMADDVF, FVF, op_V, 0b1010011101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfmsub.vv", VFMSUBVV, FVV, op_V, 0b1010101001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfmsub.vf", VFMSUBVF, FVF, op_V, 0b1010101101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfnmsub.vv", VFNMSUBVV, FVV, op_V, 0b1010111001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfnmsub.vf", VFNMSUBVF, FVF, op_V, 0b1010111101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfwmacc.vv", VFWMACCVV, FVV, op_V, 0b1111001001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfwmacc.vf", VFWMACCVF, FVF, op_V, 0b1111001101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfwnmacc.vv", VFWNMACCVV, FVV, op_V, 0b1111011001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfwnmacc.vf", VFWNMACCVF, FVF, op_V, 0b1111011101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfwmsac.vv", VFWMSACVV, FVV, op_V, 0b1111101001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfwmsac.vf", VFWMSACVF, FVF, op_V, 0b1111101101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfwnmsac.vv", VFWNMSACVV, FVV, op_V, 0b1111111001, V, vector_vector_vector, {swap_rs1_rs2}},
         {"vfwnmsac.vf", VFWNMSACVF, FVF, op_V, 0b1111111101, V, vector_float_vector, {swap_rs1_rs2}},
         {"vfsqrt.v", VFSQRTV, FVV, op_V, 0b0100111001, V, vector_vector, {0b00000}},
         {"vfrsqrt7.v", VFRSQRT7V, FVV, op_V, 0b0100111001, V, vector_vector, {0b00100}},
         {"vfrec7.v", VFREC7V, FVV, op_V, 0b0100111001, V, vector_vector, {0b00101}},
         {"vfmin.vv", VFMINVV, FVV, op_V, 0b0001001001, V, vector_vector_vector},
         {"vfmin.vf", VFMINVF, FVF, op_V, 0b0001001101, V, vector_vector_float},
         {"vfmax.vv", VFMAXVV, FVV, op_V, 0b0001101001, V, vector_vector_vector},
         {"vfmax.vf", VFMAXVF, FVF, op_V, 0b0001101101, V, vector_vector_float},
         {"vfsgnj.vv", VFSGNJVV, FVV, op_V, 0b0010001001, V, vector_vector_vector},
         {"vfsgnj.vf", VFSGNJVF, FVF, op_V, 0b0010001101, V, vector_vector_float},
         {"vfsgnjn.vv", VFSGNJNVV, FVV, op_V, 0b0010011001, V, vector_vector_vector},
         {"vfsgnjn.vf", VFSGNJNVF, FVF, op_V, 0b0010011101, V, vector_vector_float},
         {"vfsgnjx.vv", VFSGNJXVV, FVV, op_V, 0b0010101001, V, vector_vector_vector},
         {"vfsgnjx.vf", VFSGNJXVF, FVF, op_V, 0b0010101101, V, vector_vector_float},
         {"vmfeq.vv", VMFEQVV, FVV, op_V, 0b0110001001, V, vector_vector_vector},
         {"vmfeq.vf", VMFEQVF, FVF, op_V, 0b0110001101, V, vector_vector_float},
         {"vmfne.vv", VMFNEVV, FVV, op_V, 0b0111001001, V, vector_vector_vector},
         {"vmfne.vf", VMFNEVF, FVF, op_V, 0b0111001101, V, vector_vector_float},
         {"vmflt.vv", VMFLTVV, FVV, op_V, 0b0110111001, V, vector_vector_vector},
         {"vmflt.vf", VMFLTVF, FVF, op_V, 0b0110111101, V, vector_vector_float},
         {"vmfle.vv", VMFLEVV, FVV, op_V, 0b0110011001, V, vector_vector_vector},
         {"vmfle.vf", VMFLEVF, FVF, op_V, 0b0110011101, V, vector_vector_float},
         {"vmfgt.vf", VMFGTVF, FVF, op_V, 0b0111011101, V, vector_vector_float},
         {"vmfge.vf", VMFGEVF, FVF, op_V, 0b0111111101, V, vector_vector_float},
         {"vfclass.v", VFCLASSV, FVV, op_V, 0b0100111001, V, vector_vector, {0b10000}},
         {"vfmerge.vfm", VFMERGEVFM, FVF, op_V, 0b0101110101, V, vector_vector_float},
         {"vfmv.v.f", VFMVVF, FVF, op_V, 0b0101111101, V, vector_float, {0b00000, swap_rs1_rs2}},
         {"vfcvt.xu.f.v", VFCVTXUFV, FVV, op_V, 0b0100101001, V, vector_vector, {0b00000}},
         {"vfcvt.x.f.v", VFCVTXFV, FVV, op_V, 0b0100101001, V, vector_vector, {0b00001}},
         {"vfcvt.rtz.xu.f.v", VFCVTRTZXUFV, FVV, op_V, 0b0100101001, V, vector_vector, {0b00110}},
         {"vfcvt.rtz.x.f.v", VFCVTRTZXFV, FVV, op_V, 0b0100101001, V, vector_vector, {0b00111}},
         {"vfcvt.f.xu.v", VFCVTFXUV, FVV, op_V, 0b0100101001, V, vector_vector, {0b00010}},
         {"vfcvt.f.x.v", VFCVTFXV, FVV, op_V, 0b0100101001, V, vector_vector, {0b00011}},
         {"vfwcvt.xu.f.v", VFWCVTXUFV, FVV, op_V, 0b0100101001, V, vector_vector, {0b01000}},
         {"vfwcvt.x.f.v", VFWCVTXFV, FVV, op_V, 0b0100101001, V, vector_vector, {0b01001}},
         {"vfwcvt.rtz.xu.f.v", VFWCVTRTZXUFV, FVV, op_V, 0b0100101001, V, vector_vector, {0b01110}},
         {"vfwcvt.rtz.x.f.v", VFWCVTRTZXFV, FVV, op_V, 0b0100101001, V, vector_vector, {0b01111}},
         {"vfwcvt.f.xu.v", VFWCVTFXUV, FVV, op_V, 0b0100101001, V, vector_vector, {0b01010}},
         {"vfwcvt.f.x.v", VFWCVTFXV, FVV, op_V, 0b0100101001, V, vector_vector, {0b01011}},
         {"vfwcvt.f.f.v", VFWCVTFFV, FVV, op_V, 0b0100101001, V, vector_vector, {0b01100}},
         {"vfncvt.xu.f.w", VFNCVTXUFW, FVV, op_V, 0b0100101001, V, vector_vector, {0b10000}},
         {"vfncvt.x.f.w", VFNCVTXFW, FVV, op_V, 0b0100101001, V, vector_vector, {0b10001}},
         {"vfncvt.rtz.xu.f.w", VFNCVTRTZXUFW, FVV, op_V, 0b0100101001, V, vector_vector, {0b10110}},
         {"vfncvt.rtz.x.f.w", VFNCVTRTZXFW, FVV, op_V, 0b0100101001, V, vector_vector, {0b10111}},
         {"vfncvt.f.xu.w", VFNCVTFXUW, FVV, op_V, 0b0100101001, V, vector_vector, {0b10010}},
         {"vfncvt.f.x.w", VFNCVTFXW, FVV, op_V, 0b0100101001, V, vector_vector, {0b10011}},
         {"vfncvt.f.f.w", VFNCVTFFW, FVV, op_V, 0b0100101001, V, vector_vector, {0b10100}},
         {"vfncvt.rod.f.f.w", VFNCVTRODFFW, FVV, op_V, 0b0100101001, V, vector_vector, {0b10101}},
         {"vredsum.vs", VREDSUMVS, MVV, op_V, 0b0000001010, V, vector_vector_vector},
         {"vredmaxu.vs", VREDMAXUVS, MVV, op_V, 0b0001101010, V, vector_vector_vector},
         {"vredmax.vs", VREDMAXVS, MVV, op_V, 0b0001111010, V, vector_vector_vector},
         {"vredminu.vs", VREDMINUVS, MVV, op_V, 0b0001001010, V, vector_vector_vector},
         {"vredmin.vs", VREDMINVS, MVV, op_V, 0b0001011010, V, vector_vector_vector},
         {"vredand.vs", VREDANDVS, MVV, op_V, 0b0000011010, V, vector_vector_vector},
         {"vredor.vs", VREDORVS, MVV, op_V, 0b0000101010, V, vector_vector_vector},
         {"vredxor.vs", VREDXORVS, MVV, op_V, 0b0000111010, V, vector_vector_vector},
         {"vwredsumu.vs", VWREDSUMUVS, IVV, op_V, 0b1100001000, V, vector_vector_vector},
         {"vwredsum.vs", VWREDSUMVS, IVV, op_V, 0b1100011000, V, vector_vector_vector},
         {"vfredosum.vs", VFREDOSUMVS, FVV, op_V, 0b0000111001, V, vector_vector_vector},
         {"vfredusum.vs", VFREDUSUMVS, FVV, op_V, 0b0000011001, V, vector_vector_vector},
         {"vfredmax.vs", VFREDMAXVS, FVV, op_V, 0b0001111001, V, vector_vector_vector},
         {"vfredmin.vs", VFREDMINVS, FVV, op_V, 0b0001011001, V, vector_vector_vector},
         {"vfwredosum.vs", VFWREDOSUMVS, FVV, op_V, 0b1100111001, V, vector_vector_vector},
         {"vfwredusum.vs", VFWREDUSUMVS, FVV, op_V, 0b1100011001, V, vector_vector_vector},
         {"vmand.mm", VMANDMM, MVV, op_V, 0b0110011010, V, vector_vector_vector},
         {"vmnand.mm", VMNANDMM, MVV, op_V, 0b0111011010, V, vector_vector_vector},
         {"vmandn.mm", VMANDNMM, MVV, op_V, 0b0110001010, V, vector_vector_vector},
         {"vmxor.mm", VMXORMM, MVV, op_V, 0b0110111010, V, vector_vector_vector},
         {"vmor.mm", VMORMM, MVV, op_V, 0b0110101010, V, vector_vector_vector},
         {"vmnor.mm", VMNORMM, MVV, op_V, 0b0111101010, V, vector_vector_vector},
         {"vmorn.mm", VMORNMM, MVV, op_V, 0b0111001010, V, vector_vector_vector},
         {"vmxnor.mm", VMXNORMM, MVV, op_V, 0b0111111010, V, vector_vector_vector},
         {"vcpop.m", VCPOPM, MVV, op_V, 0b0100001010, V, int_vector, {0b10000}},
         {"vfirst.m", VFIRSTM, MVV, op_V, 0b0100001010, V, int_vector, {0b10001}},
         {"vmsbf.m", VMSBFM, MVV, op_V, 0b0101001010, V, vector_vector, {0b00001}},
         {"vmsif.m", VMSIFM, MVV, op_V, 0b0101001010, V, vector_vector, {0b00011}},
         {"vmsof.m", VMSOFM, MVV, op_V, 0b0101001010, V, vector_vector, {0b00010}},
         {"viota.m", VIOTAM, MVV, op_V, 0b0101001010, V, vector_vector, {0b10000}},
         {"vid.v", VIDV, MVV, op_V, 0b0101001010, V, vector_reg, {0b10001}},
         {"vmv.x.s", VMVXS, MVV, op_V, 0b0100001010, V, int_vector, {0b00000}},
         {"vmv.s.x", VMVSX, MVX, op_V, 0b0100001110, V, vector_int, {0b00000, swap_rs1_rs2}},
         {"vfmv.f.s", VFMVFS, FVV, op_V, 0b0100001001, V, float_vector, {0b00000}},
         {"vfmv.s.f", VFMVSF, FVF, op_V, 0b0100001101, V, vector_float, {0b00000, swap_rs1_rs2}},
         {"vslideup.vx", VSLIDEUPVX, IVX, op_V, 0b0011101100, V, vector_vector_int},
         {"vslideup.vi", VSLIDEUPVI, IVI, op_V, 0b0011101011, V, vector_vector},
         {"vslidedown.vx", VSLIDEDOWNVX, IVX, op_V, 0b0011111100, V, vector_vector_int},
         {"vslidedown.vi", VSLIDEDOWNVI, IVI, op_V, 0b0011111011, V, vector_vector},
         {"vslide1up.vx", VSLIDE1UPVX, MVX, op_V, 0b0011101110, V, vector_vector_int},
         {"vfslide1up.vf", VFSLIDE1UPVF, FVF, op_V, 0b0011101101, V, vector_vector_float},
         {"vslide1down.vx", VSLIDE1DOWNVX, MVX, op_V, 0b0011111110, V, vector_vector_int},
         {"vfslide1down.vf", VFSLIDE1DOWNVF, FVF, op_V, 0b0011111101, V, vector_vector_float},
         {"vrgather.vv", VRGATHERVV, IVV, op_V, 0b0011001000, V, vector_vector_vector},
         {"vrgatherei16.vv", VRGATHEREI16VV, IVV, op_V, 0b0011101000, V, vector_vector_vector},
         {"vrgather.vx", VRGATHERVX, IVX, op_V, 0b0011001100, V, vector_vector_int},
         {"vrgather.vi", VRGATHERVI, IVI, op_V, 0b0011001011, V, vector_vector},
         {"vcompress.vm", VCOMPRESSVM, MVV, op_V, 0b0101111010, V, vector_vector_vector},
         {"vmv1r.v", VMV1RV, IVV, op_V, 0b1001111011, V, vector_vector, {0b00000}}, // Actually IVI, but we just need a custom rs1 value
         {"vmv2r.v", VMV2RV, IVV, op_V, 0b1001111011, V, vector_vector, {0b00001}},
         {"vmv4r.v", VMV4RV, IVV, op_V, 0b1001111011, V, vector_vector, {0b00011}},
         {"vmv8r.v", VMV8RV, IVV, op_V, 0b1001111011, V, vector_vector, {0b00111}},
         {"aes32dsi", AES32DSI, R, op_OP, 0b0010101000, Zknd, int_int_int},
         {"aes32dsmi", AES32DSMI, R, op_OP, 0b0010111000, Zknd, int_int_int},
         {"aes32esi", AES32ESI, R, op_OP, 0b0010001000, Zkne, int_int_int},
         {"aes32esmi", AES32ESMI, R, op_OP, 0b0010011000, Zkne, int_int_int},
         {"aes64ds", AES64DS, R, op_OP, 0b0011101000, Zknd, int_int_int},
         {"aes64dsm", AES64DSM, R, op_OP, 0b0011111000, Zknd, int_int_int},
         {"aes64es", AES64ES, R, op_OP, 0b0011001000, Zkne, int_int_int},
         {"aes64esm", AES64ESM, R, op_OP, 0b0011011000, Zkne, int_int_int},
         {"aes64im", AES64IM, R, op_IMM, 0b0011000001, Zknd, int_int_int, {0b00000}},
         {"aes64ks1i", AES64KS1I, R, op_IMM, 0b0011000001, Zknd_or_Zkne, int_int_int, {0b10000, get_imm_for_rs}},
         {"aes64ks2", AES64KS2, R, op_OP, 0b0111111000, Zknd_or_Zkne, int_int_int},
         {"brev8", BREV8, R, op_IMM, 0b0110100101, Zbkb, int_int, {0b00111}},
         {"sha256sig0", SHA256SIG0, R, op_IMM, 0b0001000001, Zknh, int_int, {0b00010}},
         {"sha256sig1", SHA256SIG1, R, op_IMM, 0b0001000001, Zknh, int_int, {0b00011}},
         {"sha256sum0", SHA256SUM0, R, op_IMM, 0b0001000001, Zknh, int_int, {0b00000}},
         {"sha256sum1", SHA256SUM1, R, op_IMM, 0b0001000001, Zknh, int_int, {0b00001}},
         {"sha512sig0h", SHA512SIG0H, R, op_OP, 0b0101110000, Zknh, int_int_int},
         {"sha512sig0l", SHA512SIG0L, R, op_OP, 0b0101010000, Zknh, int_int_int},
         {"sha512sig1h", SHA512SIG1H, R, op_OP, 0b0101111000, Zknh, int_int_int},
         {"sha512sig1l", SHA512SIG1L, R, op_OP, 0b0101011000, Zknh, int_int_int},
         {"sha512sum0r", SHA512SUM0R, R, op_OP, 0b0101000000, Zknh, int_int_int},
         {"sha512sum1r", SHA512SUM1R, R, op_OP, 0b0101001000, Zknh, int_int_int},
         {"sha512sig0", SHA512SIG0, R, op_IMM, 0b0001000001, Zknh, int_int, {0b00110}},
         {"sha512sig1", SHA512SIG1, R, op_IMM, 0b0001000001, Zknh, int_int, {0b00111}},
         {"sha512sum0", SHA512SUM0, R, op_IMM, 0b0001000001, Zknh, int_int, {0b00100}},
         {"sha512sum1", SHA512SUM1, R, op_IMM, 0b0001000001, Zknh, int_int, {0b00101}},
         {"sm3p0", SM3P0, R, op_IMM, 0b0001000001, Zksh, int_int, {0b01000}},
         {"sm3p1", SM3P1, R, op_IMM, 0b0001000001, Zksh, int_int, {0b01001}},
         {"sm4ed", SM4ED, R, op_OP, 0b0011000000, Zksed, int_int_int},
         {"sm4ks", SM4KS, R, op_OP, 0b0011010000, Zksed, int_int_int},
         {"xperm8", XPERM8, R, op_OP, 0b0010100100, Zbkx, int_int_int},
         {"xperm4", XPERM4, R, op_OP, 0b0010100010, Zbkx, int_int_int},
         {"vaesdf.vv", VAESDFVV, MVV, op_VE, 0b1010001010, Zvkned, vector_vector, {0b00001}},
         {"vaesdf.vs", VAESDFVS, MVV, op_VE, 0b1010011010, Zvkned, vector_vector, {0b00001}},
         {"vaesdm.vv", VAESDMVV, MVV, op_VE, 0b1010001010, Zvkned, vector_vector, {0b00000}},
         {"vaesdm.vs", VAESDMVS, MVV, op_VE, 0b1010011010, Zvkned, vector_vector, {0b00000}},
         {"vaesef.vv", VAESEFVV, MVV, op_VE, 0b1010001010, Zvkned, vector_vector, {0b00011}},
         {"vaesef.vs", VAESEFVS, MVV, op_VE, 0b1010011010, Zvkned, vector_vector, {0b00011}},
         {"vaesem.vv", VAESEMVV, MVV, op_VE, 0b1010001010, Zvkned, vector_vector, {0b00010}},
         {"vaesem.vs", VAESEMVS, MVV, op_VE, 0b1010011010, Zvkned, vector_vector, {0b00010}},
         {"vaeskf1.vi", VAESKF1VI, MVV, op_VE, 0b1000101010, Zvkned, vector_vector, {get_imm_for_rs}},
         {"vaeskf2.vi", VAESKF2VI, MVV, op_VE, 0b1010101010, Zvkned, vector_vector, {get_imm_for_rs}},
         {"vaesz.vs", VAESZVS, MVV, op_VE, 0b1010011010, Zvkned, vector_vector, {0b00111}},
         {"vandn.vv", VANDNVV, IVV, op_V, 0b00000011000, Zvkb, vector_vector_vector},
         {"vandn.vx", VANDNVX, IVX, op_V, 0b0000011100, Zvkb, vector_vector_int},
         {"vbrev.v", VBREVV, MVV, op_V, 0b0100101010, Zvbb, vector_vector, {0b01010}},
         {"vbrev8.v", VBREV8V, MVV, op_V, 0b0100101010, Zvkb, vector_vector, {0b01000}},
         {"vclmul.vv", VCLMULVV, MVV, op_V, 0b0011001010, Zvbc, vector_vector_vector},
         {"vclmul.vx", VCLMULVX, MVX, op_V, 0b0011001110, Zvbc, vector_vector_int},
         {"vclmulh.vv", VCLMULHVV, MVV, op_V, 0b0011011010, Zvbc, vector_vector_vector},
         {"vclmulh.vx", VCLMULHVX, MVX, op_V, 0b0011011110, Zvbc, vector_vector_int},
         {"vclz.v", VCLZV, MVV, op_V, 0b0100101010, Zvbb, vector_vector, {0b01100}},
         {"vctz.v", VCTZV, MVV, op_V, 0b0100101010, Zvbb, vector_vector, {0b01101}},
         {"vghsh.vv", VGHSHVV, MVV, op_VE, 0b1011001010, Zvkg, vector_vector_vector},
         {"vgmul.vv", VGMULVV, MVV, op_VE, 0b1010001010, Zvkg, vector_vector, {0b10001}},
         {"vrev8.v", VREV8V, MVV, op_V, 0b0100101010, Zvkb, vector_vector, {0b01001}},
         {"vrol.vv", VROLVV, IVV, op_V, 0b0101011000, Zvkb, vector_vector_vector},
         {"vrol.vx", VROLVX, IVX, op_V, 0b0101011100, Zvkb, vector_vector_int},
         {"vror.vv", VRORVV, IVV, op_V, 0b0101001000, Zvkb, vector_vector_vector},
         {"vror.vx", VRORVX, IVX, op_V, 0b0101001100, Zvkb, vector_vector_int},
         {"vror.vi", VRORVI, IVI, op_V, 0b0101001011, Zvkb, vector_vector}, // Requires 6th bit of uimm to be in first bit of funct
         {"vsha2ch.vv", VSHA2CHVV, MVV, op_VE, 0b1011101010, Zvknha_or_Zvknhb, vector_vector_vector},
         {"vsha2cl.vv", VSHA2CLVV, MVV, op_VE, 0b1011111010, Zvknha_or_Zvknhb, vector_vector_vector},
         {"vsha2ms.vv", VSHA2MSVV, MVV, op_VE, 0b1011011010, Zvknha_or_Zvknhb, vector_vector_vector},
         {"vsm3c.vi", VSM3CVI, MVV, op_VE, 0b1010111010, Zvksh, vector_vector, {get_imm_for_rs}},
         {"vsm3me.vv", VSM3MEVV, MVV, op_VE, 0b1000001010, Zvksh, vector_vector_vector},
         {"vsm4k.vi", VSM4KVI, MVV, op_VE, 0b1000011010, Zvksed, vector_vector, {get_imm_for_rs}},
         {"vsm4r.vv", VSM4RVV, MVV, op_VE, 0b1010001010, Zvksed, vector_vector, {0b10000}},
         {"vsm4r.vs", VSM4RVS, MVV, op_VE, 0b1010011010, Zvksed, vector_vector, {0b10000}},
         {"vwsll.vv", VWSLLVV, IVV, op_V, 0b1101011000, Zvbb, vector_vector_vector},
         {"vwsll.vx", VWSLLVX, IVX, op_V, 0b1101011100, Zvbb, vector_vector_int},
         {"vwsll.vi", VWSLLVI, IVI, op_V, 0b1101011011, Zvbb, vector_vector},
         {"fcvt.bf16.s", FCVTBF16S, R, op_FP, 0b0100010000, Zfbfmin, float_float, {0b01000, use_frm_for_funct3}},
         {"fcvt.s.bf16", FCVTSBF16, R, op_FP, 0b0100000000, Zfbfmin, float_float, {0b00110, use_frm_for_funct3}},
         {"vfncvtbf16.f.f.w", VFNCVTBF16FFW, FVV, op_V, 0b0100101001, Zvfbfmin, vector_vector, {0b11101}},
         {"vfwcvtbf16.f.f.v", VFWCVTBF16FFV, FVV, op_V, 0b0100101001, Zvfbfmin, vector_vector, {0b01101}},
         {"vfwmaccbf16.vv", VFWMACCBF16VV, FVV, op_V, 0b1110111001, Zvfbfwma, {swap_rs1_rs2}},
         {"vfwmaccbf16.vf", VFWMACCBF16VF, FVF, op_V, 0b1110111101, Zvfbfwma, {swap_rs1_rs2}},
         {"th.dcache.call", THDCACHECALL, I, op_CUSTOM_0, 0b000000000001000, XTheadCmo, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.dcache.ciall", THDCACHECIALL, I, op_CUSTOM_0, 0b000000000011000, XTheadCmo, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.dcache.iall", THDCACHEIALL, I, op_CUSTOM_0, 0b000000000010000, XTheadCmo, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.dcache.cpa", THDCACHECPA, I, op_CUSTOM_0, 0b000000101001000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.cipa", THDCACHECIPA, I, op_CUSTOM_0, 0b000000101011000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.ipa", THDCACHEIPA, I, op_CUSTOM_0, 0b000000101010000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.cva", THDCACHECVA, I, op_CUSTOM_0, 0b000000100101000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.civa", THDCACHECIVA, I, op_CUSTOM_0, 0b000000100111000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.iva", THDCACHEIVA, I, op_CUSTOM_0, 0b000000100110000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.csw", THDCACHECSW, I, op_CUSTOM_0, 0b000000100001000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.cisw", THDCACHECISW, I, op_CUSTOM_0, 0b000000100011000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.isw", THDCACHEISW, I, op_CUSTOM_0, 0b000000100010000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.cpal1", THDCACHECPAL1, I, op_CUSTOM_0, 0b000000101000000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.dcache.cval1", THDCACHECVAL1, I, op_CUSTOM_0, 0b000000100100000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.icache.iall", THICACHEIALL, I, op_CUSTOM_0, 0b000000010000000, XTheadCmo, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.icache.ialls", THICACHEIALLS, I, op_CUSTOM_0, 0b000000010001000, XTheadCmo, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.icache.ipa", THICACHEIPA, I, op_CUSTOM_0, 0b000000111000000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.icache.iva", THICACHEIVA, I, op_CUSTOM_0, 0b000000110000000, XTheadCmo, {0b00000, use_funct_for_imm}},
         {"th.l2cache.call", THL2CACHECALL, I, op_CUSTOM_0, 0b000000010101000, XTheadCmo, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.l2cache.ciall", THL2CACHECIALL, I, op_CUSTOM_0, 0b000000010111000, XTheadCmo, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.l2cache.iall", THL2CACHEIALL, I, op_CUSTOM_0, 0b000000010110000, XTheadCmo, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.sfence.vmas", THSFENCEVMAS, R, op_CUSTOM_0, 0b0000010000, XTheadSync, {0b00000}},
         {"th.sync", THSYNC, I, op_CUSTOM_0, 0b000000011000000, XTheadSync, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.sync.s", THSYNCS, I, op_CUSTOM_0, 0b000000011001000, XTheadSync, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.sync.i", THSYNCI, I, op_CUSTOM_0, 0b000000011010000, XTheadSync, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.sync.is", THSYNCIS, I, op_CUSTOM_0, 0b000000011011000, XTheadSync, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.addsl", THADDSL, R, op_CUSTOM_0, 0b0000000001, XTheadBa},
         {"th.srri", THSRRI, I, op_CUSTOM_0, 0b000100000000001, XTheadBb, {use_funct_for_imm}},
         {"th.srriw", THSRRIW, I, op_CUSTOM_0, 0b000101000000001, XTheadBb, {use_funct_for_imm}},
         {"th.ext", THEXT, I, op_CUSTOM_0, 0b010, XTheadBb, {special_handling}},
         {"th.extu", THEXTU, I, op_CUSTOM_0, 0b011, XTheadBb, {special_handling}},
         {"th.ff0", THFF0, I, op_CUSTOM_0, 0b100001000000001, XTheadBb, {use_funct_for_imm}},
         {"th.ff1", THFF1, I, op_CUSTOM_0, 0b100001100000001, XTheadBb, {use_funct_for_imm}},
         {"th.rev", THREV, I, op_CUSTOM_0, 0b100000100000001, XTheadBb, {use_funct_for_imm}},
         {"th.revw", THREVW, I, op_CUSTOM_0, 0b100100000000001, XTheadBb, {use_funct_for_imm}},
         {"th.tstnbz", THTSTNBZ, I, op_CUSTOM_0, 0b100000000000001, XTheadBb, {use_funct_for_imm}},
         {"th.tst", THTST, I, op_CUSTOM_0, 0b100010000000001, XTheadBs, {use_funct_for_imm}},
         {"th.mveqz", THMVEQZ, R, op_CUSTOM_0, 0b0100000001, XTheadCondMov},
         {"th.mvnez", THMVNEZ, R, op_CUSTOM_0, 0b0100001001, XTheadCondMov},
         {"th.lbia", THLBIA, I, op_CUSTOM_0, 0b000110000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lbib", THLBIB, I, op_CUSTOM_0, 0b000010000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lbuia", THLBUIA, I, op_CUSTOM_0, 0b100110000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lbuib", THLBUIB, I, op_CUSTOM_0, 0b100010000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lhia", THLHIA, I, op_CUSTOM_0, 0b001110000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lhib", THLHIB, I, op_CUSTOM_0, 0b001010000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lhuia", THLHUIA, I, op_CUSTOM_0, 0b101110000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lhuib", THLHUIB, I, op_CUSTOM_0, 0b101010000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lwia", THLWIA, I, op_CUSTOM_0, 0b010110000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lwib", THLWIB, I, op_CUSTOM_0, 0b010010000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lwuia", THLWUIA, I, op_CUSTOM_0, 0b110110000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lwuib", THLWUIB, I, op_CUSTOM_0, 0b110010000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.ldia", THLDIA, I, op_CUSTOM_0, 0b011110000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.ldib", THLDIB, I, op_CUSTOM_0, 0b011010000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.sbia", THSBIA, I, op_CUSTOM_0, 0b000110000000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.sbib", THSBIB, I, op_CUSTOM_0, 0b000010000000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.shia", THSHIA, I, op_CUSTOM_0, 0b001110000000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.shib", THSHIB, I, op_CUSTOM_0, 0b001010000000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.swia", THSWIA, I, op_CUSTOM_0, 0b010110000000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.swib", THSWIB, I, op_CUSTOM_0, 0b010010000000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.sdia", THSDIA, I, op_CUSTOM_0, 0b011110000000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.sdib", THSDIB, I, op_CUSTOM_0, 0b011010000000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lrb", THLRB, R, op_CUSTOM_0, 0b0000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lrbu", THLRBU, R, op_CUSTOM_0, 0b1000000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lrh", THLRH, R, op_CUSTOM_0, 0b0010000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lrhu", THLRHU, R, op_CUSTOM_0, 0b1010000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lrw", THLRW, R, op_CUSTOM_0, 0b0100000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lrwu", THLRWU, R, op_CUSTOM_0, 0b1100000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lrd", THLRD, R, op_CUSTOM_0, 0b0110000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.srb", THSRB, R, op_CUSTOM_0, 0b0000000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.srh", THSRH, R, op_CUSTOM_0, 0b0010000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.srw", THSRW, R, op_CUSTOM_0, 0b0100000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.srd", THSRD, R, op_CUSTOM_0, 0b0110000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lurb", THLURB, R, op_CUSTOM_0, 0b0001000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lurbu", THLURBU, R, op_CUSTOM_0, 0b1001000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lurh", THLURH, R, op_CUSTOM_0, 0b0011000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lurhu", THLURHU, R, op_CUSTOM_0, 0b1011000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lurw", THLURW, R, op_CUSTOM_0, 0b0101000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lurwu", THLURWU, R, op_CUSTOM_0, 0b1101000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.lurd", THLURD, R, op_CUSTOM_0, 0b0111000100, XTheadMemIdx, {use_funct_for_imm}},
         {"th.surb", THSURB, R, op_CUSTOM_0, 0b0001000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.surh", THSURH, R, op_CUSTOM_0, 0b0011000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.surw", THSURW, R, op_CUSTOM_0, 0b0101000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.surd", THSURD, R, op_CUSTOM_0, 0b0111000101, XTheadMemIdx, {use_funct_for_imm}},
         {"th.ldd", THLDD, R, op_CUSTOM_0, 0b1111100100, XTheadMemPair, {swap_rs1_rs2}},
         {"th.lwd", THLWD, R, op_CUSTOM_0, 0b1110000100, XTheadMemPair, {swap_rs1_rs2}},
         {"th.lwud", THLWUD, R, op_CUSTOM_0, 0b1111000100, XTheadMemPair, {swap_rs1_rs2}},
         {"th.sdd", THSDD, R, op_CUSTOM_0, 0b1111100101, XTheadMemPair, {swap_rs1_rs2}},
         {"th.swd", THSWD, R, op_CUSTOM_0, 0b1110000101, XTheadMemPair, {swap_rs1_rs2}},
         {"th.flrd", THFLRD, R, op_CUSTOM_0, 0b0110000110, XTheadFMemIdx},
         {"th.flrw", THFLRW, R, op_CUSTOM_0, 0b0100000110, XTheadFMemIdx},
         {"th.flurd", THFLURD, R, op_CUSTOM_0, 0b0111000110, XTheadFMemIdx},
         {"th.flurw", THFLURW, R, op_CUSTOM_0, 0b0101000110, XTheadFMemIdx},
         {"th.fsrd", THFSRD, R, op_CUSTOM_0, 0b0110000111, XTheadFMemIdx},
         {"th.fsrw", THFSRW, R, op_CUSTOM_0, 0b0100000111, XTheadFMemIdx},
         {"th.fsurd", THFSURD, R, op_CUSTOM_0, 0b0111000111, XTheadFMemIdx},
         {"th.fsurw", THFSURW, R, op_CUSTOM_0, 0b0101000111, XTheadFMemIdx},
         {"th.mula", THMULA, R, op_CUSTOM_0, 0b0010000001, XTheadMac},
         {"th.mulah", THMULAH, R, op_CUSTOM_0, 0b0010100001, XTheadMac},
         {"th.mulaw", THMULAW, R, op_CUSTOM_0, 0b0010010001, XTheadMac},
         {"th.muls", THMULS, R, op_CUSTOM_0, 0b0010001001, XTheadMac},
         {"th.mulsh", THMULSH, R, op_CUSTOM_0, 0b0010101001, XTheadMac},
         {"th.mulsw", THMULSW, R, op_CUSTOM_0, 0b0010011001, XTheadMac},
         {"th.fmv.x.hw", THFMVXHW, I, op_CUSTOM_0, 0b110000000000001, XTheadFmv, {use_funct_for_imm}},
         {"th.fmv.hw.x", THFMVHWX, I, op_CUSTOM_0, 0b101000000000001, XTheadFmv, {use_funct_for_imm}},
         {"th.ipush", THIPUSH, I, op_CUSTOM_0, 0b000000000100000, XTheadInt, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.ipop", THIPOP, I, op_CUSTOM_0, 0b000000000101000, XTheadInt, {0b00000, use_funct_for_imm | no_rs1}},
         {"th.vmaqa.vv", THVMAQAVV, MVV, op_CUSTOM_0, 0b1000001110, XTheadVdot},
         {"th.vmaqa.vx", THVMAQAVX, MVX, op_CUSTOM_0, 0b1000011110, XTheadVdot},
         {"th.vmaqau.vv", THVMAQAUVV, MVV, op_CUSTOM_0, 0b1000101110, XTheadVdot},
         {"th.vmaqau.vx", THVMAQAUVX, MVX, op_CUSTOM_0, 0b1000111110, XTheadVdot},
         {"th.vmaqasu.vv", THVMAQASUVV, MVV, op_CUSTOM_0, 0b1001001110, XTheadVdot},
         {"th.vmaqasu.vx", THVMAQASUVX, MVX, op_CUSTOM_0, 0b1001011110, XTheadVdot},
         {"th.vmaqaus.vx", THVMAQAUSVX, MVX, op_CUSTOM_0, 0b1001111110, XTheadVdot},
         {"th.vsetvli", THVSETVLI, I, op_V, 0b111, XTheadVector, {special_handling}},
         {"th.vsetvl", THVSETVL, R, op_V, 0b1000000111, XTheadVector},
         {"th.vlb.v", THVLBV, VL, op_LOAD_FP, 0b000100100000000, XTheadVector},
         {"th.vlh.v", THVLHV, VL, op_LOAD_FP, 0b000100100000101, XTheadVector},
         {"th.vlw.v", THVLWV, VL, op_LOAD_FP, 0b000100100000110, XTheadVector},
         {"th.vlbu.v", THVLBUV, VL, op_LOAD_FP, 0b000000100000000, XTheadVector},
         {"th.vlhu.v", THVLHUV, VL, op_LOAD_FP, 0b000000100000101, XTheadVector},
         {"th.vlwu.v", THVLWUV, VL, op_LOAD_FP, 0b000000100000110, XTheadVector},
         {"th.vle.v", THVLEV, VL, op_LOAD_FP, 0b000000100000111, XTheadVector},
         {"th.vsb.v", THVSBV, VS, op_STORE_FP, 0b000000100000000, XTheadVector},
         {"th.vsh.v", THVSHV, VS, op_STORE_FP, 0b000000100000101, XTheadVector},
         {"th.vsw.v", THVSWV, VS, op_STORE_FP, 0b000000100000110, XTheadVector},
         {"th.vse.v", THVSEV, VS, op_STORE_FP, 0b000000100000111, XTheadVector},
         {"th.vlsb.v", THVLSBV, VLS, op_LOAD_FP, 0b0001101000, XTheadVector},
         {"th.vlsh.v", THVLSHV, VLS, op_LOAD_FP, 0b0001101101, XTheadVector},
         {"th.vlsw.v", THVLSWV, VLS, op_LOAD_FP, 0b0001101110, XTheadVector},
         {"th.vlsbu.v", THVLSBUV, VLS, op_LOAD_FP, 0b0000101000, XTheadVector},
         {"th.vlshu.v", THVLSHUV, VLS, op_LOAD_FP, 0b0000101101, XTheadVector},
         {"th.vlswu.v", THVLSWUV, VLS, op_LOAD_FP, 0b0000101110, XTheadVector},
         {"th.vlse.v", THVLSEV, VLS, op_LOAD_FP, 0b0000101111, XTheadVector},
         {"th.vssb.v", THVSSBV, VSS, op_STORE_FP, 0b0000101000, XTheadVector},
         {"th.vssh.v", THVSSHV, VSS, op_STORE_FP, 0b0000101101, XTheadVector},
         {"th.vssw.v", THVSSWV, VSS, op_STORE_FP, 0b0000101110, XTheadVector},
         {"th.vsse.v", THVSSEV, VSS, op_STORE_FP, 0b0000101111, XTheadVector},
         {"th.vlxb.v", THVLXBV, VLX, op_LOAD_FP, 0b0001111000, XTheadVector},
         {"th.vlxh.v", THVLXHV, VLX, op_LOAD_FP, 0b0001111101, XTheadVector},
         {"th.vlxw.v", THVLXWV, VLX, op_LOAD_FP, 0b0001111110, XTheadVector},
         {"th.vlxbu.v", THVLXBUV, VLX, op_LOAD_FP, 0b0000111000, XTheadVector},
         {"th.vlxhu.v", THVLXHUV, VLX, op_LOAD_FP, 0b0000111101, XTheadVector},
         {"th.vlxwu.v", THVLXWUV, VLX, op_LOAD_FP, 0b0000111110, XTheadVector},
         {"th.vlxe.v", THVLXEV, VLX, op_LOAD_FP, 0b0000111111, XTheadVector},
         {"th.vsxb.v", THVSXBV, VSX, op_STORE_FP, 0b0000111000, XTheadVector},
         {"th.vsxh.v", THVSXHV, VSX, op_STORE_FP, 0b0000111101, XTheadVector},
         {"th.vsxw.v", THVSXWV, VSX, op_STORE_FP, 0b0000111110, XTheadVector},
         {"th.vsxe.v", THVSXEV, VSX, op_STORE_FP, 0b0000111111, XTheadVector},
         {"th.vsuxb.v", THVSUXBV, VSX, op_STORE_FP, 0b0001111000, XTheadVector},
         {"th.vsuxh.v", THVSUXHV, VSX, op_STORE_FP, 0b0001111101, XTheadVector},
         {"th.vsuxw.v", THVSUXWV, VSX, op_STORE_FP, 0b0001111110, XTheadVector},
         {"th.vsuxe.v", THVSUXEV, VSX, op_STORE_FP, 0b0001111111, XTheadVector},
         {"th.vlbff.v", THVLBFFV, VL, op_LOAD_FP, 0b000100110000000, XTheadVector},
         {"th.vlhff.v", THVLHFFV, VL, op_LOAD_FP, 0b000100110000101, XTheadVector},
         {"th.vlwff.v", THVLWFFV, VL, op_LOAD_FP, 0b000100110000110, XTheadVector},
         {"th.vlbuff.v", THVLBUFFV, VL, op_LOAD_FP, 0b000000110000000, XTheadVector},
         {"th.vlhuff.v", THVLHUFFV, VL, op_LOAD_FP, 0b000000110000101, XTheadVector},
         {"th.vlwuff.v", THVLWUFFV, VL, op_LOAD_FP, 0b000000110000110, XTheadVector},
         {"th.vleff.v", THVLEFFV, VL, op_LOAD_FP, 0b000000110000111, XTheadVector},
         {"th.vlseg2b.v", THVLSEG2BV, VL, op_LOAD_FP, 0b001100100000000, XTheadVector},
         {"th.vlseg2h.v", THVLSEG2HV, VL, op_LOAD_FP, 0b001100100000101, XTheadVector},
         {"th.vlseg2w.v", THVLSEG2WV, VL, op_LOAD_FP, 0b001100100000110, XTheadVector},
         {"th.vlseg3b.v", THVLSEG3BV, VL, op_LOAD_FP, 0b010100100000000, XTheadVector},
         {"th.vlseg3h.v", THVLSEG3HV, VL, op_LOAD_FP, 0b010100100000101, XTheadVector},
         {"th.vlseg3w.v", THVLSEG3WV, VL, op_LOAD_FP, 0b010100100000110, XTheadVector},
         {"th.vlseg4b.v", THVLSEG4BV, VL, op_LOAD_FP, 0b011100100000000, XTheadVector},
         {"th.vlseg4h.v", THVLSEG4HV, VL, op_LOAD_FP, 0b011100100000101, XTheadVector},
         {"th.vlseg4w.v", THVLSEG4WV, VL, op_LOAD_FP, 0b011100100000110, XTheadVector},
         {"th.vlseg5b.v", THVLSEG5BV, VL, op_LOAD_FP, 0b100100100000000, XTheadVector},
         {"th.vlseg5h.v", THVLSEG5HV, VL, op_LOAD_FP, 0b100100100000101, XTheadVector},
         {"th.vlseg5w.v", THVLSEG5WV, VL, op_LOAD_FP, 0b100100100000110, XTheadVector},
         {"th.vlseg6b.v", THVLSEG6BV, VL, op_LOAD_FP, 0b101100100000000, XTheadVector},
         {"th.vlseg6h.v", THVLSEG6HV, VL, op_LOAD_FP, 0b101100100000101, XTheadVector},
         {"th.vlseg6w.v", THVLSEG6WV, VL, op_LOAD_FP, 0b101100100000110, XTheadVector},
         {"th.vlseg7b.v", THVLSEG7BV, VL, op_LOAD_FP, 0b110100100000000, XTheadVector},
         {"th.vlseg7h.v", THVLSEG7HV, VL, op_LOAD_FP, 0b110100100000101, XTheadVector},
         {"th.vlseg7w.v", THVLSEG7WV, VL, op_LOAD_FP, 0b110100100000110, XTheadVector},
         {"th.vlseg8b.v", THVLSEG8BV, VL, op_LOAD_FP, 0b111100100000000, XTheadVector},
         {"th.vlseg8h.v", THVLSEG8HV, VL, op_LOAD_FP, 0b111100100000101, XTheadVector},
         {"th.vlseg8w.v", THVLSEG8WV, VL, op_LOAD_FP, 0b111100100000110, XTheadVector},
         {"th.vlseg2e.v", THVLSEG2EV, VL, op_LOAD_FP, 0b001000100000111, XTheadVector},
         {"th.vlseg3e.v", THVLSEG3EV, VL, op_LOAD_FP, 0b010000100000111, XTheadVector},
         {"th.vlseg4e.v", THVLSEG4EV, VL, op_LOAD_FP, 0b011000100000111, XTheadVector},
         {"th.vlseg5e.v", THVLSEG5EV, VL, op_LOAD_FP, 0b100000100000111, XTheadVector},
         {"th.vlseg6e.v", THVLSEG6EV, VL, op_LOAD_FP, 0b101000100000111, XTheadVector},
         {"th.vlseg7e.v", THVLSEG7EV, VL, op_LOAD_FP, 0b110000100000111, XTheadVector},
         {"th.vlseg8e.v", THVLSEG8EV, VL, op_LOAD_FP, 0b111000100000111, XTheadVector},
         {"th.vlseg2bu.v", THVLSEG2BUV, VL, op_LOAD_FP, 0b001000100000000, XTheadVector},
         {"th.vlseg2hu.v", THVLSEG2HUV, VL, op_LOAD_FP, 0b001000100000101, XTheadVector},
         {"th.vlseg2wu.v", THVLSEG2WUV, VL, op_LOAD_FP, 0b001000100000110, XTheadVector},
         {"th.vlseg3bu.v", THVLSEG3BUV, VL, op_LOAD_FP, 0b010000100000000, XTheadVector},
         {"th.vlseg3hu.v", THVLSEG3HUV, VL, op_LOAD_FP, 0b010000100000101, XTheadVector},
         {"th.vlseg3wu.v", THVLSEG3WUV, VL, op_LOAD_FP, 0b010000100000110, XTheadVector},
         {"th.vlseg4bu.v", THVLSEG4BUV, VL, op_LOAD_FP, 0b011000100000000, XTheadVector},
         {"th.vlseg4hu.v", THVLSEG4HUV, VL, op_LOAD_FP, 0b011000100000101, XTheadVector},
         {"th.vlseg4wu.v", THVLSEG4WUV, VL, op_LOAD_FP, 0b011000100000110, XTheadVector},
         {"th.vlseg5bu.v", THVLSEG5BUV, VL, op_LOAD_FP, 0b100000100000000, XTheadVector},
         {"th.vlseg5hu.v", THVLSEG5HUV, VL, op_LOAD_FP, 0b100000100000101, XTheadVector},
         {"th.vlseg5wu.v", THVLSEG5WUV, VL, op_LOAD_FP, 0b100000100000110, XTheadVector},
         {"th.vlseg6bu.v", THVLSEG6BUV, VL, op_LOAD_FP, 0b101000100000000, XTheadVector},
         {"th.vlseg6hu.v", THVLSEG6HUV, VL, op_LOAD_FP, 0b101000100000101, XTheadVector},
         {"th.vlseg6wu.v", THVLSEG6WUV, VL, op_LOAD_FP, 0b101000100000110, XTheadVector},
         {"th.vlseg7bu.v", THVLSEG7BUV, VL, op_LOAD_FP, 0b110000100000000, XTheadVector},
         {"th.vlseg7hu.v", THVLSEG7HUV, VL, op_LOAD_FP, 0b110000100000101, XTheadVector},
         {"th.vlseg7wu.v", THVLSEG7WUV, VL, op_LOAD_FP, 0b110000100000110, XTheadVector},
         {"th.vlseg8bu.v", THVLSEG8BUV, VL, op_LOAD_FP, 0b111000100000000, XTheadVector},
         {"th.vlseg8hu.v", THVLSEG8HUV, VL, op_LOAD_FP, 0b111000100000101, XTheadVector},
         {"th.vlseg8wu.v", THVLSEG8WUV, VL, op_LOAD_FP, 0b111000100000110, XTheadVector},
         {"th.vsseg2b.v", THVSSEG2BV, VS, op_STORE_FP, 0b001000100000000, XTheadVector},
         {"th.vsseg2h.v", THVSSEG2HV, VS, op_STORE_FP, 0b001000100000101, XTheadVector},
         {"th.vsseg2w.v", THVSSEG2WV, VS, op_STORE_FP, 0b001000100000110, XTheadVector},
         {"th.vsseg2e.v", THVSSEG2EV, VS, op_STORE_FP, 0b001000100000111, XTheadVector},
         {"th.vsseg3b.v", THVSSEG3BV, VS, op_STORE_FP, 0b010000100000000, XTheadVector},
         {"th.vsseg3h.v", THVSSEG3HV, VS, op_STORE_FP, 0b010000100000101, XTheadVector},
         {"th.vsseg3w.v", THVSSEG3WV, VS, op_STORE_FP, 0b010000100000110, XTheadVector},
         {"th.vsseg3e.v", THVSSEG3EV, VS, op_STORE_FP, 0b010000100000111, XTheadVector},
         {"th.vsseg4b.v", THVSSEG4BV, VS, op_STORE_FP, 0b011000100000000, XTheadVector},
         {"th.vsseg4h.v", THVSSEG4HV, VS, op_STORE_FP, 0b011000100000101, XTheadVector},
         {"th.vsseg4w.v", THVSSEG4WV, VS, op_STORE_FP, 0b011000100000110, XTheadVector},
         {"th.vsseg4e.v", THVSSEG4EV, VS, op_STORE_FP, 0b011000100000111, XTheadVector},
         {"th.vsseg5b.v", THVSSEG5BV, VS, op_STORE_FP, 0b100000100000000, XTheadVector},
         {"th.vsseg5h.v", THVSSEG5HV, VS, op_STORE_FP, 0b100000100000101, XTheadVector},
         {"th.vsseg5w.v", THVSSEG5WV, VS, op_STORE_FP, 0b100000100000110, XTheadVector},
         {"th.vsseg5e.v", THVSSEG5EV, VS, op_STORE_FP, 0b100000100000111, XTheadVector},
         {"th.vsseg6b.v", THVSSEG6BV, VS, op_STORE_FP, 0b101000100000000, XTheadVector},
         {"th.vsseg6h.v", THVSSEG6HV, VS, op_STORE_FP, 0b101000100000101, XTheadVector},
         {"th.vsseg6w.v", THVSSEG6WV, VS, op_STORE_FP, 0b101000100000110, XTheadVector},
         {"th.vsseg6e.v", THVSSEG6EV, VS, op_STORE_FP, 0b101000100000111, XTheadVector},
         {"th.vsseg7b.v", THVSSEG7BV, VS, op_STORE_FP, 0b110000100000000, XTheadVector},
         {"th.vsseg7h.v", THVSSEG7HV, VS, op_STORE_FP, 0b110000100000101, XTheadVector},
         {"th.vsseg7w.v", THVSSEG7WV, VS, op_STORE_FP, 0b110000100000110, XTheadVector},
         {"th.vsseg7e.v", THVSSEG7EV, VS, op_STORE_FP, 0b110000100000111, XTheadVector},
         {"th.vsseg8b.v", THVSSEG8BV, VS, op_STORE_FP, 0b111000100000000, XTheadVector},
         {"th.vsseg8h.v", THVSSEG8HV, VS, op_STORE_FP, 0b111000100000101, XTheadVector},
         {"th.vsseg8w.v", THVSSEG8WV, VS, op_STORE_FP, 0b111000100000110, XTheadVector},
         {"th.vsseg8e.v", THVSSEG8EV, VS, op_STORE_FP, 0b111000100000111, XTheadVector},
         {"th.vlseg2bff.v", THVLSEG2BFFV, VL, op_LOAD_FP, 0b001100110000000, XTheadVector},
         {"th.vlseg2hff.v", THVLSEG2HFFV, VL, op_LOAD_FP, 0b001100110000101, XTheadVector},
         {"th.vlseg2wff.v", THVLSEG2WFFV, VL, op_LOAD_FP, 0b001100110000110, XTheadVector},
         {"th.vlseg3bff.v", THVLSEG3BFFV, VL, op_LOAD_FP, 0b010100110000000, XTheadVector},
         {"th.vlseg3hff.v", THVLSEG3HFFV, VL, op_LOAD_FP, 0b010100110000101, XTheadVector},
         {"th.vlseg3wff.v", THVLSEG3WFFV, VL, op_LOAD_FP, 0b010100110000110, XTheadVector},
         {"th.vlseg4bff.v", THVLSEG4BFFV, VL, op_LOAD_FP, 0b011100110000000, XTheadVector},
         {"th.vlseg4hff.v", THVLSEG4HFFV, VL, op_LOAD_FP, 0b011100110000101, XTheadVector},
         {"th.vlseg4wff.v", THVLSEG4WFFV, VL, op_LOAD_FP, 0b011100110000110, XTheadVector},
         {"th.vlseg5bff.v", THVLSEG5BFFV, VL, op_LOAD_FP, 0b100100110000000, XTheadVector},
         {"th.vlseg5hff.v", THVLSEG5HFFV, VL, op_LOAD_FP, 0b100100110000101, XTheadVector},
         {"th.vlseg5wff.v", THVLSEG5WFFV, VL, op_LOAD_FP, 0b100100110000110, XTheadVector},
         {"th.vlseg6bff.v", THVLSEG6BFFV, VL, op_LOAD_FP, 0b101100110000000, XTheadVector},
         {"th.vlseg6hff.v", THVLSEG6HFFV, VL, op_LOAD_FP, 0b101100110000101, XTheadVector},
         {"th.vlseg6wff.v", THVLSEG6WFFV, VL, op_LOAD_FP, 0b101100110000110, XTheadVector},
         {"th.vlseg7bff.v", THVLSEG7BFFV, VL, op_LOAD_FP, 0b110100110000000, XTheadVector},
         {"th.vlseg7hff.v", THVLSEG7HFFV, VL, op_LOAD_FP, 0b110100110000101, XTheadVector},
         {"th.vlseg7wff.v", THVLSEG7WFFV, VL, op_LOAD_FP, 0b110100110000110, XTheadVector},
         {"th.vlseg8bff.v", THVLSEG8BFFV, VL, op_LOAD_FP, 0b111100110000000, XTheadVector},
         {"th.vlseg8hff.v", THVLSEG8HFFV, VL, op_LOAD_FP, 0b111100110000101, XTheadVector},
         {"th.vlseg8wff.v", THVLSEG8WFFV, VL, op_LOAD_FP, 0b111100110000110, XTheadVector},
         {"th.vlseg2eff.v", THVLSEG2EFFV, VL, op_LOAD_FP, 0b001000110000111, XTheadVector},
         {"th.vlseg3eff.v", THVLSEG3EFFV, VL, op_LOAD_FP, 0b010000110000111, XTheadVector},
         {"th.vlseg4eff.v", THVLSEG4EFFV, VL, op_LOAD_FP, 0b011000110000111, XTheadVector},
         {"th.vlseg5eff.v", THVLSEG5EFFV, VL, op_LOAD_FP, 0b100000110000111, XTheadVector},
         {"th.vlseg6eff.v", THVLSEG6EFFV, VL, op_LOAD_FP, 0b101000110000111, XTheadVector},
         {"th.vlseg7eff.v", THVLSEG7EFFV, VL, op_LOAD_FP, 0b110000110000111, XTheadVector},
         {"th.vlseg8eff.v", THVLSEG8EFFV, VL, op_LOAD_FP, 0b111000110000111, XTheadVector},
         {"th.vlseg2buff.v", THVLSEG2BUFFV, VL, op_LOAD_FP, 0b001000110000000, XTheadVector},
         {"th.vlseg2huff.v", THVLSEG2HUFFV, VL, op_LOAD_FP, 0b001000110000101, XTheadVector},
         {"th.vlseg2wuff.v", THVLSEG2WUFFV, VL, op_LOAD_FP, 0b001000110000110, XTheadVector},
         {"th.vlseg3buff.v", THVLSEG3BUFFV, VL, op_LOAD_FP, 0b010000110000000, XTheadVector},
         {"th.vlseg3huff.v", THVLSEG3HUFFV, VL, op_LOAD_FP, 0b010000110000101, XTheadVector},
         {"th.vlseg3wuff.v", THVLSEG3WUFFV, VL, op_LOAD_FP, 0b010000110000110, XTheadVector},
         {"th.vlseg4buff.v", THVLSEG4BUFFV, VL, op_LOAD_FP, 0b011000110000000, XTheadVector},
         {"th.vlseg4huff.v", THVLSEG4HUFFV, VL, op_LOAD_FP, 0b011000110000101, XTheadVector},
         {"th.vlseg4wuff.v", THVLSEG4WUFFV, VL, op_LOAD_FP, 0b011000110000110, XTheadVector},
         {"th.vlseg5buff.v", THVLSEG5BUFFV, VL, op_LOAD_FP, 0b100000110000000, XTheadVector},
         {"th.vlseg5huff.v", THVLSEG5HUFFV, VL, op_LOAD_FP, 0b100000110000101, XTheadVector},
         {"th.vlseg5wuff.v", THVLSEG5WUFFV, VL, op_LOAD_FP, 0b100000110000110, XTheadVector},
         {"th.vlseg6buff.v", THVLSEG6BUFFV, VL, op_LOAD_FP, 0b101000110000000, XTheadVector},
         {"th.vlseg6huff.v", THVLSEG6HUFFV, VL, op_LOAD_FP, 0b101000110000101, XTheadVector},
         {"th.vlseg6wuff.v", THVLSEG6WUFFV, VL, op_LOAD_FP, 0b101000110000110, XTheadVector},
         {"th.vlseg7buff.v", THVLSEG7BUFFV, VL, op_LOAD_FP, 0b110000110000000, XTheadVector},
         {"th.vlseg7huff.v", THVLSEG7HUFFV, VL, op_LOAD_FP, 0b110000110000101, XTheadVector},
         {"th.vlseg7wuff.v", THVLSEG7WUFFV, VL, op_LOAD_FP, 0b110000110000110, XTheadVector},
         {"th.vlseg8buff.v", THVLSEG8BUFFV, VL, op_LOAD_FP, 0b111000110000000, XTheadVector},
         {"th.vlseg8huff.v", THVLSEG8HUFFV, VL, op_LOAD_FP, 0b111000110000101, XTheadVector},
         {"th.vlseg8wuff.v", THVLSEG8WUFFV, VL, op_LOAD_FP, 0b111000110000110, XTheadVector},
         {"th.vlsseg2b.v", THVLSSEG2BV, VLS, op_LOAD_FP, 0b0011101000, XTheadVector},
         {"th.vlsseg2h.v", THVLSSEG2HV, VLS, op_LOAD_FP, 0b0011101101, XTheadVector},
         {"th.vlsseg2w.v", THVLSSEG2WV, VLS, op_LOAD_FP, 0b0011101110, XTheadVector},
         {"th.vlsseg3b.v", THVLSSEG2BV, VLS, op_LOAD_FP, 0b0101101000, XTheadVector},
         {"th.vlsseg3h.v", THVLSSEG2HV, VLS, op_LOAD_FP, 0b0101101101, XTheadVector},
         {"th.vlsseg3w.v", THVLSSEG2WV, VLS, op_LOAD_FP, 0b0101101110, XTheadVector},
         {"th.vlsseg4b.v", THVLSSEG2BV, VLS, op_LOAD_FP, 0b0111101000, XTheadVector},
         {"th.vlsseg4h.v", THVLSSEG2HV, VLS, op_LOAD_FP, 0b0111101101, XTheadVector},
         {"th.vlsseg4w.v", THVLSSEG2WV, VLS, op_LOAD_FP, 0b0111101110, XTheadVector},
         {"th.vlsseg5b.v", THVLSSEG2BV, VLS, op_LOAD_FP, 0b1001101000, XTheadVector},
         {"th.vlsseg5h.v", THVLSSEG2HV, VLS, op_LOAD_FP, 0b1001101101, XTheadVector},
         {"th.vlsseg5w.v", THVLSSEG2WV, VLS, op_LOAD_FP, 0b1001101110, XTheadVector},
         {"th.vlsseg6b.v", THVLSSEG2BV, VLS, op_LOAD_FP, 0b1011101000, XTheadVector},
         {"th.vlsseg6h.v", THVLSSEG2HV, VLS, op_LOAD_FP, 0b1011101101, XTheadVector},
         {"th.vlsseg6w.v", THVLSSEG2WV, VLS, op_LOAD_FP, 0b1011101110, XTheadVector},
         {"th.vlsseg7b.v", THVLSSEG2BV, VLS, op_LOAD_FP, 0b1101101000, XTheadVector},
         {"th.vlsseg7h.v", THVLSSEG2HV, VLS, op_LOAD_FP, 0b1101101101, XTheadVector},
         {"th.vlsseg7w.v", THVLSSEG2WV, VLS, op_LOAD_FP, 0b1101101110, XTheadVector},
         {"th.vlsseg8b.v", THVLSSEG2BV, VLS, op_LOAD_FP, 0b1111101000, XTheadVector},
         {"th.vlsseg8h.v", THVLSSEG2HV, VLS, op_LOAD_FP, 0b1111101101, XTheadVector},
         {"th.vlsseg8w.v", THVLSSEG2WV, VLS, op_LOAD_FP, 0b1111101110, XTheadVector},
         {"th.vlsseg2e.v", THVLSSEG2EV, VLS, op_LOAD_FP, 0b0010101111, XTheadVector},
         {"th.vlsseg3e.v", THVLSSEG3EV, VLS, op_LOAD_FP, 0b0100101111, XTheadVector},
         {"th.vlsseg4e.v", THVLSSEG4EV, VLS, op_LOAD_FP, 0b0110101111, XTheadVector},
         {"th.vlsseg5e.v", THVLSSEG5EV, VLS, op_LOAD_FP, 0b1000101111, XTheadVector},
         {"th.vlsseg6e.v", THVLSSEG6EV, VLS, op_LOAD_FP, 0b1010101111, XTheadVector},
         {"th.vlsseg7e.v", THVLSSEG7EV, VLS, op_LOAD_FP, 0b1100101111, XTheadVector},
         {"th.vlsseg8e.v", THVLSSEG8EV, VLS, op_LOAD_FP, 0b1110101111, XTheadVector},
         {"th.vlsseg2bu.v", THVLSSEG2BUV, VLS, op_LOAD_FP, 0b0010101000, XTheadVector},
         {"th.vlsseg2hu.v", THVLSSEG2HUV, VLS, op_LOAD_FP, 0b0010101101, XTheadVector},
         {"th.vlsseg2wu.v", THVLSSEG2WUV, VLS, op_LOAD_FP, 0b0010101110, XTheadVector},
         {"th.vlsseg3bu.v", THVLSSEG2BUV, VLS, op_LOAD_FP, 0b0100101000, XTheadVector},
         {"th.vlsseg3hu.v", THVLSSEG2HUV, VLS, op_LOAD_FP, 0b0100101101, XTheadVector},
         {"th.vlsseg3wu.v", THVLSSEG2WUV, VLS, op_LOAD_FP, 0b0100101110, XTheadVector},
         {"th.vlsseg4bu.v", THVLSSEG2BUV, VLS, op_LOAD_FP, 0b0110101000, XTheadVector},
         {"th.vlsseg4hu.v", THVLSSEG2HUV, VLS, op_LOAD_FP, 0b0110101101, XTheadVector},
         {"th.vlsseg4wu.v", THVLSSEG2WUV, VLS, op_LOAD_FP, 0b0110101110, XTheadVector},
         {"th.vlsseg5bu.v", THVLSSEG2BUV, VLS, op_LOAD_FP, 0b1000101000, XTheadVector},
         {"th.vlsseg5hu.v", THVLSSEG2HUV, VLS, op_LOAD_FP, 0b1000101101, XTheadVector},
         {"th.vlsseg5wu.v", THVLSSEG2WUV, VLS, op_LOAD_FP, 0b1000101110, XTheadVector},
         {"th.vlsseg6bu.v", THVLSSEG2BUV, VLS, op_LOAD_FP, 0b1010101000, XTheadVector},
         {"th.vlsseg6hu.v", THVLSSEG2HUV, VLS, op_LOAD_FP, 0b1010101101, XTheadVector},
         {"th.vlsseg6wu.v", THVLSSEG2WUV, VLS, op_LOAD_FP, 0b1010101110, XTheadVector},
         {"th.vlsseg7bu.v", THVLSSEG2BUV, VLS, op_LOAD_FP, 0b1100101000, XTheadVector},
         {"th.vlsseg7hu.v", THVLSSEG2HUV, VLS, op_LOAD_FP, 0b1100101101, XTheadVector},
         {"th.vlsseg7wu.v", THVLSSEG2WUV, VLS, op_LOAD_FP, 0b1100101110, XTheadVector},
         {"th.vlsseg8bu.v", THVLSSEG2BUV, VLS, op_LOAD_FP, 0b1110101000, XTheadVector},
         {"th.vlsseg8hu.v", THVLSSEG2HUV, VLS, op_LOAD_FP, 0b1110101101, XTheadVector},
         {"th.vlsseg8wu.v", THVLSSEG2WUV, VLS, op_LOAD_FP, 0b1110101110, XTheadVector},
         {"th.vssseg2b.v", THVSSSEG2BV, VSS, op_STORE_FP, 0b0010101000, XTheadVector},
         {"th.vssseg2h.v", THVSSSEG2HV, VSS, op_STORE_FP, 0b0010101101, XTheadVector},
         {"th.vssseg2w.v", THVSSSEG2WV, VSS, op_STORE_FP, 0b0010101110, XTheadVector},
         {"th.vssseg2e.v", THVSSSEG2EV, VSS, op_STORE_FP, 0b0010101111, XTheadVector},
         {"th.vssseg3b.v", THVSSSEG3BV, VSS, op_STORE_FP, 0b0100101000, XTheadVector},
         {"th.vssseg3h.v", THVSSSEG3HV, VSS, op_STORE_FP, 0b0100101101, XTheadVector},
         {"th.vssseg3w.v", THVSSSEG3WV, VSS, op_STORE_FP, 0b0100101110, XTheadVector},
         {"th.vssseg3e.v", THVSSSEG3EV, VSS, op_STORE_FP, 0b0100101111, XTheadVector},
         {"th.vssseg4b.v", THVSSSEG4BV, VSS, op_STORE_FP, 0b0110101000, XTheadVector},
         {"th.vssseg4h.v", THVSSSEG4HV, VSS, op_STORE_FP, 0b0110101101, XTheadVector},
         {"th.vssseg4w.v", THVSSSEG4WV, VSS, op_STORE_FP, 0b0110101110, XTheadVector},
         {"th.vssseg4e.v", THVSSSEG4EV, VSS, op_STORE_FP, 0b0110101111, XTheadVector},
         {"th.vssseg5b.v", THVSSSEG5BV, VSS, op_STORE_FP, 0b1000101000, XTheadVector},
         {"th.vssseg5h.v", THVSSSEG5HV, VSS, op_STORE_FP, 0b1000101101, XTheadVector},
         {"th.vssseg5w.v", THVSSSEG5WV, VSS, op_STORE_FP, 0b1000101110, XTheadVector},
         {"th.vssseg5e.v", THVSSSEG5EV, VSS, op_STORE_FP, 0b1000101111, XTheadVector},
         {"th.vssseg6b.v", THVSSSEG6BV, VSS, op_STORE_FP, 0b1010101000, XTheadVector},
         {"th.vssseg6h.v", THVSSSEG6HV, VSS, op_STORE_FP, 0b1010101101, XTheadVector},
         {"th.vssseg6w.v", THVSSSEG6WV, VSS, op_STORE_FP, 0b1010101110, XTheadVector},
         {"th.vssseg6e.v", THVSSSEG6EV, VSS, op_STORE_FP, 0b1010101111, XTheadVector},
         {"th.vssseg7b.v", THVSSSEG7BV, VSS, op_STORE_FP, 0b1100101000, XTheadVector},
         {"th.vssseg7h.v", THVSSSEG7HV, VSS, op_STORE_FP, 0b1100101101, XTheadVector},
         {"th.vssseg7w.v", THVSSSEG7WV, VSS, op_STORE_FP, 0b1100101110, XTheadVector},
         {"th.vssseg7e.v", THVSSSEG7EV, VSS, op_STORE_FP, 0b1100101111, XTheadVector},
         {"th.vssseg8b.v", THVSSSEG8BV, VSS, op_STORE_FP, 0b1110101000, XTheadVector},
         {"th.vssseg8h.v", THVSSSEG8HV, VSS, op_STORE_FP, 0b1110101101, XTheadVector},
         {"th.vssseg8w.v", THVSSSEG8WV, VSS, op_STORE_FP, 0b1110101110, XTheadVector},
         {"th.vssseg8e.v", THVSSSEG8EV, VSS, op_STORE_FP, 0b1110101111, XTheadVector},
         {"th.vlxseg2b.v", THVLXSEG2BV, VLX, op_LOAD_FP, 0b0011111000, XTheadVector},
         {"th.vlxseg2h.v", THVLXSEG2HV, VLX, op_LOAD_FP, 0b0011111101, XTheadVector},
         {"th.vlxseg2w.v", THVLXSEG2WV, VLX, op_LOAD_FP, 0b0011111110, XTheadVector},
         {"th.vlxseg3b.v", THVLXSEG3BV, VLX, op_LOAD_FP, 0b0101111000, XTheadVector},
         {"th.vlxseg3h.v", THVLXSEG3HV, VLX, op_LOAD_FP, 0b0101111101, XTheadVector},
         {"th.vlxseg3w.v", THVLXSEG3WV, VLX, op_LOAD_FP, 0b0101111110, XTheadVector},
         {"th.vlxseg4b.v", THVLXSEG4BV, VLX, op_LOAD_FP, 0b0111111000, XTheadVector},
         {"th.vlxseg4h.v", THVLXSEG4HV, VLX, op_LOAD_FP, 0b0111111101, XTheadVector},
         {"th.vlxseg4w.v", THVLXSEG4WV, VLX, op_LOAD_FP, 0b0111111110, XTheadVector},
         {"th.vlxseg5b.v", THVLXSEG5BV, VLX, op_LOAD_FP, 0b1001111000, XTheadVector},
         {"th.vlxseg5h.v", THVLXSEG5HV, VLX, op_LOAD_FP, 0b1001111101, XTheadVector},
         {"th.vlxseg5w.v", THVLXSEG5WV, VLX, op_LOAD_FP, 0b1001111110, XTheadVector},
         {"th.vlxseg6b.v", THVLXSEG6BV, VLX, op_LOAD_FP, 0b1011111000, XTheadVector},
         {"th.vlxseg6h.v", THVLXSEG6HV, VLX, op_LOAD_FP, 0b1011111101, XTheadVector},
         {"th.vlxseg6w.v", THVLXSEG6WV, VLX, op_LOAD_FP, 0b1011111110, XTheadVector},
         {"th.vlxseg7b.v", THVLXSEG7BV, VLX, op_LOAD_FP, 0b1101111000, XTheadVector},
         {"th.vlxseg7h.v", THVLXSEG7HV, VLX, op_LOAD_FP, 0b1101111101, XTheadVector},
         {"th.vlxseg7w.v", THVLXSEG7WV, VLX, op_LOAD_FP, 0b1101111110, XTheadVector},
         {"th.vlxseg8b.v", THVLXSEG8BV, VLX, op_LOAD_FP, 0b1111111000, XTheadVector},
         {"th.vlxseg8h.v", THVLXSEG8HV, VLX, op_LOAD_FP, 0b1111111101, XTheadVector},
         {"th.vlxseg8w.v", THVLXSEG8WV, VLX, op_LOAD_FP, 0b1111111110, XTheadVector},
         {"th.vlxseg2e.v", THVLXSEG2EV, VLX, op_LOAD_FP, 0b0010111111, XTheadVector},
         {"th.vlxseg3e.v", THVLXSEG3EV, VLX, op_LOAD_FP, 0b0100111111, XTheadVector},
         {"th.vlxseg4e.v", THVLXSEG4EV, VLX, op_LOAD_FP, 0b0110111111, XTheadVector},
         {"th.vlxseg5e.v", THVLXSEG5EV, VLX, op_LOAD_FP, 0b1000111111, XTheadVector},
         {"th.vlxseg6e.v", THVLXSEG6EV, VLX, op_LOAD_FP, 0b1010111111, XTheadVector},
         {"th.vlxseg7e.v", THVLXSEG7EV, VLX, op_LOAD_FP, 0b1100111111, XTheadVector},
         {"th.vlxseg8e.v", THVLXSEG8EV, VLX, op_LOAD_FP, 0b1110111111, XTheadVector},
         {"th.vlxseg2bu.v", THVLXSEG2BUV, VLX, op_LOAD_FP, 0b0010111000, XTheadVector},
         {"th.vlxseg2hu.v", THVLXSEG2HUV, VLX, op_LOAD_FP, 0b0010111101, XTheadVector},
         {"th.vlxseg2wu.v", THVLXSEG2WUV, VLX, op_LOAD_FP, 0b0010111110, XTheadVector},
         {"th.vlxseg3bu.v", THVLXSEG3BUV, VLX, op_LOAD_FP, 0b0100111000, XTheadVector},
         {"th.vlxseg3hu.v", THVLXSEG3HUV, VLX, op_LOAD_FP, 0b0100111101, XTheadVector},
         {"th.vlxseg3wu.v", THVLXSEG3WUV, VLX, op_LOAD_FP, 0b0100111110, XTheadVector},
         {"th.vlxseg4bu.v", THVLXSEG4BUV, VLX, op_LOAD_FP, 0b0110111000, XTheadVector},
         {"th.vlxseg4hu.v", THVLXSEG4HUV, VLX, op_LOAD_FP, 0b0110111101, XTheadVector},
         {"th.vlxseg4wu.v", THVLXSEG4WUV, VLX, op_LOAD_FP, 0b0110111110, XTheadVector},
         {"th.vlxseg5bu.v", THVLXSEG5BUV, VLX, op_LOAD_FP, 0b1000111000, XTheadVector},
         {"th.vlxseg5hu.v", THVLXSEG5HUV, VLX, op_LOAD_FP, 0b1000111101, XTheadVector},
         {"th.vlxseg5wu.v", THVLXSEG5WUV, VLX, op_LOAD_FP, 0b1000111110, XTheadVector},
         {"th.vlxseg6bu.v", THVLXSEG6BUV, VLX, op_LOAD_FP, 0b1010111000, XTheadVector},
         {"th.vlxseg6hu.v", THVLXSEG6HUV, VLX, op_LOAD_FP, 0b1010111101, XTheadVector},
         {"th.vlxseg6wu.v", THVLXSEG6WUV, VLX, op_LOAD_FP, 0b1010111110, XTheadVector},
         {"th.vlxseg7bu.v", THVLXSEG7BUV, VLX, op_LOAD_FP, 0b1100111000, XTheadVector},
         {"th.vlxseg7hu.v", THVLXSEG7HUV, VLX, op_LOAD_FP, 0b1100111101, XTheadVector},
         {"th.vlxseg7wu.v", THVLXSEG7WUV, VLX, op_LOAD_FP, 0b1100111110, XTheadVector},
         {"th.vlxseg8bu.v", THVLXSEG8BUV, VLX, op_LOAD_FP, 0b1110111000, XTheadVector},
         {"th.vlxseg8hu.v", THVLXSEG8HUV, VLX, op_LOAD_FP, 0b1110111101, XTheadVector},
         {"th.vlxseg8wu.v", THVLXSEG8WUV, VLX, op_LOAD_FP, 0b1110111110, XTheadVector},
         {"th.vsxseg2b.v", THVSXSEG2BV, VSX, op_STORE_FP, 0b0010111000, XTheadVector},
         {"th.vsxseg2h.v", THVSXSEG2HV, VSX, op_STORE_FP, 0b0010111101, XTheadVector},
         {"th.vsxseg2w.v", THVSXSEG2WV, VSX, op_STORE_FP, 0b0010111110, XTheadVector},
         {"th.vsxseg2e.v", THVSXSEG2EV, VSX, op_STORE_FP, 0b0010111111, XTheadVector},
         {"th.vsxseg3b.v", THVSXSEG3BV, VSX, op_STORE_FP, 0b0100111000, XTheadVector},
         {"th.vsxseg3h.v", THVSXSEG3HV, VSX, op_STORE_FP, 0b0100111101, XTheadVector},
         {"th.vsxseg3w.v", THVSXSEG3WV, VSX, op_STORE_FP, 0b0100111110, XTheadVector},
         {"th.vsxseg3e.v", THVSXSEG3EV, VSX, op_STORE_FP, 0b0100111111, XTheadVector},
         {"th.vsxseg4b.v", THVSXSEG4BV, VSX, op_STORE_FP, 0b0110111000, XTheadVector},
         {"th.vsxseg4h.v", THVSXSEG4HV, VSX, op_STORE_FP, 0b0110111101, XTheadVector},
         {"th.vsxseg4w.v", THVSXSEG4WV, VSX, op_STORE_FP, 0b0110111110, XTheadVector},
         {"th.vsxseg4e.v", THVSXSEG4EV, VSX, op_STORE_FP, 0b0110111111, XTheadVector},
         {"th.vsxseg5b.v", THVSXSEG5BV, VSX, op_STORE_FP, 0b1000111000, XTheadVector},
         {"th.vsxseg5h.v", THVSXSEG5HV, VSX, op_STORE_FP, 0b1000111101, XTheadVector},
         {"th.vsxseg5w.v", THVSXSEG5WV, VSX, op_STORE_FP, 0b1000111110, XTheadVector},
         {"th.vsxseg5e.v", THVSXSEG5EV, VSX, op_STORE_FP, 0b1000111111, XTheadVector},
         {"th.vsxseg6b.v", THVSXSEG6BV, VSX, op_STORE_FP, 0b1010111000, XTheadVector},
         {"th.vsxseg6h.v", THVSXSEG6HV, VSX, op_STORE_FP, 0b1010111101, XTheadVector},
         {"th.vsxseg6w.v", THVSXSEG6WV, VSX, op_STORE_FP, 0b1010111110, XTheadVector},
         {"th.vsxseg6e.v", THVSXSEG6EV, VSX, op_STORE_FP, 0b1010111111, XTheadVector},
         {"th.vsxseg7b.v", THVSXSEG7BV, VSX, op_STORE_FP, 0b1100111000, XTheadVector},
         {"th.vsxseg7h.v", THVSXSEG7HV, VSX, op_STORE_FP, 0b1100111101, XTheadVector},
         {"th.vsxseg7w.v", THVSXSEG7WV, VSX, op_STORE_FP, 0b1100111110, XTheadVector},
         {"th.vsxseg7e.v", THVSXSEG7EV, VSX, op_STORE_FP, 0b1100111111, XTheadVector},
         {"th.vsxseg8b.v", THVSXSEG8BV, VSX, op_STORE_FP, 0b1110111000, XTheadVector},
         {"th.vsxseg8h.v", THVSXSEG8HV, VSX, op_STORE_FP, 0b1110111101, XTheadVector},
         {"th.vsxseg8w.v", THVSXSEG8WV, VSX, op_STORE_FP, 0b1110111110, XTheadVector},
         {"th.vsxseg8e.v", THVSXSEG8EV, VSX, op_STORE_FP, 0b1110111111, XTheadVector},
         {"th.vamoswapw.v", THVAMOSWAPWV, IVX, op_AMO, 0b0000111110, XTheadZvamo},
         {"th.vamoswapd.v", THVAMOSWAPDV, IVX, op_AMO, 0b0000111111, XTheadZvamo},
         {"th.vamoaddw.v", THVAMOADDWV, IVX, op_AMO, 0b0000011110, XTheadZvamo},
         {"th.vamoaddd.v", THVAMOADDDV, IVX, op_AMO, 0b0000011111, XTheadZvamo},
         {"th.vamoxorw.v", THVAMOXORWV, IVX, op_AMO, 0b0010011110, XTheadZvamo},
         {"th.vamoxord.v", THVAMOXORDV, IVX, op_AMO, 0b0010011111, XTheadZvamo},
         {"th.vamoandw.v", THVAMOANDWV, IVX, op_AMO, 0b0110011110, XTheadZvamo},
         {"th.vamoandd.v", THVAMOANDDV, IVX, op_AMO, 0b0110011111, XTheadZvamo},
         {"th.vamoorw.v", THVAMOORWV, IVX, op_AMO, 0b0100011110, XTheadZvamo},
         {"th.vamoord.v", THVAMOORDV, IVX, op_AMO, 0b0100011111, XTheadZvamo},
         {"th.vamominw.v", THVAMOMINWV, IVX, op_AMO, 0b1000011110, XTheadZvamo},
         {"th.vamomind.v", THVAMOMINDV, IVX, op_AMO, 0b1000011111, XTheadZvamo},
         {"th.vamomaxw.v", THVAMOMAXWV, IVX, op_AMO, 0b1010011110, XTheadZvamo},
         {"th.vamomaxd.v", THVAMOMAXDV, IVX, op_AMO, 0b1010011111, XTheadZvamo},
         {"th.vamominuw.v", THVAMOMINUWV, IVX, op_AMO, 0b1100011110, XTheadZvamo},
         {"th.vamominud.v", THVAMOMINUDV, IVX, op_AMO, 0b1100011111, XTheadZvamo},
         {"th.vamomaxuw.v", THVAMOMAXUWV, IVX, op_AMO, 0b1110011110, XTheadZvamo},
         {"th.vamomaxud.v", THVAMOMAXUDV, IVX, op_AMO, 0b1110011111, XTheadZvamo},
         {"th.vadd.vv", THVADDVV, IVV, op_V, 0b0000001000, XTheadVector},
         {"th.vadd.vx", THVADDVX, IVX, op_V, 0b0000001100, XTheadVector},
         {"th.vadd.vi", THVADDVI, IVI, op_V, 0b0000001011, XTheadVector},
         {"th.vsub.vv", THVSUBVV, IVV, op_V, 0b0000101000, XTheadVector},
         {"th.vsub.vx", THVSUBVX, IVX, op_V, 0b0000101100, XTheadVector},
         {"th.vrsub.vx", THVRSUBVX, IVX, op_V, 0b0000111100, XTheadVector},
         {"th.vrsub.vi", THVRSUBVI, IVI, op_V, 0b0000111011, XTheadVector},
         {"th.vwaddu.vv", THVWADDUVV, MVV, op_V, 0b1100001010, XTheadVector},
         {"th.vwaddu.vx", THVWADDUVX, MVX, op_V, 0b1100001110, XTheadVector},
         {"th.vwsubu.vv", THVWSUBUVV, MVV, op_V, 0b1100101010, XTheadVector},
         {"th.vwsubu.vx", THVWSUBUVX, MVX, op_V, 0b1100101110, XTheadVector},
         {"th.vwadd.vv", THVWADDVV, MVV, op_V, 0b1100011010, XTheadVector},
         {"th.vwadd.vx", THVWADDVX, MVX, op_V, 0b1100011110, XTheadVector},
         {"th.vwsub.vv", THVWSUBVV, MVV, op_V, 0b1100111010, XTheadVector},
         {"th.vwsub.vx", THVWSUBVX, MVX, op_V, 0b1100111110, XTheadVector},
         {"th.vwaddu.wv", THVWADDUWV, MVV, op_V, 0b1101001010, XTheadVector},
         {"th.vwaddu.wx", THVWADDUWX, MVX, op_V, 0b1101001110, XTheadVector},
         {"th.vwsubu.wv", THVWSUBUWV, MVV, op_V, 0b1101101010, XTheadVector},
         {"th.vwsubu.wx", THVWSUBUWX, MVX, op_V, 0b1101101110, XTheadVector},
         {"th.vwadd.wv", THVWADDWV, MVV, op_V, 0b1101011010, XTheadVector},
         {"th.vwadd.wx", THVWADDWX, MVX, op_V, 0b1101011110, XTheadVector},
         {"th.vwsub.wv", THVWSUBWV, MVV, op_V, 0b1101111010, XTheadVector},
         {"th.vwsub.wx", THVWSUBWX, MVX, op_V, 0b1101111110, XTheadVector},
         {"th.vadc.vvm", THVADCVVM, IVV, op_V, 0b0100001000, XTheadVector},
         {"th.vadc.vxm", THVADCVXM, IVX, op_V, 0b0100001100, XTheadVector},
         {"th.vadc.vim", THVADCVIM, IVI, op_V, 0b0100001011, XTheadVector},
         {"th.vmadc.vvm", THVMADCVVM, IVV, op_V, 0b0100011000, XTheadVector},
         {"th.vmadc.vxm", THVMADCVXM, IVX, op_V, 0b0100011100, XTheadVector},
         {"th.vmadc.vim", THVMADCVIM, IVI, op_V, 0b0100011011, XTheadVector},
         {"th.vsbc.vvm", THVSBCVVM, IVV, op_V, 0b0100101000, XTheadVector},
         {"th.vsbc.vxm", THVSBCVXM, IVX, op_V, 0b0100101100, XTheadVector},
         {"th.vmsbc.vvm", THVMSBCVVM, IVV, op_V, 0b0100111000, XTheadVector},
         {"th.vmsbc.vxm", THVMSBCVXM, IVX, op_V, 0b0100111100, XTheadVector},
         {"th.vand.vv", THVANDVV, IVV, op_V, 0b0010011000, XTheadVector},
         {"th.vand.vx", THVANDVX, IVX, op_V, 0b0010011100, XTheadVector},
         {"th.vand.vi", THVANDVI, IVI, op_V, 0b0010011011, XTheadVector},
         {"th.vor.vv", THVORVV, IVV, op_V, 0b0010101000, XTheadVector},
         {"th.vor.vx", THVORVX, IVX, op_V, 0b0010101100, XTheadVector},
         {"th.vor.vi", THVORVI, IVI, op_V, 0b0010101011, XTheadVector},
         {"th.vxor.vv", THVXORVV, IVV, op_V, 0b0010111000, XTheadVector},
         {"th.vxor.vx", THVXORVX, IVX, op_V, 0b0010111100, XTheadVector},
         {"th.vxor.vi", THVXORVI, IVI, op_V, 0b0010111011, XTheadVector},
         {"th.vsll.vv", THVSLLVV, IVV, op_V, 0b1001011000, XTheadVector},
         {"th.vsll.vx", THVSLLVX, IVX, op_V, 0b1001011100, XTheadVector},
         {"th.vsll.vi", THVSLLVI, IVI, op_V, 0b1001011011, XTheadVector},
         {"th.vsrl.vv", THVSRLVV, IVV, op_V, 0b1010001000, XTheadVector},
         {"th.vsrl.vx", THVSRLVX, IVX, op_V, 0b1010001100, XTheadVector},
         {"th.vsrl.vi", THVSRLVI, IVI, op_V, 0b1010001011, XTheadVector},
         {"th.vsra.vv", THVSRAVV, IVV, op_V, 0b1010011000, XTheadVector},
         {"th.vsra.vx", THVSRAVX, IVX, op_V, 0b1010011100, XTheadVector},
         {"th.vsra.vi", THVSRAVI, IVI, op_V, 0b1010011011, XTheadVector},
         {"th.vnsrl.vv", THVNSRLVV, IVV, op_V, 0b1011001000, XTheadVector},
         {"th.vnsrl.vx", THVNSRLVX, IVX, op_V, 0b1011001100, XTheadVector},
         {"th.vnsrl.vi", THVNSRLVI, IVI, op_V, 0b1011001011, XTheadVector},
         {"th.vnsra.vv", THVNSRAVV, IVV, op_V, 0b1011011000, XTheadVector},
         {"th.vnsra.vx", THVNSRAVX, IVX, op_V, 0b1011011100, XTheadVector},
         {"th.vnsra.vi", THVNSRAVI, IVI, op_V, 0b1011011011, XTheadVector},
         {"th.vmseq.vv", THVMSEQVV, IVV, op_V, 0b0110001000, XTheadVector},
         {"th.vmseq.vx", THVMSEQVX, IVX, op_V, 0b0110001100, XTheadVector},
         {"th.vmseq.vi", THVMSEQVI, IVI, op_V, 0b0110001011, XTheadVector},
         {"th.vmsne.vv", THVMSNEVV, IVV, op_V, 0b0110011000, XTheadVector},
         {"th.vmsne.vx", THVMSNEVX, IVX, op_V, 0b0110011100, XTheadVector},
         {"th.vmsne.vi", THVMSNEVI, IVI, op_V, 0b0110011011, XTheadVector},
         {"th.vmsltu.vv", THVMSLTUVV, IVV, op_V, 0b0110101000, XTheadVector},
         {"th.vmsltu.vx", THVMSLTUVX, IVX, op_V, 0b0110101100, XTheadVector},
         {"th.vmslt.vv", THVMSLTVV, IVV, op_V, 0b0110111000, XTheadVector},
         {"th.vmslt.vx", THVMSLTVX, IVX, op_V, 0b0110111100, XTheadVector},
         {"th.vmsleu.vv", THVMSLEUVV, IVV, op_V, 0b0111001000, XTheadVector},
         {"th.vmsleu.vx", THVMSLEUVX, IVX, op_V, 0b0111001100, XTheadVector},
         {"th.vmsleu.vi", THVMSLEUVI, IVI, op_V, 0b0111001011, XTheadVector},
         {"th.vmsle.vv", THVMSLEVV, IVV, op_V, 0b0111011000, XTheadVector},
         {"th.vmsle.vx", THVMSLEVX, IVX, op_V, 0b0111011100, XTheadVector},
         {"th.vmsle.vi", THVMSLEVI, IVI, op_V, 0b0111011011, XTheadVector},
         {"th.vmsgtu.vx", THVMSGTUVX, IVX, op_V, 0b0111101100, XTheadVector},
         {"th.vmsgtu.vi", THVMSGTUVI, IVI, op_V, 0b0111101011, XTheadVector},
         {"th.vmsgt.vx", THVMSGTVX, IVX, op_V, 0b0111111100, XTheadVector},
         {"th.vmsgt.vi", THVMSGTVI, IVI, op_V, 0b0111111011, XTheadVector},
         {"th.vminu.vv", THVMINUVV, IVV, op_V, 0b0001001000, XTheadVector},
         {"th.vminu.vx", THVMINUVX, IVX, op_V, 0b0001001100, XTheadVector},
         {"th.vmin.vv", THVMINVV, IVV, op_V, 0b0001011000, XTheadVector},
         {"th.vmin.vx", THVMINVX, IVX, op_V, 0b0001011100, XTheadVector},
         {"th.vmaxu.vv", THVMAXUVV, IVV, op_V, 0b0001101000, XTheadVector},
         {"th.vmaxu.vx", THVMAXUVX, IVX, op_V, 0b0001101100, XTheadVector},
         {"th.vmax.vv", THVMAXVV, IVV, op_V, 0b0001111000, XTheadVector},
         {"th.vmax.vx", THVMAXVX, IVX, op_V, 0b0001111100, XTheadVector},
         {"th.vmul.vv", THVMULVV, MVV, op_V, 0b1001011010, XTheadVector},
         {"th.vmul.vx", THVMULVX, MVX, op_V, 0b1001011110, XTheadVector},
         {"th.vmulh.vv", THVMULHVV, MVV, op_V, 0b1001111010, XTheadVector},
         {"th.vmulh.vx", THVMULHVX, MVX, op_V, 0b1001111110, XTheadVector},
         {"th.vmulhu.vv", THVMULHUVV, MVV, op_V, 0b1001001010, XTheadVector},
         {"th.vmulhu.vx", THVMULHUVX, MVX, op_V, 0b1001001110, XTheadVector},
         {"th.vmulhsu.vv", THVMULHSUVV, MVV, op_V, 0b1001101010, XTheadVector},
         {"th.vmulhsu.vx", THVMULHSUVX, MVX, op_V, 0b1001101110, XTheadVector},
         {"th.vdivu.vv", THVDIVUVV, MVV, op_V, 0b1000001010, XTheadVector},
         {"th.vdivu.vx", THVDIVUVX, MVX, op_V, 0b1000001110, XTheadVector},
         {"th.vdiv.vv", THVDIVVV, MVV, op_V, 0b1000011010, XTheadVector},
         {"th.vdiv.vx", THVDIVVX, MVX, op_V, 0b1000011110, XTheadVector},
         {"th.vremu.vv", THVREMUVV, MVV, op_V, 0b1000101010, XTheadVector},
         {"th.vremu.vx", THVREMUVX, MVX, op_V, 0b1000101110, XTheadVector},
         {"th.vrem.vv", THVREMVV, MVV, op_V, 0b1000111010, XTheadVector},
         {"th.vrem.vx", THVREMVX, MVX, op_V, 0b1000111110, XTheadVector},
         {"th.vwmul.vv", THVWMULVV, MVV, op_V, 0b1110111010, XTheadVector},
         {"th.vwmul.vx", THVWMULVX, MVX, op_V, 0b1110111110, XTheadVector},
         {"th.vwmulu.vv", THVWMULUVV, MVV, op_V, 0b1110001010, XTheadVector},
         {"th.vwmulu.vx", THVWMULUVX, MVX, op_V, 0b1110001110, XTheadVector},
         {"th.vwmulsu.vv", THVWMULSUVV, MVV, op_V, 0b1110101010, XTheadVector},
         {"th.vwmulsu.vx", THVWMULSUVX, MVX, op_V, 0b1110101110, XTheadVector},
         {"th.vmacc.vv", THVMACCVV, MVV, op_V, 0b1011011010, XTheadVector, {swap_rs1_rs2}},
         {"th.vmacc.vx", THVMACCVX, MVX, op_V, 0b1011011110, XTheadVector, {swap_rs1_rs2}},
         {"th.vnmsac.vv", THVNMSACVV, MVV, op_V, 0b1011111010, XTheadVector, {swap_rs1_rs2}},
         {"th.vnmsac.vx", THVNMSACVX, MVX, op_V, 0b1011111110, XTheadVector, {swap_rs1_rs2}},
         {"th.vmadd.vv", THVMADDVV, MVV, op_V, 0b1010011010, XTheadVector, {swap_rs1_rs2}},
         {"th.vmadd.vx", THVMADDVX, MVX, op_V, 0b1010011110, XTheadVector, {swap_rs1_rs2}},
         {"th.vnmsub.vv", THVNMSUBVV, MVV, op_V, 0b1010111010, XTheadVector, {swap_rs1_rs2}},
         {"th.vnmsub.vx", THVNMSUBVX, MVX, op_V, 0b1010111110, XTheadVector, {swap_rs1_rs2}},
         {"th.vwmaccu.vv", THVWMACCUVV, MVV, op_V, 0b1111001010, XTheadVector, {swap_rs1_rs2}},
         {"th.vwmaccu.vx", THVWMACCUVX, MVX, op_V, 0b1111001110, XTheadVector, {swap_rs1_rs2}},
         {"th.vwmacc.vv", THVWMACCVV, MVV, op_V, 0b1111011010, XTheadVector, {swap_rs1_rs2}},
         {"th.vwmacc.vx", THVWMACCVX, MVX, op_V, 0b1111011110, XTheadVector, {swap_rs1_rs2}},
         {"th.vwmaccsu.vv", THVWMACCSUVV, MVV, op_V, 0b1111101010, XTheadVector, {swap_rs1_rs2}},
         {"th.vwmaccsu.vx", THVWMACCSUVX, MVX, op_V, 0b1111101110, XTheadVector, {swap_rs1_rs2}},
         {"th.vwmaccus.vx", THVWMACCUSVX, MVX, op_V, 0b1111111110, XTheadVector, {swap_rs1_rs2}},
         {"th.vmerge.vvm", THVMERGEVVM, IVV, op_V, 0b0101110000, XTheadVector},
         {"th.vmerge.vxm", THVMERGEVXM, IVX, op_V, 0b0101110100, XTheadVector},
         {"th.vmerge.vim", THVMERGEVIM, IVI, op_V, 0b0101110011, XTheadVector},
         {"th.vmv.v.v", THVMVVV, IVV, op_V, 0b0101111000, XTheadVector, {0b00000, swap_rs1_rs2}},
         {"th.vmv.v.x", THVMVVX, IVX, op_V, 0b0101111100, XTheadVector, {0b00000, swap_rs1_rs2}},
         {"th.vmv.v.i", THVMVVI, IVI, op_V, 0b0101111011, XTheadVector, {0b00000}},
         {"th.vsaddu.vv", THVSADDUVV, IVV, op_V, 0b1000001000, XTheadVector},
         {"th.vsaddu.vx", THVSADDUVX, IVX, op_V, 0b1000001100, XTheadVector},
         {"th.vsaddu.vi", THVSADDUVI, IVI, op_V, 0b1000001011, XTheadVector},
         {"th.vsadd.vv", THVSADDVV, IVV, op_V, 0b1000011000, XTheadVector},
         {"th.vsadd.vx", THVSADDVX, IVX, op_V, 0b1000011100, XTheadVector},
         {"th.vsadd.vi", THVSADDVI, IVI, op_V, 0b1000011011, XTheadVector},
         {"th.vssubu.vv", THVSSUBUVV, IVV, op_V, 0b1000101000, XTheadVector},
         {"th.vssubu.vx", THVSSUBUVX, IVX, op_V, 0b1000101100, XTheadVector},
         {"th.vssub.vv", THVSSUBVV, IVV, op_V, 0b1000111000, XTheadVector},
         {"th.vssub.vx", THVSSUBVX, IVX, op_V, 0b1000111100, XTheadVector},
         {"th.vaadd.vv", THVAADDVV, IVV, op_V, 0b1001001000, XTheadVector},
         {"th.vaadd.vx", THVAADDVX, IVX, op_V, 0b1001001100, XTheadVector},
         {"th.vaadd.vi", THVAADDVI, IVI, op_V, 0b1001001011, XTheadVector},
         {"th.vasub.vv", THVASUBVV, MVV, op_V, 0b0010111010, XTheadVector},
         {"th.vasub.vx", THVASUBVX, MVX, op_V, 0b0010111110, XTheadVector},
         {"th.vsmul.vv", THVSMULVV, IVV, op_V, 0b1001111000, XTheadVector},
         {"th.vsmul.vx", THVSMULVX, IVX, op_V, 0b1001111100, XTheadVector},
         {"th.vwsmaccu.vv", THVWSMACCUVV, IVV, op_V, 0b1111001000, XTheadVector, {swap_rs1_rs2}},
         {"th.vwsmaccu.vx", THVWSMACCUVX, IVX, op_V, 0b1111001100, XTheadVector, {swap_rs1_rs2}},
         {"th.vwsmacc.vv", THVWSMACCVV, IVV, op_V, 0b1111011000, XTheadVector, {swap_rs1_rs2}},
         {"th.vwsmacc.vx", THVWSMACCVX, IVX, op_V, 0b1111011100, XTheadVector, {swap_rs1_rs2}},
         {"th.vwsmaccsu.vv", THVWSMACCSUVV, IVV, op_V, 0b1111101000, XTheadVector, {swap_rs1_rs2}},
         {"th.vwsmaccsu.vx", THVWSMACCSUVX, IVX, op_V, 0b1111101100, XTheadVector, {swap_rs1_rs2}},
         {"th.vwsmaccus.vx", THVWSMACCUSVX, IVX, op_V, 0b1111111100, XTheadVector, {swap_rs1_rs2}},
         {"th.vssrl.vv", THVSSRLVV, IVV, op_V, 0b1010101000, XTheadVector},
         {"th.vssrl.vx", THVSSRLVX, IVX, op_V, 0b1010101100, XTheadVector},
         {"th.vssrl.vi", THVSSRLVI, IVI, op_V, 0b1010101011, XTheadVector},
         {"th.vssra.vv", THVSSRAVV, IVV, op_V, 0b1010111000, XTheadVector},
         {"th.vssra.vx", THVSSRAVX, IVX, op_V, 0b1010111100, XTheadVector},
         {"th.vssra.vi", THVSSRAVI, IVI, op_V, 0b1010111011, XTheadVector},
         {"th.vnclipu.vv", THVNCLIPUVV, IVV, op_V, 0b1011101000, XTheadVector},
         {"th.vnclipu.vx", THVNCLIPUVX, IVX, op_V, 0b1011101100, XTheadVector},
         {"th.vnclipu.vi", THVNCLIPUVI, IVI, op_V, 0b1011101011, XTheadVector},
         {"th.vnclip.vv", THVNCLIPVV, IVV, op_V, 0b1011111000, XTheadVector},
         {"th.vnclip.vx", THVNCLIPVX, IVX, op_V, 0b1011111100, XTheadVector},
         {"th.vnclip.vi", THVNCLIPVI, IVI, op_V, 0b1011111011, XTheadVector},
         {"th.vfadd.vv", THVFADDVV, FVV, op_V, 0b0000001001, XTheadVector},
         {"th.vfadd.vf", THVFADDVF, FVF, op_V, 0b0000001101, XTheadVector},
         {"th.vfsub.vv", THVFSUBVV, FVV, op_V, 0b0000101001, XTheadVector},
         {"th.vfsub.vf", THVFSUBVF, FVF, op_V, 0b0000101101, XTheadVector},
         {"th.vfrsub.vf", THVFRSUBVF, FVF, op_V, 0b1001111101, XTheadVector},
         {"th.vfwadd.vv", THVFWADDVV, FVV, op_V, 0b1100001001, XTheadVector},
         {"th.vfwadd.vf", THVFWADDVF, FVF, op_V, 0b1100001101, XTheadVector},
         {"th.vfwsub.vv", THVFWSUBVV, FVV, op_V, 0b1100101001, XTheadVector},
         {"th.vfwsub.vf", THVFWSUBVF, FVF, op_V, 0b1100101101, XTheadVector},
         {"th.vfwadd.wv", THVFWADDWV, FVV, op_V, 0b1101001001, XTheadVector},
         {"th.vfwadd.wf", THVFWADDWF, FVF, op_V, 0b1101001101, XTheadVector},
         {"th.vfwsub.wv", THVFWSUBWV, FVV, op_V, 0b1101101001, XTheadVector},
         {"th.vfwsub.wf", THVFWSUBWF, FVF, op_V, 0b1101101101, XTheadVector},
         {"th.vfmul.vv", THVFMULVV, FVV, op_V, 0b1001001001, XTheadVector},
         {"th.vfmul.vf", THVFMULVF, FVF, op_V, 0b1001001101, XTheadVector},
         {"th.vfdiv.vv", THVFDIVVV, FVV, op_V, 0b1000001001, XTheadVector},
         {"th.vfdiv.vf", THVFDIVVF, FVF, op_V, 0b1000001101, XTheadVector},
         {"th.vfrdiv.vf", THVFRDIVVF, FVF, op_V, 0b1000011101, XTheadVector},
         {"th.vfwmul.vv", THVFWMULVV, FVV, op_V, 0b1110001001, XTheadVector},
         {"th.vfwmul.vf", THVFWMULVF, FVF, op_V, 0b1110001101, XTheadVector},
         {"th.vfmacc.vv", THVFMACCVV, FVV, op_V, 0b1011001001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfmacc.vf", THVFMACCVF, FVF, op_V, 0b1011001101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfnmacc.vv", THVFNMACCVV, FVV, op_V, 0b1011011001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfnmacc.vf", THVFNMACCVF, FVF, op_V, 0b1011011101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfmsac.vv", THVFMSACVV, FVV, op_V, 0b1011101001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfmsac.vf", THVFMSACVF, FVF, op_V, 0b1011101101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfnmsac.vv", THVFNMSACVV, FVV, op_V, 0b1011111001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfnmsac.vf", THVFNMSACVF, FVF, op_V, 0b1011111101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfmadd.vv", THVFMADDVV, FVV, op_V, 0b1010001001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfmadd.vf", THVFMADDVF, FVF, op_V, 0b1010001101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfnmadd.vv", THVFNMADDVV, FVV, op_V, 0b1010011001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfnmadd.vf", THVFNMADDVF, FVF, op_V, 0b1010011101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfmsub.vv", THVFMSUBVV, FVV, op_V, 0b1010101001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfmsub.vf", THVFMSUBVF, FVF, op_V, 0b1010101101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfnmsub.vv", THVFNMSUBVV, FVV, op_V, 0b1010111001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfnmsub.vf", THVFNMSUBVF, FVF, op_V, 0b1010111101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfwmacc.vv", THVFWMACCVV, FVV, op_V, 0b1111001001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfwmacc.vf", THVFWMACCVF, FVF, op_V, 0b1111001101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfwnmacc.vv", THVFWNMACCVV, FVV, op_V, 0b1111011001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfwnmacc.vf", THVFWNMACCVF, FVF, op_V, 0b1111011101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfwmsac.vv", THVFWMSACVV, FVV, op_V, 0b1111101001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfwmsac.vf", THVFWMSACVF, FVF, op_V, 0b1111101101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfwnmsac.vv", THVFWNMSACVV, FVV, op_V, 0b1111111001, XTheadVector, {swap_rs1_rs2}},
         {"th.vfwnmsac.vf", THVFWNMSACVF, FVF, op_V, 0b1111111101, XTheadVector, {swap_rs1_rs2}},
         {"th.vfsqrt.v", THVFSQRTV, FVV, op_V, 0b1000111001, XTheadVector, {0b00000}},
         {"th.vfmin.vv", THVFMINVV, FVV, op_V, 0b0001001001, XTheadVector},
         {"th.vfmin.vf", THVFMINVF, FVF, op_V, 0b0001001101, XTheadVector},
         {"th.vfmax.vv", THVFMAXVV, FVV, op_V, 0b0001101001, XTheadVector},
         {"th.vfmax.vf", THVFMAXVF, FVF, op_V, 0b0001101101, XTheadVector},
         {"th.vfsgnj.vv", THVFSGNJVV, FVV, op_V, 0b0010001001, XTheadVector},
         {"th.vfsgnj.vf", THVFSGNJVF, FVF, op_V, 0b0010001101, XTheadVector},
         {"th.vfsgnjn.vv", THVFSGNJNVV, FVV, op_V, 0b0010011001, XTheadVector},
         {"th.vfsgnjn.vf", THVFSGNJNVF, FVF, op_V, 0b0010011101, XTheadVector},
         {"th.vfsgnjx.vv", THVFSGNJXVV, FVV, op_V, 0b0010101001, XTheadVector},
         {"th.vfsgnjx.vf", THVFSGNJXVF, FVF, op_V, 0b0010101101, XTheadVector},
         {"th.vmfeq.vv", THVMFEQVV, FVV, op_V, 0b0110001001, XTheadVector},
         {"th.vmfeq.vf", THVMFEQVF, FVF, op_V, 0b0110001101, XTheadVector},
         {"th.vmfne.vv", THVMFNEVV, FVV, op_V, 0b0111001001, XTheadVector},
         {"th.vmfne.vf", THVMFNEVF, FVF, op_V, 0b0111001101, XTheadVector},
         {"th.vmflt.vv", THVMFLTVV, FVV, op_V, 0b0110111001, XTheadVector},
         {"th.vmflt.vf", THVMFLTVF, FVF, op_V, 0b0110111101, XTheadVector},
         {"th.vmfle.vv", THVMFLEVV, FVV, op_V, 0b0110011001, XTheadVector},
         {"th.vmfle.vf", THVMFLEVF, FVF, op_V, 0b0110011101, XTheadVector},
         {"th.vmfgt.vf", THVMFGTVF, FVF, op_V, 0b0111011101, XTheadVector},
         {"th.vmfge.vf", THVMFGEVF, FVF, op_V, 0b0111111101, XTheadVector},
         {"th.vmford.vv", THVMFORDVV, FVV, op_V, 0b0110101001, XTheadVector},
         {"th.vmford.vf", THVMFORDVF, FVF, op_V, 0b0110101101, XTheadVector},
         {"th.vfclass.v", THVFCLASSV, FVV, op_V, 0b0100111001, XTheadVector, {0b10000}},
         {"th.vfmerge.vfm", THVFMERGEVFM, FVF, op_V, 0b0101110101, XTheadVector},
         {"th.vfmv.v.f", THVFMVVF, FVF, op_V, 0b0101111101, XTheadVector, {0b00000, swap_rs1_rs2}},
         {"th.vfcvt.xu.f.v", THVFCVTXUFV, FVV, op_V, 0b1000101001, XTheadVector, {0b00000}},
         {"th.vfcvt.x.f.v", THVFCVTXFV, FVV, op_V, 0b1000101001, XTheadVector, {0b00001}},
         {"th.vfcvt.f.xu.v", THVFCVTFXUV, FVV, op_V, 0b1000101001, XTheadVector, {0b00010}},
         {"th.vfcvt.f.x.v", THVFCVTFXV, FVV, op_V, 0b1000101001, XTheadVector, {0b00011}},
         {"th.vfwcvt.xu.f.v", THVFWCVTXUFV, FVV, op_V, 0b1000101001, XTheadVector, {0b01000}},
         {"th.vfwcvt.x.f.v", THVFWCVTXFV, FVV, op_V, 0b1000101001, XTheadVector, {0b01001}},
         {"th.vfwcvt.f.xu.v", THVFWCVTFXUV, FVV, op_V, 0b1000101001, XTheadVector, {0b01010}},
         {"th.vfwcvt.f.x.v", THVFWCVTFXV, FVV, op_V, 0b1000101001, XTheadVector, {0b01011}},
         {"th.vfwcvt.f.f.v", THVFWCVTFFV, FVV, op_V, 0b1000101001, XTheadVector, {0b01100}},
         {"th.vfncvt.xu.f.v", THVFNCVTXUFV, FVV, op_V, 0b1000101001, XTheadVector, {0b10000}},
         {"th.vfncvt.x.f.v", THVFNCVTXFV, FVV, op_V, 0b1000101001, XTheadVector, {0b10001}},
         {"th.vfncvt.f.xu.v", THVFNCVTFXUV, FVV, op_V, 0b1000101001, XTheadVector, {0b10010}},
         {"th.vfncvt.f.x.v", THVFNCVTFXV, FVV, op_V, 0b1000101001, XTheadVector, {0b10011}},
         {"th.vfncvt.f.f.v", THVFNCVTFFV, FVV, op_V, 0b1000101001, XTheadVector, {0b10100}},
         {"th.vredsum.vs", THVREDSUMVS, MVV, op_V, 0b0000001010, XTheadVector},
         {"th.vredmaxu.vs", THVREDMAXUVS, MVV, op_V, 0b0001101010, XTheadVector},
         {"th.vredmax.vs", THVREDMAXVS, MVV, op_V, 0b0001111010, XTheadVector},
         {"th.vredminu.vs", THVREDMINUVS, MVV, op_V, 0b0001001010, XTheadVector},
         {"th.vredmin.vs", THVREDMINVS, MVV, op_V, 0b0001011010, XTheadVector},
         {"th.vredand.vs", THVREDANDVS, MVV, op_V, 0b0000011010, XTheadVector},
         {"th.vredor.vs", THVREDORVS, MVV, op_V, 0b0000101010, XTheadVector},
         {"th.vredxor.vs", THVREDXORVS, MVV, op_V, 0b0000111010, XTheadVector},
         {"th.vwredsumu.vs", THVWREDSUMUVS, IVV, op_V, 0b1100001000, XTheadVector},
         {"th.vwredsum.vs", THVWREDSUMVS, IVV, op_V, 0b1100011000, XTheadVector},
         {"th.vfredosum.vs", THVFREDOSUMVS, FVV, op_V, 0b0000111001, XTheadVector},
         {"th.vfredsum.vs", THVFREDSUMVS, FVV, op_V, 0b0000011001, XTheadVector},
         {"th.vfredmax.vs", THVFREDMAXVS, FVV, op_V, 0b0001111001, XTheadVector},
         {"th.vfredmin.vs", THVFREDMINVS, FVV, op_V, 0b0001011001, XTheadVector},
         {"th.vfwredosum.vs", THVFWREDOSUMVS, FVV, op_V, 0b1100111001, XTheadVector},
         {"th.vfwredsum.vs", THVFWREDSUMVS, FVV, op_V, 0b1100011001, XTheadVector},
         {"th.vmand.mm", THVMANDMM, MVV, op_V, 0b0110011010, XTheadVector},
         {"th.vmnand.mm", THVMNANDMM, MVV, op_V, 0b0111011010, XTheadVector},
         {"th.vmandnot.mm", THVMANDNOTMM, MVV, op_V, 0b0110001010, XTheadVector},
         {"th.vmxor.mm", THVMXORMM, MVV, op_V, 0b0110111010, XTheadVector},
         {"th.vmor.mm", THVMORMM, MVV, op_V, 0b0110101010, XTheadVector},
         {"th.vmnor.mm", THVMNORMM, MVV, op_V, 0b0111101010, XTheadVector},
         {"th.vmornot.mm", THVMORNOTMM, MVV, op_V, 0b0111001010, XTheadVector},
         {"th.vmxnor.mm", THVMXNORMM, MVV, op_V, 0b0111111010, XTheadVector},
         {"th.vmpopc.m", THVMPOPCM, MVV, op_V, 0b0101001010, XTheadVector, {0b00000}},
         {"th.vmfirst.m", THVMFIRSTM, MVV, op_V, 0b0101011010, XTheadVector, {0b00000}},
         {"th.vmsbf.m", THVMSBFM, MVV, op_V, 0b0101101010, XTheadVector, {0b00001}},
         {"th.vmsif.m", THVMSIFM, MVV, op_V, 0b0101101010, XTheadVector, {0b00011}},
         {"th.vmsof.m", THVMSOFM, MVV, op_V, 0b0101101010, XTheadVector, {0b00010}},
         {"th.viota.m", THVIOTAM, MVV, op_V, 0b0101101010, XTheadVector, {0b10000}},
         {"th.vid.v", THVIDV, MVV, op_V, 0b0101101010, XTheadVector, {0b10001}},
         {"th.vmv.s.x", THVMVSX, MVX, op_V, 0b0011011110, XTheadVector, {0b00000, swap_rs1_rs2}},
         {"th.vext.x.v", THVEXTXV, MVV, op_V, 0b0011001010, XTheadVector},
         {"th.vfmv.f.s", THVFMVFS, FVV, op_V, 0b0011001001, XTheadVector, {0b00000}},
         {"th.vfmv.s.f", THVFMVSF, FVF, op_V, 0b0011011101, XTheadVector, {0b00000, swap_rs1_rs2}},
         {"th.vslideup.vx", THVSLIDEUPVX, IVX, op_V, 0b0011101100, XTheadVector},
         {"th.vslideup.vi", THVSLIDEUPVI, IVI, op_V, 0b0011101011, XTheadVector},
         {"th.vslidedown.vx", THVSLIDEDOWNVX, IVX, op_V, 0b0011111100, XTheadVector},
         {"th.vslidedown.vi", THVSLIDEDOWNVI, IVI, op_V, 0b0011111011, XTheadVector},
         {"th.vslide1up.vx", THVSLIDE1UPVX, MVX, op_V, 0b0011101110, XTheadVector},
         {"th.vslide1down.vx", THVSLIDE1DOWNVX, MVX, op_V, 0b0011111110, XTheadVector},
         {"th.vrgather.vv", THVRGATHERVV, IVV, op_V, 0b0011001000, XTheadVector},
         {"th.vrgather.vx", THVRGATHERVX, IVX, op_V, 0b0011001100, XTheadVector},
         {"th.vrgather.vi", THVRGATHERVI, IVI, op_V, 0b0011001011, XTheadVector},
         {"th.vcompress.vm", THVCOMPRESSVM, MVV, op_V, 0b0101111010, XTheadVector}}
};

} // namespace ultrassembler_internal