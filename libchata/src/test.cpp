#include "libchata.hpp"
#include <bitset>

int passed_tests = 0;
int failed_tests = 0;

namespace libchata_internal {

void as(std::string_view input, uint32_t expected_output) {
    libchata::reset_memory_bank();
    chatavector<uint8_t> result;
    try {
        result = assemble_code(input);
    } catch (ChataError& e) {
        std::cout << e.what() << std::endl;
        std::cout << "❌ Test FAILED for " << input << ": expected " << std::hex << expected_output << std::dec << " (" << std::bitset<32>(expected_output) << "), but got an error" << std::endl;
        failed_tests++;
        return;
    }
    uint32_t result_int = 0;

    for (size_t i = 0; i < result.size(); i++) {
        result_int |= static_cast<uint32_t>(result[result.size() - i - 1]) << (i * 8); // Assign everything in reverse
    }

    if (result_int != expected_output) {
        std::cout << "❌ Test FAILED for " << input << ": expected " << std::hex << expected_output << std::dec << " (" << std::bitset<32>(expected_output) << "), but got " << std::hex << result_int
                  << std::dec << " (" << std::bitset<32>(result_int) << ")" << std::endl;
        failed_tests++;
    } else {
        std::cout << "✅ Test passed for " << input << std::endl;
        passed_tests++;
    }
}

void as(std::string_view input, std::vector<uint8_t> expected_output) {
    libchata::reset_memory_bank();
    std::vector<uint8_t> result;
    try {
        auto temp = assemble_code(input);
        result = std::vector<uint8_t>(temp.begin(), temp.end());
    } catch (ChataError& e) {
        std::cout << e.what() << std::endl;
        std::cout << "❌ Test FAILED for " << input << ": expected ";
        for (auto& byte : expected_output) {
            std::cout << std::hex << static_cast<uint32_t>(byte) << " ";
        }
        std::cout << std::dec << " (";
        for (auto& byte : expected_output) {
            std::cout << std::bitset<8>(byte);
        }
        std::cout << "), but got an error" << std::endl;
        return;
    }

    if (result != expected_output) {
        std::cout << "❌ Test FAILED for " << input << ": expected ";
        for (auto& byte : expected_output) {
            std::cout << std::hex << static_cast<uint32_t>(byte) << " ";
        }
        std::cout << std::dec << " (";
        for (auto& byte : expected_output) {
            std::cout << std::bitset<8>(byte);
        }
        std::cout << "), but got ";
        for (auto& byte : result) {
            std::cout << std::hex << static_cast<uint32_t>(byte) << " ";
        }
        std::cout << std::dec << " (";
        for (auto& byte : result) {
            std::cout << std::bitset<8>(byte);
        }
        std::cout << ")" << std::endl;
        failed_tests++;
        return;
    }

    std::cout << "✅ Test passed for " << input << std::endl;
    passed_tests++;
}

} // namespace libchata_internal

using namespace libchata_internal;

int main() {
    std::cout << "Running assembler tests..." << std::endl;
    as(".insn 640", 0x8002);
    as(".insn 5928400", 0xd0755a00);
    as(".insn 0x5780", 0x8057);
    as(".insn 0x40506070", 0x70605040);
    as(".insn 0b1010101010101010", 0xaaaa);
    as(".insn 0b10101010101010101010101010101010", 0xaaaaaaaa);
    as(".equ foo, 640 \n .insn foo", 0x8002);
    as(".equ foo, 5928400 \n .insn foo", 0xd0755a00);
    as(".equ foo, 0x5780 \n .insn foo", 0x8057);
    as(".equ foo, 0x40506070 \n .insn foo", 0x70605040);
    as(".equ foo, 0b1010101010101010 \n .insn foo", 0xaaaa);
    as(".equ foo, 0b10101010101010101010101010101010 \n .insn foo", 0xaaaaaaaa);
    as(".insn 2, 400", 0x9001);
    as(".insn 2, 0x4000", 0x0040);
    as(".insn 2, 0b1000000000000000", 0x0080);
    as(".insn 4, 1398101", 0x55551500);
    as(".insn 4, 0x155555", 0x55551500);
    as(".insn 4, 0b10101010101010101010101010101010", 0xaaaaaaaa);
    as(".equ foo, 2 \n .equ bar, 400 \n .insn foo, bar", 0x9001);
    as(".equ foo, 2 \n .equ bar, 0x4000 \n .insn foo, bar", 0x0040);
    as(".equ foo, 2 \n .equ bar, 0b1000000000000000 \n .insn foo, bar", 0x0080);
    as(".equ foo, 4 \n .equ bar, 1398101 \n .insn foo, bar", 0x55551500);
    as(".equ foo, 4 \n .equ bar, 0x155555 \n .insn foo, bar", 0x55551500);
    as(".equ foo, 4 \n .equ bar, 0b10101010101010101010101010101010 \n .insn foo, bar", 0xaaaaaaaa);
    as(".insn r 0b1011111, 0b111, 0b1111111, x8, x1, x2", 0x5ff420fe);
    as(".insn r4 0b1011111, 0b111, 0b11, x8, x1, x2, x30", 0x5ff420f6);
    as(".insn i 0b1010111, 0b000, x15, x6, 20", 0xd7074301);
    as(".insn i 0b1010111, 0b000, x15, 20(x6)", 0xd7074301);
    as(".insn s 0b1010111, 0b000, x15, 20(x6)", 0x570af300);
    as(".insn b 0b1001011, 0b111, a2, a3, 64", 0x4b70d604);
    as(".insn u 0b000011, x10, 98", 0x03250600);
    as(".insn j 0b1011111, x20, 10", 0x5f0aa000);
    as(".insn cr 0b10, 0b1111, x8, x18", 0x4af4);
    as(".insn ci 0b01, 0b101, t0, 16", 0xc1a2);
    as(".insn ciw 0b10, 0b000, x8, 4", 0x8200);
    as(".insn css 0b10, 0b101, x27, 14", 0x6ea7);
    as(".insn cl 0b10, 0b011, x9, 4(x10)", 0x0665);
    as(".insn cs 0b00, 0b100, x11, 8(x12)", 0x0c8a);
    as(".insn ca 0b10, 0b101010, 0b11, x13, x14", 0xfaaa);
    as(".insn cb 0b00, 0b011, x15, 40", 0x8467);
    as(".insn cj 0b10, 0b000, 40", 0x2600);
    as(".insn r LOAD, 0b111, 0b1111111, x8, x1, x2", 0x03f420fe);
    as(".insn r MADD, 0b111, 0b1111111, x8, x1, x2", 0x43f420fe);
    as(".insn r BRANCH, 0b111, 0b1111111, x8, x1, x2", 0x63f420fe);
    as(".insn r LOAD_FP, 0b111, 0b1111111, x8, x1, x2", 0x07f420fe);
    as(".insn r STORE_FP, 0b111, 0b1111111, x8, x1, x2", 0x27f420fe);
    as(".insn r MSUB, 0b111, 0b1111111, x8, x1, x2", 0x47f420fe);
    as(".insn r JALR, 0b111, 0b1111111, x8, x1, x2", 0x67f420fe);
    as(".insn r CUSTOM_0, 0b111, 0b1111111, x8, x1, x2", 0x0bf420fe);
    as(".insn r CUSTOM_1, 0b111, 0b1111111, x8, x1, x2", 0x2bf420fe);
    as(".insn r NMSUB, 0b111, 0b1111111, x8, x1, x2", 0x4bf420fe);
    as(".insn r RESERVED, 0b111, 0b1111111, x8, x1, x2", 0x6bf420fe);
    as(".insn r MISC_MEM, 0b111, 0b1111111, x8, x1, x2", 0x0ff420fe);
    as(".insn r AMO, 0b111, 0b1111111, x8, x1, x2", 0x2ff420fe);
    as(".insn r NMADD, 0b111, 0b1111111, x8, x1, x2", 0x4ff420fe);
    as(".insn r JAL, 0b111, 0b1111111, x8, x1, x2", 0x6ff420fe);
    as(".insn r IMM, 0b111, 0b1111111, x8, x1, x2", 0x13f420fe);
    as(".insn r OP, 0b111, 0b1111111, x8, x1, x2", 0x33f420fe);
    as(".insn r FP, 0b111, 0b1111111, x8, x1, x2", 0x53f420fe);
    as(".insn r SYSTEM, 0b111, 0b1111111, x8, x1, x2", 0x73f420fe);
    as(".insn r AUIPC, 0b111, 0b1111111, x8, x1, x2", 0x17f420fe);
    as(".insn r LUI, 0b111, 0b1111111, x8, x1, x2", 0x37f420fe);
    as(".insn r V, 0b111, 0b1111111, x8, x1, x2", 0x57f420fe);
    as(".insn r VE, 0b111, 0b1111111, x8, x1, x2", 0x77f420fe);
    as(".insn r IMM_32, 0b111, 0b1111111, x8, x1, x2", 0x1bf420fe);
    as(".insn r OP_32, 0b111, 0b1111111, x8, x1, x2", 0x3bf420fe);
    as(".insn r CUSTOM_2, 0b111, 0b1111111, x8, x1, x2", 0x5bf420fe);
    as(".insn r CUSTOM_3, 0b111, 0b1111111, x8, x1, x2", 0x7bf420fe);
    as(".insn cr C0, 0b1111, x8, x18", 0x48f4);
    as(".insn cr C1, 0b1111, x8, x18", 0x49f4);
    as(".insn cr C2, 0b1111, x8, x18", 0x4af4);
    as("addi x5, zero, %lo(0xFFFFF)", 0x9302f0ff);
    as("addi x10, x4, %lo(2370)", 0x13052294);
    as("addi x11, x5, %lo(0b1010101010101010101)", 0x93855255);
    as(".equ foo, 0xFFFFF \n addi x5, zero, %lo(foo)", 0x9302f0ff);
    as(".equ foo, 2370 \n addi x10, x4, %lo(foo)", 0x13052294);
    as(".equ foo, 0b1010101010101010101 \n addi x11, x5, %lo(foo)", 0x93855255);
    as("lui a0, 12345", 0x37950303);
    as("lui a0, 0x12345", 0x37553412);
    as("lui a0, 0b100", 0x37450000);
    as(".equ foo, 12345 \n lui a0, foo", 0x37950303);
    as(".equ foo, 0x12345 \n lui a0, foo", 0x37553412);
    as(".equ foo, 0b100 \n lui a0, foo", 0x37450000);
    as("auipc t0, 0b100", 0x97420000);
    as("auipc t0, 100", 0x97420600);
    as("auipc t0, 0x100", 0x97021000);
    as(".equ foo, 0b100 \n auipc t0, foo", 0x97420000);
    as(".equ foo, 100 \n auipc t0, foo", 0x97420600);
    as(".equ foo, 0x100 \n auipc t0, foo", 0x97021000);
    as("jal zero, 4", 0x6f004000);
    as("jalr zero, 4(a0)", 0x67004500);
    as("jalr x0, a0, 4", 0x67004500);
    as("jalr x0, -800(a0)", 0x670005ce);
    as("jalr x0, a0, -800", 0x670005ce);
    as(".equ foo, 4 \n jalr zero, foo(a0)", 0x67004500);
    as(".equ foo, 4 \n jalr x0, a0, foo", 0x67004500);
    as(".equ foo, -800 \n jalr x0, foo(a0)", 0x670005ce);
    as(".equ foo, -800 \n jalr x0, a0, foo", 0x670005ce);
    as("beq s1, t6, 40", 0x6384f403);
    as("beq s1, t6, -40", 0xe38cf4fd);
    as("bne s0, a2, 36", 0x6312c402);
    as("blt t4, t5, 16", 0x6398ee01);
    as("bge t3, t2, 12", 0x63467e00);
    as("bltu t1, t0, 8", 0x63545300);
    as("bgeu s2, s3, 4", 0x63623901);
    as("lb a0, a1, 0", 0x03850500);
    as(".equ foo, 0 \n lb a0, a1, foo", 0x03850500);
    as("lb a0, 0(a1)", 0x03850500);
    as(".equ foo, 0 \n lb a0, foo(a1)", 0x03850500);
    as("lh a1, a2, 0", 0x83150600);
    as(".equ foo, 0 \n lh a1, a2, foo", 0x83150600);
    as("#foo\nlh a1, a2, 0", 0x83150600);
    as(".equ foo, 0 \n lh a1, foo(a2)", 0x83150600);
    as("lh a1, 0(a2)", 0x83150600);
    as("lw a2, a3, 0", 0x03a60600);
    as("lw a2, 0(a3)", 0x03a60600);
    as("lbu a3, a4, 0", 0x83460700);
    as("lbu a3, 0(a4)", 0x83460700);
    as("lhu a4, a5, 0", 0x03d70700);
    as("lhu a4, 0(a5)", 0x03d70700);
    as("sb a5, a6, 0", 0x2300f800);
    as("sb a5, 0(a6)", 0x2300f800);
    as("sh a6, a7, 0", 0x23900801);
    as("sh a6, 0(a7)", 0x23900801);
    as("sw a7, s0, 0", 0x23201401);
    as("sw a7, 0(s0)", 0x23201401);
    as("addi a0, a1, 10", 0x1385a500);
    as("addi a0, a1, 10 # This should be the same", 0x1385a500);
    as("addi a0, a1, -10", 0x138565ff);
    as("addi t0, a0, 0x30", 0x93020503);
    as("addi t0, a0, -0x30", 0x930205fd);
    as(".equ foo, 10 \n addi a0, a1, foo", 0x1385a500);
    as(".equ foo, -10 \n addi a0, a1, foo", 0x138565ff);
    as(".equ foo, 0x30 \n addi t0, a0, foo", 0x93020503);
    as(".equ foo, -0x30 \n addi t0, a0, foo", 0x930205fd);
    as("slti a0, a1, 10", 0x13a5a500);
    as("sltiu a4, a4, 10", 0x1337a700);
    as("srli a2, a2, 8", 0x13568600);
    as("srai a3, a3, 16", 0x93d60641);
    as("add a0, a1, a2", 0x3385c500);
    as("sub a1, a2, a3", 0xb305d640);
    as("sll a2, a3, a4", 0x3396e600);
    as("slt a3, a4, a5", 0xb326f700);
    as("sltu a4, a5, a6", 0x33b70701);
    as("xor a5, a6, a7", 0xb3471801);
    as("srl a6, a7, t0", 0x33d85800);
    as("sra a7, t0, t1", 0xb3d86240);
    as("or t0, t1, t2", 0xb3627300);
    as("and t1, t2, t3", 0x33f3c301);
    as("fence rw, rw", 0x0f003003);
    as("fence.tso", 0x0f003083);
    as("pause", 0x0f000001);
    as("ecall", 0x73000000);
    as("ebreak", 0x73001000);
    as("lwu a0, 0(a1)", 0x03e50500);
    as("ld s0, 0(s1)", 0x03b40400);
    as("sd s1, 0(s2)", 0x23309900);
    as("addiw s2, s3, 10", 0x1b89a900);
    as("slliw s3, s4, 8", 0x9b198a00);
    as("srliw s4, s5, 16", 0x1bda0a01);
    as("sraiw s5, s6, 24", 0x9b5a8b41);
    as("addw s6, s7, s0", 0x3b8b8b00);
    as("subw s7, t0, t1", 0xbb8b6240);
    as("sllw t0, t1, t2", 0xbb127300);
    as("srlw t1, t2, t3", 0x3bd3c301);
    as("sraw t2, t3, t4", 0xbb53de41);
    as("mul t3, t4, t5", 0x338eee03);
    as("mulh t4, t5, t6", 0xb31eff03);
    as("mulhsu t5, t6, t6", 0x33afff03);
    as("mulhu x0, x1, x2", 0x33b02002);
    as("div x3, x4, x5", 0xb3415202);
    as("divu x4, x5, x6", 0x33d26202);
    as("rem x5, x6, x7", 0xb3627302);
    as("remu x6, x7, x8", 0x33f38302);
    as("mulw x7, x8, x9", 0xbb039402);
    as("divw x8, x9, x10", 0x3bc4a402);
    as("divuw x9, x10, x11", 0xbb54b502);
    as("remw x10, x11, x12", 0x3be5c502);
    as("remuw x11, x12, x13", 0xbb75d602);
    as("lr.w a0, a1", 0x2fa50510);
    as("lr.w a0, (a1)", 0x2fa50510);
    as("lr.w a0, 0(a1)", 0x2fa50510);
    as("sc.w a2, a3, a4", 0x2f26d718);
    as("sc.w a2, a3, (a4)", 0x2f26d718);
    as("sc.w a2, a3, 0(a4)", 0x2f26d718);
    as("lr.w.aq a5, a6", 0xaf270814);
    as("lr.w.aq a5, (a6)", 0xaf270814);
    as("lr.w.aq a5, 0(a6)", 0xaf270814);
    as("sc.w.aq a7, s0, s1", 0xafa8841c);
    as("sc.w.aq a7, s0, (s1)", 0xafa8841c);
    as("sc.w.aq a7, s0, 0(s1)", 0xafa8841c);
    as("lr.w.rl s2, s3", 0x2fa90912);
    as("lr.w.rl s2, (s3)", 0x2fa90912);
    as("lr.w.rl s2, 0(s3)", 0x2fa90912);
    as("sc.w.rl s4, s5, s6", 0x2f2a5b1b);
    as("sc.w.rl s4, s5, (s6)", 0x2f2a5b1b);
    as("sc.w.rl s4, s5, 0(s6)", 0x2f2a5b1b);
    as("lr.w.aqrl s7, s0", 0xaf2b0416);
    as("lr.w.aqrl s7, (s0)", 0xaf2b0416);
    as("lr.w.aqrl s7, 0(s0)", 0xaf2b0416);
    as("sc.w.aqrl s1, s2, s3", 0xafa4291f);
    as("sc.w.aqrl s1, s2, (s3)", 0xafa4291f);
    as("sc.w.aqrl s1, s2, 0(s3)", 0xafa4291f);
    as("amoswap.w s4, s5, s6", 0x2f2a5b09);
    as("amoswap.w s4, s5, (s6)", 0x2f2a5b09);
    as("amoswap.w s4, s5, 0(s6)", 0x2f2a5b09);
    as("amoadd.w s7, s0, s1", 0xafab8400);
    as("amoadd.w s7, s0, (s1)", 0xafab8400);
    as("amoadd.w s7, s0, 0(s1)", 0xafab8400);
    as("amoxor.w s2, s3, s4", 0x2f293a21);
    as("amoxor.w s2, s3, (s4)", 0x2f293a21);
    as("amoxor.w s2, s3, 0(s4)", 0x2f293a21);
    as("amoand.w s5, s6, s7", 0xafaa6b61);
    as("amoand.w s5, s6, (s7)", 0xafaa6b61);
    as("amoand.w s5, s6, 0(s7)", 0xafaa6b61);
    as("amoor.w x0, x1, x2", 0x2f201140);
    as("amoor.w x0, x1, (x2)", 0x2f201140);
    as("amoor.w x0, x1, 0(x2)", 0x2f201140);
    as("amomin.w x3, x4, x5", 0xafa14280);
    as("amomin.w x3, x4, (x5)", 0xafa14280);
    as("amomin.w x3, x4, 0(x5)", 0xafa14280);
    as("amomax.w x6, x7, x8", 0x2f2374a0);
    as("amomax.w x6, x7, (x8)", 0x2f2374a0);
    as("amomax.w x6, x7, 0(x8)", 0x2f2374a0);
    as("amominu.w x9, x10, x11", 0xafa4a5c0);
    as("amominu.w x9, x10, (x11)", 0xafa4a5c0);
    as("amominu.w x9, x10, 0(x11)", 0xafa4a5c0);
    as("amomaxu.w x12, x13, x14", 0x2f26d7e0);
    as("amomaxu.w x12, x13, (x14)", 0x2f26d7e0);
    as("amomaxu.w x12, x13, 0(x14)", 0x2f26d7e0);
    as("amoswap.w.aq x15, x16, x17", 0xafa7080d);
    as("amoswap.w.aq x15, x16, (x17)", 0xafa7080d);
    as("amoswap.w.aq x15, x16, 0(x17)", 0xafa7080d);
    as("amoadd.w.aq x18, x19, x20", 0x2f293a05);
    as("amoadd.w.aq x18, x19, (x20)", 0x2f293a05);
    as("amoadd.w.aq x18, x19, 0(x20)", 0x2f293a05);
    as("amoxor.w.aq x21, x22, x23", 0xafaa6b25);
    as("amoxor.w.aq x21, x22, (x23)", 0xafaa6b25);
    as("amoxor.w.aq x21, x22, 0(x23)", 0xafaa6b25);
    as("amoand.w.aq x24, x25, x26", 0x2f2c9d65);
    as("amoand.w.aq x24, x25, (x26)", 0x2f2c9d65);
    as("amoand.w.aq x24, x25, 0(x26)", 0x2f2c9d65);
    as("amoor.w.aq x27, x28, x29", 0xafadce45);
    as("amoor.w.aq x27, x28, (x29)", 0xafadce45);
    as("amoor.w.aq x27, x28, 0(x29)", 0xafadce45);
    as("amomin.w.aq x30, x31, x0", 0x2f2ff085);
    as("amomin.w.aq x30, x31, (x0)", 0x2f2ff085);
    as("amomin.w.aq x30, x31, 0(x0)", 0x2f2ff085);
    as("amomax.w.aq x1, x2, x3", 0xafa021a4);
    as("amomax.w.aq x1, x2, (x3)", 0xafa021a4);
    as("amomax.w.aq x1, x2, 0(x3)", 0xafa021a4);
    as("amominu.w.aq x4, x5, x6", 0x2f2253c4);
    as("amominu.w.aq x4, x5, (x6)", 0x2f2253c4);
    as("amominu.w.aq x4, x5, 0(x6)", 0x2f2253c4);
    as("amomaxu.w.aq x7, x8, x9", 0xafa384e4);
    as("amomaxu.w.aq x7, x8, (x9)", 0xafa384e4);
    as("amomaxu.w.aq x7, x8, 0(x9)", 0xafa384e4);
    as("amoswap.w.rl x10, x11, x12", 0x2f25b60a);
    as("amoswap.w.rl x10, x11, (x12)", 0x2f25b60a);
    as("amoswap.w.rl x10, x11, 0(x12)", 0x2f25b60a);
    as("amoadd.w.rl x13, x14, x15", 0xafa6e702);
    as("amoadd.w.rl x13, x14, (x15)", 0xafa6e702);
    as("amoadd.w.rl x13, x14, 0(x15)", 0xafa6e702);
    as("amoxor.w.rl x16, x17, x18", 0x2f281923);
    as("amoxor.w.rl x16, x17, (x18)", 0x2f281923);
    as("amoxor.w.rl x16, x17, 0(x18)", 0x2f281923);
    as("amoand.w.rl x19, x20, x21", 0xafa94a63);
    as("amoand.w.rl x19, x20, (x21)", 0xafa94a63);
    as("amoand.w.rl x19, x20, 0(x21)", 0xafa94a63);
    as("amoor.w.rl x22, x23, x24", 0x2f2b7c43);
    as("amoor.w.rl x22, x23, (x24)", 0x2f2b7c43);
    as("amoor.w.rl x22, x23, 0(x24)", 0x2f2b7c43);
    as("amomin.w.rl x25, x26, x27", 0xafacad83);
    as("amomin.w.rl x25, x26, (x27)", 0xafacad83);
    as("amomin.w.rl x25, x26, 0(x27)", 0xafacad83);
    as("amomax.w.rl x28, x29, x30", 0x2f2edfa3);
    as("amomax.w.rl x28, x29, (x30)", 0x2f2edfa3);
    as("amomax.w.rl x28, x29, 0(x30)", 0x2f2edfa3);
    as("amominu.w.rl x31, x0, x1", 0xafaf00c2);
    as("amominu.w.rl x31, x0, (x1)", 0xafaf00c2);
    as("amominu.w.rl x31, x0, 0(x1)", 0xafaf00c2);
    as("amomaxu.w.rl x2, x3, x4", 0x2f2132e2);
    as("amomaxu.w.rl x2, x3, (x4)", 0x2f2132e2);
    as("amomaxu.w.rl x2, x3, 0(x4)", 0x2f2132e2);
    as("amoswap.w.aqrl x5, x6, x7", 0xafa2630e);
    as("amoswap.w.aqrl x5, x6, (x7)", 0xafa2630e);
    as("amoswap.w.aqrl x5, x6, 0(x7)", 0xafa2630e);
    as("amoadd.w.aqrl x8, x9, x10", 0x2f249506);
    as("amoadd.w.aqrl x8, x9, (x10)", 0x2f249506);
    as("amoadd.w.aqrl x8, x9, 0(x10)", 0x2f249506);
    as("amoxor.w.aqrl x11, x12, x13", 0xafa5c626);
    as("amoxor.w.aqrl x11, x12, (x13)", 0xafa5c626);
    as("amoxor.w.aqrl x11, x12, 0(x13)", 0xafa5c626);
    as("amoand.w.aqrl x14, x15, x16", 0x2f27f866);
    as("amoand.w.aqrl x14, x15, (x16)", 0x2f27f866);
    as("amoand.w.aqrl x14, x15, 0(x16)", 0x2f27f866);
    as("amoor.w.aqrl x17, x18, x19", 0xafa82947);
    as("amoor.w.aqrl x17, x18, (x19)", 0xafa82947);
    as("amoor.w.aqrl x17, x18, 0(x19)", 0xafa82947);
    as("amomin.w.aqrl x20, x21, x22", 0x2f2a5b87);
    as("amomin.w.aqrl x20, x21, (x22)", 0x2f2a5b87);
    as("amomin.w.aqrl x20, x21, 0(x22)", 0x2f2a5b87);
    as("amomax.w.aqrl x23, x24, x25", 0xafab8ca7);
    as("amomax.w.aqrl x23, x24, (x25)", 0xafab8ca7);
    as("amomax.w.aqrl x23, x24, 0(x25)", 0xafab8ca7);
    as("amominu.w.aqrl x26, x27, x28", 0x2f2dbec7);
    as("amominu.w.aqrl x26, x27, (x28)", 0x2f2dbec7);
    as("amominu.w.aqrl x26, x27, 0(x28)", 0x2f2dbec7);
    as("amomaxu.w.aqrl x29, x30, x31", 0xafaeefe7);
    as("amomaxu.w.aqrl x29, x30, (x31)", 0xafaeefe7);
    as("amomaxu.w.aqrl x29, x30, 0(x31)", 0xafaeefe7);
    as("lr.d a0, a1", 0x2fb50510);
    as("lr.d a0, (a1)", 0x2fb50510);
    as("lr.d a0, 0(a1)", 0x2fb50510);
    as("sc.d a2, a3, a4", 0x2f36d718);
    as("sc.d a2, a3, (a4)", 0x2f36d718);
    as("sc.d a2, a3, 0(a4)", 0x2f36d718);
    as("lr.d.aq a5, a6", 0xaf370814);
    as("lr.d.aq a5, (a6)", 0xaf370814);
    as("lr.d.aq a5, 0(a6)", 0xaf370814);
    as("sc.d.aq a7, s0, s1", 0xafb8841c);
    as("sc.d.aq a7, s0, (s1)", 0xafb8841c);
    as("sc.d.aq a7, s0, 0(s1)", 0xafb8841c);
    as("lr.d.rl s2, s3", 0x2fb90912);
    as("lr.d.rl s2, (s3)", 0x2fb90912);
    as("lr.d.rl s2, 0(s3)", 0x2fb90912);
    as("sc.d.rl s4, s5, s6", 0x2f3a5b1b);
    as("sc.d.rl s4, s5, (s6)", 0x2f3a5b1b);
    as("sc.d.rl s4, s5, 0(s6)", 0x2f3a5b1b);
    as("lr.d.aqrl s7, s0", 0xaf3b0416);
    as("lr.d.aqrl s7, (s0)", 0xaf3b0416);
    as("lr.d.aqrl s7, 0(s0)", 0xaf3b0416);
    as("sc.d.aqrl s1, s2, s3", 0xafb4291f);
    as("sc.d.aqrl s1, s2, (s3)", 0xafb4291f);
    as("sc.d.aqrl s1, s2, 0(s3)", 0xafb4291f);
    as("amoswap.d s4, s5, s6", 0x2f3a5b09);
    as("amoswap.d s4, s5, (s6)", 0x2f3a5b09);
    as("amoswap.d s4, s5, 0(s6)", 0x2f3a5b09);
    as("amoadd.d s7, s0, s1", 0xafbb8400);
    as("amoadd.d s7, s0, (s1)", 0xafbb8400);
    as("amoadd.d s7, s0, 0(s1)", 0xafbb8400);
    as("amoxor.d s2, s3, s4", 0x2f393a21);
    as("amoxor.d s2, s3, (s4)", 0x2f393a21);
    as("amoxor.d s2, s3, 0(s4)", 0x2f393a21);
    as("amoand.d s5, s6, s7", 0xafba6b61);
    as("amoand.d s5, s6, (s7)", 0xafba6b61);
    as("amoand.d s5, s6, 0(s7)", 0xafba6b61);
    as("amoor.d x0, x1, x2", 0x2f301140);
    as("amoor.d x0, x1, (x2)", 0x2f301140);
    as("amoor.d x0, x1, 0(x2)", 0x2f301140);
    as("amomin.d x3, x4, x5", 0xafb14280);
    as("amomin.d x3, x4, (x5)", 0xafb14280);
    as("amomin.d x3, x4, 0(x5)", 0xafb14280);
    as("amomax.d x6, x7, x8", 0x2f3374a0);
    as("amomax.d x6, x7, (x8)", 0x2f3374a0);
    as("amomax.d x6, x7, 0(x8)", 0x2f3374a0);
    as("amominu.d x9, x10, x11", 0xafb4a5c0);
    as("amominu.d x9, x10, (x11)", 0xafb4a5c0);
    as("amominu.d x9, x10, 0(x11)", 0xafb4a5c0);
    as("amomaxu.d x12, x13, x14", 0x2f36d7e0);
    as("amomaxu.d x12, x13, (x14)", 0x2f36d7e0);
    as("amomaxu.d x12, x13, 0(x14)", 0x2f36d7e0);
    as("amoswap.d.aq x15, x16, x17", 0xafb7080d);
    as("amoswap.d.aq x15, x16, (x17)", 0xafb7080d);
    as("amoswap.d.aq x15, x16, 0(x17)", 0xafb7080d);
    as("amoadd.d.aq x18, x19, x20", 0x2f393a05);
    as("amoadd.d.aq x18, x19, (x20)", 0x2f393a05);
    as("amoadd.d.aq x18, x19, 0(x20)", 0x2f393a05);
    as("amoxor.d.aq x21, x22, x23", 0xafba6b25);
    as("amoxor.d.aq x21, x22, (x23)", 0xafba6b25);
    as("amoxor.d.aq x21, x22, 0(x23)", 0xafba6b25);
    as("amoand.d.aq x24, x25, x26", 0x2f3c9d65);
    as("amoand.d.aq x24, x25, (x26)", 0x2f3c9d65);
    as("amoand.d.aq x24, x25, 0(x26)", 0x2f3c9d65);
    as("amoor.d.aq x27, x28, x29", 0xafbdce45);
    as("amoor.d.aq x27, x28, (x29)", 0xafbdce45);
    as("amoor.d.aq x27, x28, 0(x29)", 0xafbdce45);
    as("amomin.d.aq x30, x31, x0", 0x2f3ff085);
    as("amomin.d.aq x30, x31, (x0)", 0x2f3ff085);
    as("amomin.d.aq x30, x31, 0(x0)", 0x2f3ff085);
    as("amomax.d.aq x1, x2, x3", 0xafb021a4);
    as("amomax.d.aq x1, x2, (x3)", 0xafb021a4);
    as("amomax.d.aq x1, x2, 0(x3)", 0xafb021a4);
    as("amominu.d.aq x4, x5, x6", 0x2f3253c4);
    as("amominu.d.aq x4, x5, (x6)", 0x2f3253c4);
    as("amominu.d.aq x4, x5, 0(x6)", 0x2f3253c4);
    as("amomaxu.d.aq x7, x8, x9", 0xafb384e4);
    as("amomaxu.d.aq x7, x8, (x9)", 0xafb384e4);
    as("amomaxu.d.aq x7, x8, 0(x9)", 0xafb384e4);
    as("amoswap.d.rl x10, x11, x12", 0x2f35b60a);
    as("amoswap.d.rl x10, x11, (x12)", 0x2f35b60a);
    as("amoswap.d.rl x10, x11, 0(x12)", 0x2f35b60a);
    as("amoadd.d.rl x13, x14, x15", 0xafb6e702);
    as("amoadd.d.rl x13, x14, (x15)", 0xafb6e702);
    as("amoadd.d.rl x13, x14, 0(x15)", 0xafb6e702);
    as("amoxor.d.rl x16, x17, x18", 0x2f381923);
    as("amoxor.d.rl x16, x17, (x18)", 0x2f381923);
    as("amoxor.d.rl x16, x17, 0(x18)", 0x2f381923);
    as("amoand.d.rl x19, x20, x21", 0xafb94a63);
    as("amoand.d.rl x19, x20, (x21)", 0xafb94a63);
    as("amoand.d.rl x19, x20, 0(x21)", 0xafb94a63);
    as("amoor.d.rl x22, x23, x24", 0x2f3b7c43);
    as("amoor.d.rl x22, x23, (x24)", 0x2f3b7c43);
    as("amoor.d.rl x22, x23, 0(x24)", 0x2f3b7c43);
    as("amomin.d.rl x25, x26, x27", 0xafbcad83);
    as("amomin.d.rl x25, x26, (x27)", 0xafbcad83);
    as("amomin.d.rl x25, x26, 0(x27)", 0xafbcad83);
    as("amomax.d.rl x28, x29, x30", 0x2f3edfa3);
    as("amomax.d.rl x28, x29, (x30)", 0x2f3edfa3);
    as("amomax.d.rl x28, x29, 0(x30)", 0x2f3edfa3);
    as("amominu.d.rl t0, a0, s0", 0xaf32a4c2);
    as("amominu.d.rl t0, a0, (s0)", 0xaf32a4c2);
    as("amominu.d.rl t0, a0, 0(s0)", 0xaf32a4c2);
    as("amomaxu.d.rl t1, a1, s1", 0x2fb3b4e2);
    as("amomaxu.d.rl t1, a1, (s1)", 0x2fb3b4e2);
    as("amomaxu.d.rl t1, a1, 0(s1)", 0x2fb3b4e2);
    as("amoswap.d.aqrl t2, a2, s2", 0xaf33c90e);
    as("amoswap.d.aqrl t2, a2, (s2)", 0xaf33c90e);
    as("amoswap.d.aqrl t2, a2, 0(s2)", 0xaf33c90e);
    as("amoadd.d.aqrl t3, a3, s3", 0x2fbed906);
    as("amoadd.d.aqrl t3, a3, (s3)", 0x2fbed906);
    as("amoadd.d.aqrl t3, a3, 0(s3)", 0x2fbed906);
    as("amoxor.d.aqrl t4, a4, s4", 0xaf3eea26);
    as("amoxor.d.aqrl t4, a4, (s4)", 0xaf3eea26);
    as("amoxor.d.aqrl t4, a4, 0(s4)", 0xaf3eea26);
    as("amoand.d.aqrl t5, a5, s5", 0x2fbffa66);
    as("amoand.d.aqrl t5, a5, (s5)", 0x2fbffa66);
    as("amoand.d.aqrl t5, a5, 0(s5)", 0x2fbffa66);
    as("amoor.d.aqrl t6, a6, s6", 0xaf3f0b47);
    as("amoor.d.aqrl t6, a6, (s6)", 0xaf3f0b47);
    as("amoor.d.aqrl t6, a6, 0(s6)", 0xaf3f0b47);
    as("amomin.d.aqrl a0, t0, s0", 0x2f355486);
    as("amomin.d.aqrl a0, t0, (s0)", 0x2f355486);
    as("amomin.d.aqrl a0, t0, 0(s0)", 0x2f355486);
    as("amomax.d.aqrl a1, t1, s1", 0xafb564a6);
    as("amomax.d.aqrl a1, t1, (s1)", 0xafb564a6);
    as("amomax.d.aqrl a1, t1, 0(s1)", 0xafb564a6);
    as("amominu.d.aqrl a2, t2, s2", 0x2f3679c6);
    as("amominu.d.aqrl a2, t2, (s2)", 0x2f3679c6);
    as("amominu.d.aqrl a2, t2, 0(s2)", 0x2f3679c6);
    as("amomaxu.d.aqrl a3, t3, s3", 0xafb6c9e7);
    as("amomaxu.d.aqrl a3, t3, (s3)", 0xafb6c9e7);
    as("amomaxu.d.aqrl a3, t3, 0(s3)", 0xafb6c9e7);
    as("fmadd.s f0, f1, f2, f3", 0x43f02018);
    as("fmadd.s x0, x1, x2, x3", 0x43f02018); // x registers in f instruction = Zfinx
    as("fmsub.s f4, f5, f6, f7", 0x47f26238);
    as("fmsub.s x4, x5, x6, x7", 0x47f26238);
    as("fnmsub.s f8, f9, f10, f11", 0x4bf4a458);
    as("fnmsub.s x8, x9, x10, x11", 0x4bf4a458);
    as("fnmadd.s f12, f13, f14, f15", 0x4ff6e678);
    as("fnmadd.s x12, x13, x14, x15", 0x4ff6e678);
    as("fadd.s f16, f17, f18", 0x53f82801);
    as("fadd.s x16, x17, x18", 0x53f82801);
    as("fsub.s f19, f20, f21", 0xd3795a09);
    as("fsub.s x19, x20, x21", 0xd3795a09);
    as("fmul.s f22, f23, f24", 0x53fb8b11);
    as("fmul.s x22, x23, x24", 0x53fb8b11);
    as("fdiv.s f25, f26, f27", 0xd37cbd19);
    as("fdiv.s x25, x26, x27", 0xd37cbd19);
    as("fsqrt.s f28, f29", 0x53fe0e58);
    as("fsqrt.s x28, x29", 0x53fe0e58);
    as("fsgnj.s f30, f31, f0", 0x538f0f20);
    as("fsgnj.s x30, x31, x0", 0x538f0f20);
    as("fsgnjn.s f1, f2, f3", 0xd3103120);
    as("fsgnjn.s x1, x2, x3", 0xd3103120);
    as("fsgnjx.s f4, f5, f6", 0x53a26220);
    as("fsgnjx.s x4, x5, x6", 0x53a26220);
    as("fmin.s f7, f8, f9", 0xd3039428);
    as("fmin.s x7, x8, x9", 0xd3039428);
    as("fmax.s f10, f11, f12", 0x5395c528);
    as("fmax.s x10, x11, x12", 0x5395c528);
    as("fcvt.w.s a0, f0", 0x537500c0);
    as("fcvt.w.s a0, x0", 0x537500c0);
    as("fcvt.wu.s a1, f1", 0xd3f510c0);
    as("fcvt.wu.s a1, x1", 0xd3f510c0);
    as("fmv.x.w a2, f2", 0x530601e0);
    as("feq.s a3, f3, f4", 0xd3a641a0);
    as("feq.s a3, x3, x4", 0xd3a641a0);
    as("flt.s a4, f4, f5", 0x531752a0);
    as("flt.s a4, x4, x5", 0x531752a0);
    as("fle.s a5, f5, f6", 0xd38762a0);
    as("fle.s a5, x5, x6", 0xd38762a0);
    as("fclass.s a6, f6", 0x531803e0);
    as("fclass.s a6, x6", 0x531803e0);
    as("fcvt.s.w f7, a7", 0xd3f308d0);
    as("fcvt.s.w x7, a7", 0xd3f308d0);
    as("fcvt.s.wu f8, s0", 0x537414d0);
    as("fcvt.s.wu x8, s0", 0x537414d0);
    as("fmv.w.x f9, s1", 0xd38404f0);
    as("flw f10, 0(a0)", 0x07250500);
    as("fsw f11, 0(a1)", 0x27a0b500);
    as("fcvt.l.s a2, f12", 0x537626c0);
    as("fcvt.l.s a2, x12", 0x537626c0);
    as("fcvt.lu.s a3, f13", 0xd3f636c0);
    as("fcvt.lu.s a3, x13", 0xd3f636c0);
    as("fcvt.s.l f14, a4", 0x537727d0);
    as("fcvt.s.l x14, a4", 0x537727d0);
    as("fcvt.s.lu f15, a5", 0xd3f737d0);
    as("fcvt.s.lu x15, a5", 0xd3f737d0);
    as("fadd.d f16, f17, f18", 0x53f82803);
    as("fadd.d x16, x17, x18", 0x53f82803);
    as("fmadd.d f19, f20, f21, f22", 0xc3795ab3);
    as("fmadd.d x19, x20, x21, x22", 0xc3795ab3);
    as("fmax.d f23, f24, f25", 0xd31b9c2b);
    as("fmax.d x23, x24, x25", 0xd31b9c2b);
    as("fclass.d a0, f23", 0x53950be2);
    as("fclass.d a0, x23", 0x53950be2);
    as("fcvt.d.s fa0, fa1", 0x53f50542);
    as("fcvt.d.s x10, x11", 0x53f50542);
    as("fcvt.d.w fa2, a1", 0x53f605d2);
    as("fcvt.d.w x12, a1", 0x53f605d2);
    as("fcvt.d.wu fa3, a2", 0xd37616d2);
    as("fcvt.d.wu x13, a2", 0xd37616d2);
    as("fcvt.s.d f24, f25", 0x53fc1c40);
    as("fcvt.s.d x24, x25", 0x53fc1c40);
    as("fcvt.w.d a4, f26", 0x53770dc2);
    as("fcvt.w.d a4, x26", 0x53770dc2);
    as("fcvt.wu.d a5, f27", 0xd3f71dc2);
    as("fcvt.wu.d a5, x27", 0xd3f71dc2);
    as("fdiv.d f28, f29, f30", 0x53feee1b);
    as("fdiv.d x28, x29, x30", 0x53feee1b);
    as("feq.d t3, f0, f1", 0x532e10a2);
    as("feq.d t3, x0, x1", 0x532e10a2);
    as("flt.d t4, f2, f3", 0xd31e31a2);
    as("flt.d t4, x2, x3", 0xd31e31a2);
    as("fle.d t5, f4, f5", 0x530f52a2);
    as("fle.d t5, x4, x5", 0x530f52a2);
    as("fld f6, 4(a6)", 0x07334800);
    as("fmin.d f7, f8, f9", 0xd303942a);
    as("fmin.d x7, x8, x9", 0xd303942a);
    as("fmsub.d f10, f11, f12, f13", 0x47f5c56a);
    as("fmsub.d x10, x11, x12, x13", 0x47f5c56a);
    as("fmul.d f14, f15, f16", 0x53f70713);
    as("fmul.d x14, x15, x16", 0x53f70713);
    as("fnmadd.d f17, f18, f19, f20", 0xcf7839a3);
    as("fnmadd.d x17, x18, x19, x20", 0xcf7839a3);
    as("fnmsub.d f21, f22, f23, f24", 0xcb7a7bc3);
    as("fnmsub.d x21, x22, x23, x24", 0xcb7a7bc3);
    as("fsd f25, 8(a7)", 0x27b49801);
    as("fsgnj.d f26, f27, f28", 0x538dcd23);
    as("fsgnj.d x26, x27, x28", 0x538dcd23);
    as("fsgnjn.d f29, f30, f31", 0xd31eff23);
    as("fsgnjn.d x29, x30, x31", 0xd31eff23);
    as("fsgnjx.d f0, f1, f2", 0x53a02022);
    as("fsgnjx.d x0, x1, x2", 0x53a02022);
    as("fsqrt.d f3, f4", 0xd371025a);
    as("fsqrt.d x3, x4", 0xd371025a);
    as("fsub.d f5, f6, f7", 0xd372730a);
    as("fsub.d x5, x6, x7", 0xd372730a);
    as("fcvt.l.d a0, f8", 0x537524c2);
    as("fcvt.l.d a0, x8", 0x537524c2);
    as("fcvt.lu.d a1, f9", 0xd3f534c2);
    as("fcvt.lu.d a1, x9", 0xd3f534c2);
    as("fmv.x.d a2, f10", 0x530605e2);
    as("fcvt.d.l f11, a3", 0xd3f526d2);
    as("fcvt.d.l x11, a3", 0xd3f526d2);
    as("fcvt.d.lu f12, a4", 0x537637d2);
    as("fcvt.d.lu x12, a4", 0x537637d2);
    as("fmv.d.x f13, a5", 0xd38607f2);
    as("flq f14, 0(a6)", 0x07470800);
    as("fsq f15, 8(a7)", 0x27c4f800);
    as("fmadd.q f16, f17, f18, f19", 0x43f8289f);
    as("fmadd.q x16, x17, x18, x19", 0x43f8289f);
    as("fmsub.q f20, f21, f22, f23", 0x47fa6abf);
    as("fmsub.q x20, x21, x22, x23", 0x47fa6abf);
    as("fnmsub.q f24, f25, f26, f27", 0x4bfcacdf);
    as("fnmsub.q x24, x25, x26, x27", 0x4bfcacdf);
    as("fnmadd.q f28, f29, f30, f31", 0x4ffeeeff);
    as("fnmadd.q x28, x29, x30, x31", 0x4ffeeeff);
    as("fadd.q f0, f1, f2", 0x53f02006);
    as("fadd.q x0, x1, x2", 0x53f02006);
    as("fsub.q f3, f4, f5", 0xd371520e);
    as("fsub.q x3, x4, x5", 0xd371520e);
    as("fmul.q f6, f7, f8", 0x53f38316);
    as("fmul.q x6, x7, x8", 0x53f38316);
    as("fdiv.q f9, f10, f11", 0xd374b51e);
    as("fdiv.q x9, x10, x11", 0xd374b51e);
    as("fsqrt.q f12, f13", 0x53f6065e);
    as("fsqrt.q x12, x13", 0x53f6065e);
    as("fsgnj.q f14, f15, f16", 0x53870727);
    as("fsgnj.q x14, x15, x16", 0x53870727);
    as("fsgnjn.q f17, f18, f19", 0xd3183927);
    as("fsgnjn.q x17, x18, x19", 0xd3183927);
    as("fsgnjx.q f20, f21, f22", 0x53aa6a27);
    as("fsgnjx.q x20, x21, x22", 0x53aa6a27);
    as("fmin.q f23, f24, f25", 0xd30b9c2f);
    as("fmin.q x23, x24, x25", 0xd30b9c2f);
    as("fmax.q f26, f27, f28", 0x539dcd2f);
    as("fmax.q x26, x27, x28", 0x539dcd2f);
    as("fcvt.s.q f29, f30", 0xd37e3f40);
    as("fcvt.s.q x29, x30", 0xd37e3f40);
    as("fcvt.q.s f31, f0", 0xd37f0046);
    as("fcvt.q.s x31, x0", 0xd37f0046);
    as("fcvt.d.q f1, f2", 0xd3703142);
    as("fcvt.d.q x1, x2", 0xd3703142);
    as("fcvt.q.d f3, f4", 0xd3711246);
    as("fcvt.q.d x3, x4", 0xd3711246);
    as("feq.q a0, f5, f6", 0x53a562a6);
    as("feq.q a0, x5, x6", 0x53a562a6);
    as("flt.q a1, f7, f8", 0xd39583a6);
    as("flt.q a1, x7, x8", 0xd39583a6);
    as("fle.q a2, f9, f10", 0x5386a4a6);
    as("fle.q a2, x9, x10", 0x5386a4a6);
    as("fclass.q a3, f11", 0xd39605e6);
    as("fclass.q a3, x11", 0xd39605e6);
    as("fcvt.w.q a4, f12", 0x537706c6);
    as("fcvt.w.q a4, x12", 0x537706c6);
    as("fcvt.wu.q a5, f13", 0xd3f716c6);
    as("fcvt.wu.q a5, x13", 0xd3f716c6);
    as("fcvt.q.w f14, a6", 0x537708d6);
    as("fcvt.q.w x14, a6", 0x537708d6);
    as("fcvt.q.wu f15, a7", 0xd3f718d6);
    as("fcvt.q.wu x15, a7", 0xd3f718d6);
    as("fcvt.l.q a6, f16", 0x537828c6);
    as("fcvt.l.q a6, x16", 0x537828c6);
    as("fcvt.lu.q a7, f17", 0xd3f838c6);
    as("fcvt.lu.q a7, x17", 0xd3f838c6);
    as("fcvt.q.l f18, a0", 0x537925d6);
    as("fcvt.q.l x18, a0", 0x537925d6);
    as("fcvt.q.lu f19, a1", 0xd3f935d6);
    as("fcvt.q.lu x19, a1", 0xd3f935d6);
    as("flh f20, 2(a2)", 0x071a2600);
    as("fsh f21, 4(a3)", 0x27925601);
    as("fmadd.h f22, f23, f24, f25", 0x43fb8bcd);
    as("fmadd.h x22, x23, x24, x25", 0x43fb8bcd);
    as("fmsub.h f26, f27, f28, f29", 0x47fdcded);
    as("fmsub.h x26, x27, x28, x29", 0x47fdcded);
    as("fnmsub.h f30, f31, f0, f1", 0x4bff0f0c);
    as("fnmsub.h x30, x31, x0, x1", 0x4bff0f0c);
    as("fnmadd.h f2, f3, f4, f5", 0x4ff1412c);
    as("fnmadd.h x2, x3, x4, x5", 0x4ff1412c);
    as("fadd.h f6, f7, f8", 0x53f38304);
    as("fadd.h x6, x7, x8", 0x53f38304);
    as("fsub.h f9, f10, f11", 0xd374b50c);
    as("fsub.h x9, x10, x11", 0xd374b50c);
    as("fmul.h f12, f13, f14", 0x53f6e614);
    as("fmul.h x12, x13, x14", 0x53f6e614);
    as("fdiv.h f15, f16, f17", 0xd377181d);
    as("fdiv.h x15, x16, x17", 0xd377181d);
    as("fsqrt.h f18, f19", 0x53f9095c);
    as("fsqrt.h x18, x19", 0x53f9095c);
    as("fsgnj.h f20, f21, f22", 0x538a6a25);
    as("fsgnj.h x20, x21, x22", 0x538a6a25);
    as("fsgnjn.h f23, f24, f25", 0xd31b9c25);
    as("fsgnjn.h x23, x24, x25", 0xd31b9c25);
    as("fsgnjx.h f26, f27, f28", 0x53adcd25);
    as("fsgnjx.h x26, x27, x28", 0x53adcd25);
    as("fmin.h f29, f30, f31", 0xd30eff2d);
    as("fmin.h x29, x30, x31", 0xd30eff2d);
    as("fmax.h f0, f1, f2", 0x5390202c);
    as("fmax.h x0, x1, x2", 0x5390202c);
    as("fcvt.s.h f3, f4", 0xd3712240);
    as("fcvt.s.h x3, x4", 0xd3712240);
    as("fcvt.h.s f5, f6", 0xd3720344);
    as("fcvt.h.s x5, x6", 0xd3720344);
    as("fcvt.d.h f7, f8", 0xd3732442);
    as("fcvt.d.h x7, x8", 0xd3732442);
    as("fcvt.h.d f9, f10", 0xd3741544);
    as("fcvt.h.d x9, x10", 0xd3741544);
    as("fcvt.q.h f11, f12", 0xd3752646);
    as("fcvt.q.h x11, x12", 0xd3752646);
    as("fcvt.h.q f13, f14", 0xd3763744);
    as("fcvt.h.q x13, x14", 0xd3763744);
    as("feq.h a0, f15, f16", 0x53a507a5);
    as("feq.h a0, x15, x16", 0x53a507a5);
    as("flt.h a1, f17, f18", 0xd39528a5);
    as("flt.h a1, x17, x18", 0xd39528a5);
    as("fle.h a2, f19, f20", 0x538649a5);
    as("fle.h a2, x19, x20", 0x538649a5);
    as("fclass.h a3, f21", 0xd3960ae4);
    as("fclass.h a3, x21", 0xd3960ae4);
    as("fcvt.w.h a4, f22", 0x53770bc4);
    as("fcvt.w.h a4, x22", 0x53770bc4);
    as("fcvt.wu.h a5, f23", 0xd3f71bc4);
    as("fcvt.wu.h a5, x23", 0xd3f71bc4);
    as("fmv.x.h a6, f24", 0x53080ce4);
    as("fcvt.h.w f25, a7", 0xd3fc08d4);
    as("fcvt.h.w x25, a7", 0xd3fc08d4);
    as("fcvt.h.wu f26, s0", 0x537d14d4);
    as("fcvt.h.wu x26, s0", 0x537d14d4);
    as("fmv.h.x f27, s1", 0xd38d04f4);
    as("fcvt.l.h a0, f28", 0x53752ec4);
    as("fcvt.l.h a0, x28", 0x53752ec4);
    as("fcvt.lu.h a1, f29", 0xd3f53ec4);
    as("fcvt.lu.h a1, x29", 0xd3f53ec4);
    as("fcvt.h.l f30, a2", 0x537f26d4);
    as("fcvt.h.l x30, a2", 0x537f26d4);
    as("fcvt.h.lu f31, a3", 0xd3ff36d4);
    as("fcvt.h.lu x31, a3", 0xd3ff36d4);
    as("fence.i", 0x0f100000);
    as("csrrw a0, mvendorid, a1", 0x739515f1);
    as("csrrs a2, mvendorid, a3", 0x73a616f1);
    as("csrrc a4, marchid, a5", 0x73b727f1);
    as("csrrwi a6, mimpid, 6", 0x735833f1);
    as("csrrsi a7, mhartid, 7", 0xf3e843f1);
    as("csrrci t0, mstatus, 8", 0xf3720430);
    as("wrs.nto", 0x7300d000);
    as("wrs.sto", 0x7300d001);
    as("c.lwsp a0, 0", 0x0245);
    as("c.lwsp a0, 0(sp)", 0x0245);
    as("c.ldsp a1, 8", 0xa265);
    as("c.ldsp a1, 8(sp)", 0xa265);
    as("c.flwsp f0, 0", 0x0260);
    as("c.flwsp f0, 0(sp)", 0x0260);
    as("c.fldsp f1, 8", 0xa220);
    as("c.fldsp f1, 8(sp)", 0xa220);
    as("c.swsp a2, 0", 0x32c0);
    as("c.swsp a2, 0(sp)", 0x32c0);
    as("c.sdsp a3, 8", 0x36e4);
    as("c.sdsp a3, 8(sp)", 0x36e4);
    as("c.fswsp f4, 0", 0x12e0);
    as("c.fswsp f4, 0(sp)", 0x12e0);
    as("c.fsdsp f5, 8", 0x16a4);
    as("c.fsdsp f5, 8(sp)", 0x16a4);
    as("c.lw x8, x9, 0", 0x8040);
    as("c.lw x8, (x9)", 0x8040);
    as("c.lw x8, 0(x9)", 0x8040);
    as("c.ld x10, x11, 8", 0x8865);
    as("c.ld x10, 8(x11)", 0x8865);
    as("c.flw f12, x13, 0", 0x9062);
    as("c.flw f12, (x13)", 0x9062);
    as("c.flw f12, 0(x13)", 0x9062);
    as("c.fld f14, x15, 8", 0x9827);
    as("c.fld f14, 8(x15)", 0x9827);
    as("c.sw x8, x15, 0", 0x80c3);
    as("c.sw x8, (x15)", 0x80c3);
    as("c.sw x8, 0(x15)", 0x80c3);
    as("c.sd x9, x14, 8", 0x04e7);
    as("c.sd x9, 8(x14)", 0x04e7);
    as("c.fsw f10, x13, 0", 0x88e2);
    as("c.fsw f10, (x13)", 0x88e2);
    as("c.fsw f10, 0(x13)", 0x88e2);
    as("c.fsd f11, x12, 8", 0x0ca6);
    as("c.fsd f11, 8(x12)", 0x0ca6);
    as("c.j 64", 0x81a0);
    as("c.jal 32", 0x0520);
    as("c.jr x1", 0x8280);
    as("c.jalr x2", 0x0291);
    as("c.beqz x8, 16", 0x01c8);
    as("c.bnez x9, 8", 0x81e4);
    as("c.li x10, 31", 0x7d45);
    as("c.lui x11, 16", 0x8165);
    as("c.lui x12, 31", 0x0166);
    as("c.addi x12, 8", 0x2106);
    as("c.addiw x13, 16", 0xc126);
    as("c.addi16sp sp, 16", 0x4161);
    as("c.slli x14, 1", 0x0607);
    as("c.srli x15, 1", 0x8583);
    as("c.srai x15, 1", 0x8587);
    as("c.andi x15, 1", 0x858b);
    as("c.mv x16, x17", 0x4688);
    as("c.add x18, x19", 0x4e99);
    as("c.and x8, x9", 0x658c);
    as("c.or x10, x11", 0x4d8d);
    as("c.xor x12, x13", 0x358e);
    as("c.sub x14, x15", 0x1d8f);
    as("c.nop", 0x0100);
    as("c.ebreak", 0x0290);
    as("czero.eqz x1, x2, x3", 0xb350310e);
    as("czero.nez x4, x5, x6", 0x33f2620e);
    as("amocas.w x7, x8, x9", 0xafa38428);
    as("amocas.w x7, x8, (x9)", 0xafa38428);
    as("amocas.w x7, x8, 0(x9)", 0xafa38428);
    as("amocas.d x10, x11, x12", 0x2f35b628);
    as("amocas.d x10, x11, (x12)", 0x2f35b628);
    as("amocas.d x10, x11, 0(x12)", 0x2f35b628);
    as("amocas.q x13, x14, x15", 0xafc6e728);
    as("amocas.q x13, x14, (x15)", 0xafc6e728);
    as("amocas.q x13, x14, 0(x15)", 0xafc6e728);
    as("amocas.w.aq x16, x17, x18", 0x2f28192d);
    as("amocas.w.aq x16, x17, (x18)", 0x2f28192d);
    as("amocas.w.aq x16, x17, 0(x18)", 0x2f28192d);
    as("amocas.d.aq x19, x20, x21", 0xafb94a2d);
    as("amocas.d.aq x19, x20, (x21)", 0xafb94a2d);
    as("amocas.d.aq x19, x20, 0(x21)", 0xafb94a2d);
    as("amocas.q.aq x22, x23, x24", 0x2f4b7c2d);
    as("amocas.q.aq x22, x23, (x24)", 0x2f4b7c2d);
    as("amocas.q.aq x22, x23, 0(x24)", 0x2f4b7c2d);
    as("amocas.w.rl x25, x26, x27", 0xafacad2b);
    as("amocas.w.rl x25, x26, (x27)", 0xafacad2b);
    as("amocas.w.rl x25, x26, 0(x27)", 0xafacad2b);
    as("amocas.d.rl x28, x29, x30", 0x2f3edf2b);
    as("amocas.d.rl x28, x29, (x30)", 0x2f3edf2b);
    as("amocas.d.rl x28, x29, 0(x30)", 0x2f3edf2b);
    as("amocas.q.rl x31, x0, x1", 0xafcf002a);
    as("amocas.q.rl x31, x0, (x1)", 0xafcf002a);
    as("amocas.q.rl x31, x0, 0(x1)", 0xafcf002a);
    as("amocas.w.aqrl x2, x3, x4", 0x2f21322e);
    as("amocas.w.aqrl x2, x3, (x4)", 0x2f21322e);
    as("amocas.w.aqrl x2, x3, 0(x4)", 0x2f21322e);
    as("amocas.d.aqrl x5, x6, x7", 0xafb2632e);
    as("amocas.d.aqrl x5, x6, (x7)", 0xafb2632e);
    as("amocas.d.aqrl x5, x6, 0(x7)", 0xafb2632e);
    as("amocas.q.aqrl x8, x9, x10", 0x2f44952e);
    as("amocas.q.aqrl x8, x9, (x10)", 0x2f44952e);
    as("amocas.q.aqrl x8, x9, 0(x10)", 0x2f44952e);
    as("c.lbu x8, x9, 2", 0xa080);
    as("c.lbu x8, 2(x9)", 0xa080);
    as("c.lhu x10, x11, 2", 0xa885);
    as("c.lhu x10, 2(x11)", 0xa885);
    as("c.lh x12, x13, 2", 0xf086);
    as("c.lh x12, 2(x13)", 0xf086);
    as("c.sb x14, x15, 2", 0xb88b);
    as("c.sb x14, 2(x15)", 0xb88b);
    as("c.sh x8, x9, 2", 0xa08c);
    as("c.sh x8, 2(x9)", 0xa08c);
    as("c.zext.b x8", 0x619c);
    as("c.sext.b x9", 0xe59c);
    as("c.zext.h x10", 0x699d);
    as("c.sext.h x11", 0xed9d);
    as("c.zext.w x12", 0x719e);
    as("c.not x13", 0xf59e);
    as("c.mul x14, x15", 0x5d9f);
    as("cm.mvsa01 s0, s1", 0x26ac);
    as("cm.mva01s s0, s1", 0x66ac);
    as("cm.jt 16", 0x42a0);
    as("cm.jalt 64", 0x02a1);
    as("fli.s f0, -1.0", 0x530010f0);
    as("fli.s f1, min", 0xd38010f0);
    as("fli.s f2, 0.000015258789", 0x530111f0);
    as("fli.s f3, 0.000030517578", 0xd38111f0);
    as("fli.s f4, 0.00390625", 0x530212f0);
    as("fli.s f5, 0.0078125", 0xd38212f0);
    as("fli.s f6, 0.0625", 0x530313f0);
    as("fli.s f7, 0.125", 0xd38313f0);
    as("fli.s f8, 0.25", 0x530414f0);
    as("fli.s f9, 0.3125", 0xd38414f0);
    as("fli.s f10, 0.375", 0x530515f0);
    as("fli.s f10, 0.4375", 0x538515f0);
    as("fli.s f11, 0.5", 0xd30516f0);
    as("fli.s f12, 0.625", 0x538616f0);
    as("fli.s f13, 0.75", 0xd30617f0);
    as("fli.s f14, 0.875", 0x538717f0);
    as("fli.s f15, 1.0", 0xd30718f0);
    as("fli.s f16, 1.25", 0x538818f0);
    as("fli.s f17, 1.5", 0xd30819f0);
    as("fli.s f18, 1.75", 0x538919f0);
    as("fli.s f19, 2.0", 0xd3091af0);
    as("fli.s f20, 2.5", 0x538a1af0);
    as("fli.s f21, 3.0", 0xd30a1bf0);
    as("fli.s f22, 4.0", 0x538b1bf0);
    as("fli.s f23, 8.0", 0xd30b1cf0);
    as("fli.s f24, 16.0", 0x538c1cf0);
    as("fli.s f25, 128.0", 0xd30c1df0);
    as("fli.s f26, 256.0", 0x538d1df0);
    as("fli.s f27, 32768.0", 0xd30d1ef0);
    as("fli.s f28, 65536.0", 0x538e1ef0);
    as("fli.s f29, inf", 0xd30e1ff0);
    as("fli.s f30, nan", 0x538f1ff0);
    as("fli.d f0, -1.0", 0x530010f2);
    as("fli.q f0, -1.0", 0x530010f6);
    as("fli.h f0, -1.0", 0x530010f4);
    as("fminm.s f0, f1, f2", 0x53a02028);
    as("fmaxm.s f3, f4, f5", 0xd3315228);
    as("fminm.d f6, f7, f8", 0x53a3832a);
    as("fmaxm.d f9, f10, f11", 0xd334b52a);
    as("fminm.h f12, f13, f14", 0x53a6e62c);
    as("fmaxm.h f15, f16, f17", 0xd337182d);
    as("fminm.q f18, f19, f20", 0x53a9492f);
    as("fmaxm.q f21, f22, f23", 0xd33a7b2f);
    as("fround.s f24, f25", 0x53fc4c40);
    as("froundnx.s f26, f27", 0x53fd5d40);
    as("fround.d f28, f29", 0x53fe4e42);
    as("froundnx.d f30, f31", 0x53ff5f42);
    as("fround.h f0, f1", 0x53f04044);
    as("froundnx.h f2, f3", 0x53f15144);
    as("fround.q f4, f5", 0x53f24246);
    as("froundnx.q f6, f7", 0x53f35346);
    as("fcvtmod.w.d a0, f0, rtz", 0x531580c2);
    as("fmvh.x.d a1, f1", 0xd38510e2);
    as("fmvp.d.x f2, a2, a3", 0x5301d6b2);
    as("fmvh.x.q a4, f4", 0x530712e6);
    as("fmvp.q.x f5, a5, a6", 0xd38207b7);
    as("fleq.s a7, f6, f7", 0xd34873a0);
    as("fltq.s t0, f8, f9", 0xd35294a0);
    as("fleq.d t1, f10, f11", 0x5343b5a2);
    as("fltq.d t2, f12, f13", 0xd353d6a2);
    as("fleq.h t3, f14, f15", 0x534ef7a4);
    as("fltq.h t4, f16, f17", 0xd35e18a5);
    as("fleq.q t5, f18, f19", 0x534f39a7);
    as("fltq.q t6, f20, f21", 0xd35f5aa7);
    as("mop.r.0 x0, x1", 0x73c0c081);
    as("mop.r.1 x2, x3", 0x73c1d181);
    as("mop.r.2 x4, x5", 0x73c2e281);
    as("mop.r.3 x6, x7", 0x73c3f381);
    as("mop.r.4 x8, x9", 0x73c4c485);
    as("mop.r.5 x10, x11", 0x73c5d585);
    as("mop.r.6 x12, x13", 0x73c6e685);
    as("mop.r.7 x14, x15", 0x73c7f785);
    as("mop.r.8 x16, x17", 0x73c8c889);
    as("mop.r.9 x18, x19", 0x73c9d989);
    as("mop.r.10 x20, x21", 0x73caea89);
    as("mop.r.11 x22, x23", 0x73cbfb89);
    as("mop.r.12 x24, x25", 0x73cccc8d);
    as("mop.r.13 x26, x27", 0x73cddd8d);
    as("mop.r.14 x28, x29", 0x73ceee8d);
    as("mop.r.15 x30, x31", 0x73cfff8d);
    as("mop.r.16 x0, x1", 0x73c0c0c1);
    as("mop.r.17 x2, x3", 0x73c1d1c1);
    as("mop.r.18 x4, x5", 0x73c2e2c1);
    as("mop.r.19 x6, x7", 0x73c3f3c1);
    as("mop.r.20 x8, x9", 0x73c4c4c5);
    as("mop.r.21 x10, x11", 0x73c5d5c5);
    as("mop.r.22 x12, x13", 0x73c6e6c5);
    as("mop.r.23 x14, x15", 0x73c7f7c5);
    as("mop.r.24 x16, x17", 0x73c8c8c9);
    as("mop.r.25 x18, x19", 0x73c9d9c9);
    as("mop.r.26 x20, x21", 0x73caeac9);
    as("mop.r.27 x22, x23", 0x73cbfbc9);
    as("mop.r.28 x24, x25", 0x73cccccd);
    as("mop.r.29 x26, x27", 0x73cdddcd);
    as("mop.r.30 x28, x29", 0x73ceeecd);
    as("mop.r.31 x30, x31", 0x73cfffcd);
    as("mop.rr.0 x0, x1, x2", 0x73c02082);
    as("mop.rr.1 x3, x4, x5", 0xf3415286);
    as("mop.rr.2 x6, x7, x8", 0x73c3838a);
    as("mop.rr.3 x9, x10, x11", 0xf344b58e);
    as("mop.rr.4 x12, x13, x14", 0x73c6e6c2);
    as("mop.rr.5 x15, x16, x17", 0xf34718c7);
    as("mop.rr.6 x18, x19, x20", 0x73c949cb);
    as("mop.rr.7 x21, x22, x23", 0xf34a7bcf);
    as("add.uw x1, x1, x2", 0xbb802008);
    as("andn x3, x3, x4", 0xb3f14140);
    as("bclr x5, x5, x6", 0xb3926248);
    as("bext x7, x7, x8", 0xb3d38348);
    as("binv x9, x9, x10", 0xb394a468);
    as("bset x11, x11, x12", 0xb395c528);
    as("clmul x13, x13, x14", 0xb396e60a);
    as("clmulh x15, x15, x16", 0xb3b7070b);
    as("clmulr x17, x17, x18", 0xb3a8280b);
    as("clz x19, x19", 0x93990960);
    as("clzw x20, x20", 0x1b1a0a60);
    as("cpop x21, x21", 0x939a2a60);
    as("cpopw x22, x22", 0x1b1b2b60);
    as("ctz x23, x23", 0x939b1b60);
    as("ctzw x24, x24", 0x1b1c1c60);
    as("max x25, x25, x26", 0xb3ecac0b);
    as("maxu x27, x27, x28", 0xb3fdcd0b);
    as("min x29, x29, x30", 0xb3ceee0b);
    as("minu x31, x31, x0", 0xb3df0f0a);
    as("orc.b x1, x2", 0x93507128);
    as("orn x3, x4, x5", 0xb3615240);
    as("rev.b x6, x7", 0x13d37368);
    as("rol x8, x9, x10", 0x3394a460);
    as("rolw x11, x12, x13", 0xbb15d660);
    as("ror x14, x15, x16", 0x33d70761);
    as("roriw x17, x18, 1", 0x9b581960);
    as("rorw x19, x20, x21", 0xbb595a61);
    as("sext.b x22, x23", 0x139b4b60);
    as("sext.h x24, x25", 0x139c5c60);
    as("sh1add x26, x27, x28", 0x33adcd21);
    as("sh1add.uw x29, x30, x31", 0xbb2eff21);
    as("sh2add x1, x2, x3", 0xb3403120);
    as("sh2add.uw x4, x5, x6", 0x3bc26220);
    as("sh3add x7, x8, x9", 0xb3639420);
    as("sh3add.uw x10, x11, x12", 0x3be5c520);
    as("slli.uw x13, x14, 1", 0x9b161708);
    as("unzip x15, x16", 0x9357f809);
    as("xnor x17, x18, x19", 0xb3483941);
    as("xperm.b x20, x21, x22", 0x33ca6a29);
    as("xperm.n x23, x24, x25", 0xb32b9c29);
    as("zip x26, x27", 0x139ded09);

    as("li a0, 20", 0x13054001);
    as("mv t1, t2", 0x13830300);
    as("not t3, t4", 0x13cefeff);
    as("neg t5, t6", 0x330ff041);
    as("negw a0, s0", 0x3b058040);
    as("sext.w a1, s1", 0x9b850400);
    as("zext.b a2, s2", 0x1376f90f);
    as("seqz a3, s3", 0x93b61900);
    as("snez a4, s4", 0x33374001);
    as("sltz a5, s5", 0xb3a70a00);
    as("sgtz a6, s6", 0x33286001);
    as("fmv.s f0, f1", 0x53801020);
    as("fabs.s f2, f3", 0x53a13120);
    as("fneg.s f4, f5", 0x53925220);
    as("fmv.d f6, f7", 0x53837322);
    as("fabs.d f8, f9", 0x53a49422);
    as("fneg.d f10, f11", 0x5395b522);
    as("bgt t0, t1, 24", 0x631c5300);
    as("ble t2, t3, 24", 0x634c7e00);
    as("bgtu t4, t5, 24", 0x635cdf01);
    as("bleu x1, x2, -12", 0xe36a11fe);
    as("beqz t6, -40", 0xe38c0ffc);
    as("bnez x7, -40", 0xe39c03fc);
    as("bgez a0, -40", 0xe34c05fc);
    as("blez a1, -40", 0xe34cb0fc);
    as("bgtz a2, 64", 0x6310c004);
    as("j 24", 0x6f008001);
    as("ret", 0x67800000);
    as("nop", 0x13000000);
    as("fmv.s.x f12, a3", 0x538606f0);
    as("fmv.x.s a4, f13", 0x538706e0);
    as("rdinstret t0", 0xf32220c0);
    as("rdinstreth t1", 0x732320c8);
    as("rdcycle t2", 0xf32300c0);
    as("rdcycleh t3", 0x732e00c8);
    as("rdtime t4", 0xf32e10c0);
    as("rdtimeh t5", 0x732f10c8);
    as("csrr a0, mvendorid", 0x732510f1);
    as("csrw mvendorid, a1", 0x739015f1);
    as("csrs mvendorid, a2", 0x732016f1);
    as("csrc mvendorid, a3", 0x73b016f1);
    as("csrwi mimpid, 6", 0x735033f1);
    as("csrsi mhartid, 7", 0x73e043f1);
    as("csrci mstatus, 8", 0x73700430);
    as("frcsr a0", 0x73253000);
    as("fscsr a1", 0x73903500);
    as("frrm a2", 0x73262000);
    as("fsrm a3", 0x73902600);
    as("fsrm a4, a5", 0x73972700);
    as("fsrmi 6", 0x73502300);
    as("fsrmi x20, 6", 0x735a2300);
    as("frflags a6", 0x73281000);
    as("fsflags a7", 0x73901800);
    as("fsflags a0, a1", 0x73951500);
    as("fsflagsi 8", 0x73501400);
    as("fsflagsi s0, 16", 0x73541800);
    as("ntl.p1", 0x33002000);
    as("ntl.pall", 0x33003000);
    as("ntl.s1", 0x33004000);
    as("ntl.all", 0x33005000);

    as("beq t0, t1, foolabel\n#blahblah comment\nadd a0, a5, a6\nfoolabel:", {0x63, 0x84, 0x62, 0x00, 0x33, 0x85, 0x07, 0x01});
    as("foolabel:\nadd a0, a5, a6\nbne t0, t1, foolabel\n#ignore this", {0x33, 0x85, 0x07, 0x01, 0xe3, 0x9e, 0x62, 0xfe});
    as("beq t0, t1, foolabel\nc.li a5, 26 # foobar\n\n\n#irrelevant comment\n\n#another comment\n\nfoolabel: # also ignore this comment", {0x63, 0x83, 0x62, 0x00, 0xe9, 0x47});
    as("foolabel:\nc.li a5, 26\nbeq t0, t1, foolabel", {0xe9, 0x47, 0xe3, 0x8f, 0x62, 0xfe});
    as("foolabel:\nc.li a5, 26\nadd s0, s1, s2\nbeq t0, t1, foolabel", {0xe9, 0x47, 0x33, 0x84, 0x24, 0x01, 0xe3, 0x8d, 0x62, 0xfe});
    as("dummylabel:\nc.li a5, 26\n#another comment for good measure\nbeq t0, t1, foolabel\nxor a0, a1, a2\nbarlabel:\nfoolabel:\nadd s0, s1, s2\nj dummylabel",
       {0xe9, 0x47, 0x63, 0x84, 0x62, 0x00, 0x33, 0xc5, 0xc5, 0x00, 0x33, 0x84, 0x24, 0x01, 0x6f, 0xf0, 0x3f, 0xff});
    as("foolabel:\njal zero, foolabel\nc.j foolabel\nbazlabel:\njal zero, barlabel\nc.j barlabel\n.dotlabel:\nbarlabel:", {0x6f, 0x00, 0x00, 0x00, 0xf5, 0xbf, 0x6f, 0x00, 0x60, 0x00, 0x09, 0xa0});
    as(".dotfoolabel:\njal zero, .dotfoolabel\nc.j .dotfoolabel\nbazlabel:\njal zero, .dotbarlabel\nc.j .dotbarlabel\n.dotlabel:\n.dotbarlabel:",
       {0x6f, 0x00, 0x00, 0x00, 0xf5, 0xbf, 0x6f, 0x00, 0x60, 0x00, 0x09, 0xa0});

    std::cout << passed_tests << " tests passed, " << failed_tests << " tests failed, " << passed_tests + failed_tests << " tests total" << std::endl;

    if (passed_tests == passed_tests + failed_tests) {
        std::cout << "Yay, all your tests passed!" << std::endl;
    }
}