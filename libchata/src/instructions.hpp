// SPDX-License-Identifier: MPL-2.0
#include <array>
#include <cstdint>
#include <initializer_list>
#include <optional>
#include <string_view>
#include "libchata.hpp"

namespace libchata_internal {

constexpr uint16_t instr_search_failed = (uint16_t)-1;
const uint16_t fast_instr_search(const chatastring& inst);

enum class RVInstructionID : uint16_t {
    LUI, // RV32I
    AUIPC,
    JAL,
    JALR,
    BEQ,
    BNE,
    BLT,
    BGE,
    BLTU,
    BGEU,
    LB,
    LH,
    LW,
    LBU,
    LHU,
    SB,
    SH,
    SW,
    ADDI,
    SLTI,
    SLTIU,
    XORI,
    ORI,
    ANDI,
    SLLI,
    SRLI,
    SRAI,
    ADD,
    SUB,
    SLL,
    SLT,
    SLTU,
    XOR,
    SRL,
    SRA,
    OR,
    AND,
    FENCE,
    FENCETSO,
    PAUSE,
    ECALL,
    EBREAK,
    LWU, // RV64I
    LD,
    SD,
    ADDIW,
    SLLIW,
    SRLIW,
    SRAIW,
    ADDW,
    SUBW,
    SLLW,
    SRLW,
    SRAW,
    MUL, // RV32M
    MULH,
    MULHSU,
    MULHU,
    DIV,
    DIVU,
    REM,
    REMU,
    MULW, // RV64M
    DIVW,
    DIVUW,
    REMW,
    REMUW,
    LRW, // RV32A
    SCW,
    LRWAQ, // RV32A (aq)
    SCWAQ,
    LRWRL, // RV32A (rl)
    SCWRL,
    LRWAQRL, // RV32A (aqrl)
    SCWAQRL,
    AMOSWAPW,
    AMOADDW,
    AMOXORW,
    AMOANDW,
    AMOORW,
    AMOMINW,
    AMOMAXW,
    AMOMINUW,
    AMOMAXUW,
    AMOSWAPWAQ,
    AMOADDWAQ,
    AMOXORWAQ,
    AMOANDWAQ,
    AMOORWAQ,
    AMOMINWAQ,
    AMOMAXWAQ,
    AMOMINUWAQ,
    AMOMAXUWAQ,
    AMOSWAPWRL,
    AMOADDWRL,
    AMOXORWRL,
    AMOANDWRL,
    AMOORWRL,
    AMOMINWRL,
    AMOMAXWRL,
    AMOMINUWRL,
    AMOMAXUWRL,
    AMOSWAPWAQRL,
    AMOADDWAQRL,
    AMOXORWAQRL,
    AMOANDWAQRL,
    AMOORWAQRL,
    AMOMINWAQRL,
    AMOMAXWAQRL,
    AMOMINUWAQRL,
    AMOMAXUWAQRL,
    LRD, // RV64A
    SCD,
    LRDAQ, // RV64A (aq)
    SCDAQ,
    LRDRL, // RV64A (rl)
    SCDRL,
    LRDAQRL, // RV64A (aqrl)
    SCDAQRL,
    AMOSWAPD,
    AMOADDD,
    AMOXORD,
    AMOANDD,
    AMOORD,
    AMOMIND,
    AMOMAXD,
    AMOMINUD,
    AMOMAXUD,
    AMOSWAPDAQ,
    AMOADDDAQ,
    AMOXORDAQ,
    AMOANDDAQ,
    AMOORDAQ,
    AMOMINDAQ,
    AMOMAXDAQ,
    AMOMINUDAQ,
    AMOMAXUDAQ,
    AMOSWAPDRL,
    AMOADDDRL,
    AMOXORDRL,
    AMOANDDRL,
    AMOORDRL,
    AMOMINDRL,
    AMOMAXDRL,
    AMOMINUDRL,
    AMOMAXUDRL,
    AMOSWAPDAQRL,
    AMOADDDAQRL,
    AMOXORDAQRL,
    AMOANDDAQRL,
    AMOORDAQRL,
    AMOMINDAQRL,
    AMOMAXDAQRL,
    AMOMINUDAQRL,
    AMOMAXUDAQRL,
    FMADDS, // RV32F
    FMSUBS,
    FNMSUBS,
    FNMADDS,
    FADDS,
    FSUBS,
    FMULS,
    FDIVS,
    FSQRTS,
    FSGNJS,
    FSGNJNS,
    FSGNJXS,
    FMINS,
    FMAXS,
    FCVTWS,
    FCVTWUS,
    FMVXW,
    FEQS,
    FLTS,
    FLES,
    FCLASSS,
    FCVTSW,
    FCVTSWU,
    FMVWX,
    FLW,
    FSW,
    FCVTLS, // RV64F
    FCVTLUS,
    FCVTSL,
    FCVTSLU,
    FADDD, // RV32D
    FCLASSD,
    FCVTDS,
    FCVTDW,
    FCVTDWU,
    FCVTSD,
    FCVTWD,
    FCVTWUD,
    FDIVD,
    FEQD,
    FLD,
    FLED,
    FLTD,
    FMADDD,
    FMAXD,
    FMIND,
    FMSUBD,
    FMULD,
    FNMADDD,
    FNMSUBD,
    FSD,
    FSGNJD,
    FSGJND,
    FSGNJXD,
    FSQRTD,
    FSUBD,
    FCVTLD, // RV64D
    FCVTLUD,
    FMVXD,
    FCVTDL,
    FCVTDLU,
    FMVDX,
    FLQ, // RV32Q
    FSQ,
    FMADDQ,
    FMSUBQ,
    FNMSUBQ,
    FNMADDQ,
    FADDQ,
    FSUBQ,
    FMULQ,
    FDIVQ,
    FSQRTQ,
    FSGNJQ,
    FSGNJNQ,
    FSGNJXQ,
    FMINQ,
    FMAXQ,
    FCVTSQ,
    FCVTQS,
    FCVTDQ,
    FCVTQD,
    FEQQ,
    FLTQ,
    FLEQ,
    FCLASSQ,
    FCVTWQ,
    FCVTWUQ,
    FCVTQW,
    FCVTQWU,
    FCVTLQ, // RV64Q
    FCVTLUQ,
    FCVTQL,
    FCVTQLU,
    FLH, // RV32Zfh
    FSH,
    FMADDH,
    FMSUBH,
    FNMSUBH,
    FNMADDH,
    FADDH,
    FSUBH,
    FMULH,
    FDIVH,
    FSQRTH,
    FSGNJH,
    FSGNJNH,
    FSGNJXH,
    FMINH,
    FMAXH,
    FCVTSH,
    FCVTHS,
    FCVTDH,
    FCVTHD,
    FCVTQH,
    FCVTHQ,
    FEQH,
    FLTH,
    FLEH,
    FCLASSH,
    FCVTWH,
    FCVTWUH,
    FMVXH,
    FCVTHW,
    FCVTHWU,
    FMVHX,
    FCVTLH, // RV64Zfh
    FCVTLUH,
    FCVTHL,
    FCVTHLU,
    FENCEI, // Zifencei
    CSRRW,  // Zicsr
    CSRRS,
    CSRRC,
    CSRRWI,
    CSRRSI,
    CSRRCI,
    WRSNTO, // Zawrs
    WRSSTO,
    CLWSP, // C
    CLDSP,
    CFLWSP,
    CFLDSP,
    CSWSP,
    CSDSP,
    CFSWSP,
    CFSDSP,
    CLW,
    CLD,
    CFLW,
    CFLD,
    CSW,
    CSD,
    CFSW,
    CFSD,
    CJump,
    CJAL,
    CJR,
    CJALR,
    CBEQZ,
    CBNEZ,
    CLI,
    CLUI,
    CADDI,
    CADDIW,
    CADDI16SP,
    CSLLI,
    CSRLI,
    CSRAI,
    CANDI,
    CMV,
    CADD,
    CAND,
    COR,
    CXOR,
    CSUB,
    CADDW,
    CSUBW,
    CNOP,
    CEBREAK,
};

enum class RVInstructionFormat : uint8_t {
    R,
    I,
    S,
    B,
    U,
    J,
    R4,
    CR,
    CI,
    CSS,
    CIW,
    CL,
    CS,
    CA,
    CB,
    CJ
};

enum class RVInstructionSet : uint8_t {
    RV32I,
    RV64I,
    RV32M,
    RV64M,
    RV32A,
    RV64A,
    RV32F,
    RV64F,
    RV32D,
    RV64D,
    RV32Q,
    RV64Q,
    RV32Zfh,
    RV64Zfh,
    Zifencei,
    Zicsr,
    Zawrs,
    C,
    V
};

struct special_snowflake_args {
    std::optional<uint8_t> rs2;
    bool use_rm_for_funct3 = false;
    bool use_imm_for_rs2 = false;
    bool super_special_snowflake = false;
};

struct rvinstruction {
    std::string_view name;
    RVInstructionFormat type;
    RVInstructionID id;
    uint8_t opcode;
    uint16_t funct;
    RVInstructionSet set;
    special_snowflake_args ssargs = {};
};

extern const std::array<rvinstruction, 335> instructions;

} // namespace libchata_internal